<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>MovieClip.duplicateMovieClip</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myMovieClip.duplicateMovieClip(dupName, copyName, depth [,propertyobject]);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myMovieClip</span></span>is a movie clip. <span class=Code><span style='font-family:Courier'>copyName</span></span>is the copy that this method willcreate on the timeline of <span class=Code><span style='font-family:Courier'>myMovieClip</span></span>.The copy will be created at a depth of <span class=Code><span style='font-family:Courier'>depth</span></span>,and you can use the optional parameter <spanclass=Code><span style='font-family:Courier'>propertyObject</span></span>(which is an <span class=Code><spanstyle='font-family:Courier'>Object</span></span> object) to initialize thecopy.</p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Compatiblewith Flash 5 and later. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.duplicatemovieClip()</span></span>method takes an existing movie clip on the stage and copies it.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip()</span></span>method is used to duplicate a movie clip (that is already somewhere on thestage) to the current timeline.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Although this method may seem very similar to <spanclass=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>(and the examples we are using are almost identical to the ones seen in thatentry) there is one fundamental difference: <span class=Code><spanstyle='font-family:Courier'>duplicateMovieClip</span></span> copies from a <i>timeline </i>whereas <span class=Code><spanstyle='font-family:Courier'>attachMovie</span></span> copies from the <i>Library. </i>See the Tips and precautionssection to see the implications of this, and when to use each version.</p><p class=MsoBodyText> </p><p class=MsoBodyText>To create a movie clip that can be duplicated, you mustmake sure that it has streamed in by the frame you first use attempt to copyit. The easiest way to do this is to place it on a keyframe on (or before) the <spanclass=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>that attempts to use it. If you do not want the movie clip you intend toduplicate to be seen, you can simply make it invisible to the user by placingit either offscreen or making its <span class=Code><span style='font-family:Courier'>MovieClip._visible</span></span> property <span class=Code><spanstyle='font-family:Courier'>false</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The examples in this heading are backed up by the file <ahref="../fla/mcduplicatemovieclipex01.fla">mcduplicatemovieclipex01.fla</a> / <ahref="../swf/mcduplicatemovieclipex01.swf">mcduplicatemovieclipex01.swf</a>.This shows the various ways to duplicate a movie clip called <span class=Code><spanstyle='font-family:Courier'>dot</span></span>.Before (left) andafter (right) results from this file are shown below, and you should refer toit if any of the written examples cause you grief.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=180 height=188src="../png/0586-dict8-92.png"> <b><span style='color:red'> </span></b><img border=0 width=180 height=188src="../png/0586-dict8-93.png"><b><spanstyle='color:red'> </span></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following code will duplicate an existing movie clip <spanclass=Code><span style='font-family:Courier'>dot</span></span>as <span class=Code><spanstyle='font-family:Courier'>dot01</span></span>,and the copy willhave a depth of <span class=Code><span style='font-family:Courier'>0</span></span>.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot.duplicateMovieClip(&quot;dot01&quot;,0);</span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>Since the duplicated movie clip occupies the same place asthe original, you may have trouble seeing it (although you will see that thereactually is now two versions of the movie clip if you look in the Debugger).The best way round this is to move the copy after creating it:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot.duplicateMovieClip(&quot;dot01&quot;,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot01._x+= 150;</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You should also be aware that the depth of each movie clipon a given timeline should be unique. You are only allowed to have one symbolin each depth, and if you try to do otherwise, the new clip will replace thesymbol already at that depth. Assuming that you have placed <span class=Code><spanstyle='font-family:Courier'>dot</span></span>on a timeline manually (recommended), then it will have a <spanclass=ImportantWord><span style='font-family:Helvetica'>negative depth</span></span>(as does all content placed on thestage during authoring time) and you don’t have to worry about overwriting itwith an <span class=Code><span style='font-family:Courier'>attachMovie</span></span>or <span class=Code><span style='font-family:Courier'>duplicateMovieClip</span></span>because you use positive depths with these methods.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyTextIndent><span class=ImportantWord><span style='font-family:Helvetica'>Note </span></span></p><p class=MsoBodyTextIndent>Some advanced scripters have used undocumentednegative values with <span class=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>and <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>with some success, although there seems little merit in doing this.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>You can move the copy in a more structured way by addingthe additional <span class=Code><span style='font-family:Courier'>propertyObject</span></span>argument<i>. </i>This objects properties will be added to the timeline of thenewly attached movie clip if they are not movie clip properties, or will beused as initial values for the movie clip properties if they are. This soundsmore complicated than it actually is, so lets see it in action.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>If we define an object <span class=Code><spanstyle='font-family:Courier'>initObject</span></span>as shown and then add it to your <span class=Code><spanstyle='font-family:Courier'>duplicatemovieClip</span></span> method as a newparameter:</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initObject= {_x:200, _y:200, myVariable:10};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot.duplicateMovieClip(&quot;dot01&quot;,0, initObject);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=159 height=57src="../png/0586-dict8-45.png"></p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>… the properties <span class=Code><span style='font-family:Courier'>initObject._x</span></span> and <span class=Code><spanstyle='font-family:Courier'>initObject._y</span></span> will be used to definethe initial position properties <span class=Code><span style='font-family:Courier'>dot01._x</span></span>and <span class=Code><span style='font-family:Courier'>dot01._y</span></span>.The <span class=Code><span style='font-family:Courier'>myVariable</span></span>property of <span class=Code><span style='font-family:Courier'>initObject</span></span>does not correspond to a movie clip property, and will instead appear as avariable on the timeline of <span class=Code><span style='font-family:Courier'>dot01</span></span>(it will of course appear as <span class=Code><span style='font-family:Courier'>_root.dot01.myVariable</span></span>).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Assuming that we have the movie clip defined as above (amovie clip with instance name <span class=Code><span style='font-family:Courier'>dot</span></span>that is a small dot graphic), then the following examples show the results ofvarious uses of <span class=Code><span style='font-family:Courier'>duplicateMovieClip</span></span>(the same examples are also used in <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>, so you can look at those as wellto compare and contrast):</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=576 valign=top style='width:432.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Examples</span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr>    <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt' height="239">       <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot.duplicateMovieClip(&quot;dot01&quot;,  0);</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>This will copy the existing movie clip </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span class=Code>as </span><span  class=Code><span style='font-family:Courier'>dot01</span></span><span  class=Code>.</span><span class=Code>You will not  see any change to the screen because both the original and the duplicate  occupy the same position. You can however see that the duplicate exists by  looking in the Debugger.</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code>See also <a  href="../fla/mcduplicatemovieclipex02.fla">mcduplicatemovieclipex02.fla</a>         / <a  href="../swf/mcduplicatemovieclipex02.swf">mcduplicatemovieclipex02.swf</a>.</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><i>&nbsp;</i></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><i>&nbsp;</i></span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=200 height=143  src="../png/0586-dict8-49.png"></span></span><b><span style='color:red'> </span></b><span class=Code><span  style='font-family:Courier'><img border=0 width=128 height=69  src="../png/0586-dict8-47.png"></span></span></p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code>This code shows how </span><span  class=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span><span  class=Code> can be used to create multiple clips. The code attaches 500 instances         of </span><span class=Code><span style='font-family:Courier'>dot</span></span><span  class=Code>,</span><span class=Code>called </span><span  class=Code><span style='font-family:Courier'>dot0</span></span><span class=Code>to         </span><span  class=Code><span style='font-family:Courier'>dot499</span></span><span  class=Code>.</span><span class=Code>See also the <a  href="../fla/mcduplicatemovieclipex03.fla">mcduplicatemovieclipex03.fla</a>         </span><span  class=Code><span style='font-family:Courier'>/</span></span><span class=Code>         <a  href="../swf/mcduplicatemovieclipex03.swf">mcduplicatemovieclipex03.swf</a>.</span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>dot._visible  = false;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot  = new Object();</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot._visible  = true;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for  (i=0; i&lt;500; i++) {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> initDot._x = Math.random()*550;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> initDot._y = Math.random()*400;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> _root.dot.duplicateMovieClip(&quot;dot&quot;+i, i, initDot);</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Try doing this manually!</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=200 height=144  src="../png/0586-dict8-48.png"></span></span></p>    <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Notice the following features of this  code:</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=Bullet-Level1><span class=Code><span  style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span></span><span class=Code>The way we have made the original clip  disappear by setting its </span><span class=Code><span  style='font-family:Courier'>_visible</span></span><span class=Code> property to </span><span  class=Code><span style='font-family:Courier'>false</span></span><span  class=Code>, and set the </span><span class=Code><span style='font-family:  Courier'>_visible</span></span><span class=Code> of each duplicate to </span><span  class=Code><span style='font-family:Courier'>true</span></span><span  class=Code> via </span><span class=Code><span style='font-family:Courier'>initDot</span></span><span  class=Code>.</span></p>  <p class=Bullet-Level1><span class=Code><span  style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span></span><span class=Code>The use of </span><span class=Code><span  style='font-family:Courier'>initDot</span></span><span class=Code>to give each </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span class=Code>clip a random  position on the stage.</span></p>  <p class=Bullet-Level1><span class=Code><span  style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span></span><span class=Code>The use of the </span><span  class=Code><span style='font-family:Courier'>for</span></span><span  class=Code>loop variable </span><span class=Code><span style='font-family:  Courier'>i</span></span><span  class=Code>and the way it is used to give each </span><span class=Code><span  style='font-family:Courier'>dot</span></span><span class=Code>instance a unique name via string  concatenation (</span><span class=Code><span style='font-family:Courier'>“dot”+i</span></span><span  class=Code>) and the way it is also used to give each instance a unique depth.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code>In this final example, the dots are         not only created dynamically, but also animated dynamically to create         a magnetism particle effect. Hitting the mouse button will toggle the         nature of the attractions from magnetic to repulsive. (The same effect         can be seen using the </span><span class=Code><span style='font-family:Courier'>attachMovieClip</span></span><span  class=Code> method in <a href="../fla/tapeworm.fla">tapeworm.fla</a> / <a  href="../swf/tapeworm.swf">tapeworm.swf</a> – see also the entry for </span><span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.attachMovieClip</span></span><span  class=Code>.)</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=200 height=144  src="../png/0586-dict8-50.png"></span></span></p>    <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function  animateDot() {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> this._x -=  this.magnetism*(this._x-_root._xmouse)/this.inertia;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> this._y -= this.magnetism*(this._y-_root._ymouse)/this.inertia;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function  reversePolarity() {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>this.magnetism  = -this.magnetism;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>dot._visible  = false;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot  = new Object();</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot._visible  = true;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot.magnetism  = 1;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for  (i=0; i&lt;200; i++) {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot._x  = Math.random()*550;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot._y  = Math.random()*400;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot.inertia  = Math.random()*30+2;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.dot.duplicateMovieClip(&quot;dot&quot;+i,  i, initDot);</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root[&quot;dot&quot;+i].onEnterFrame  = animateDot;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root[&quot;dot&quot;+i].onMouseDown  = reversePolarity;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Notice the way that the </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span  class=Code> instances are referenced <i>after</i>  they have been created with </span><span class=Code><span  style='font-family:Courier'>root[&quot;dot&quot;+i]</span></span><span  class=Code>.</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText><span class=Code>This method is well known as the starting point ofall sorts of Flash effects. By creating lots of little clips, you can veryquickly build up particle effects. When used with text, you can also createsome cool text transitions</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>To remove a movie that has been attached with the <spanclass=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip()</span></span>method, use the <span class=Code><span style='font-family:Courier'>MovieClip.removeMovieClip()</span></span>method. To replace a movie clip, you can simply overwrite its depth withanother movie clip using <span class=Code><span style='font-family:Courier'>MovieClip.duplicatemovieClip</span></span>(or <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>,or <span class=Code><span style='font-family:Courier'>MovieClip.createEmptyMovieClip</span></span>).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also the example file <ahref="../fla/mcduplicatemovieclip.fla">mcduplicatemovieclip.fla</a> / <ahref="../swf/mcduplicatemovieclip.swf">mcduplicatemovieclip.swf</a>.</p><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>method is difficult for beginners to get to grips with because there are somany ways it can go wrong! We have provided a number of working files to makesure this doesn’t happen to you, but the following pointers should be borne inmind when this method doesn’t seem to be working:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that each instance you create has a unique instance name.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that each instance you create has a unique depth.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that the timeline you are attaching movie clips onto actually exists, andthat the movie clip you are trying to copy is actually on that timeline.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The relative merits of <span class=Code><spanstyle='font-family:Courier'>duplicateMovieClip</span></span> and <spanclass=Code><span style='font-family:Courier'>attachMovie</span></span> areshown in the following example. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Supposing you wanted to copy a movie clip, and you wantedto start doing this at frame 65. You would place the movie clip on the stage atframe 65 of <span class=Code><span style='font-family:Courier'>_root</span></span>as shown:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=32src="../png/0586-dict8-40.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Flash will use the available bandwidth to load in yourcontent between frames 1 and 65. If the movie clip you want to duplicate hasfully <i>streamed</i> in by frame 65, therewill be no pause caused by having to download the movie clip.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=148src="../png/0586-dict8-41.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you use <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>,you generally do so because <span class=ImportantWord><span style='font-family:Helvetica'>you do not know the first frame that your script will need to copythe movie clip</span></span><i>. </i>Flashhandles this situation by checking <span class=ScreenText><spanstyle='font-family:Optima'>Export</span></span><span class=ScreenText><spanstyle='font-family:Optima'>in</span></span><span class=ScreenText><spanstyle='font-family:Optima'>First</span></span><span class=ScreenText><spanstyle='font-family:Optima'>frame</span></span>when you define the linkageidentifier (see the entry for <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.attachMovie</span></span> for more information on this).Assuming you leave this checked, the situation during download is now this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=149src="../png/0586-dict8-42.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>No streaming takes place because the movie clip is nowloaded before frame 1 of your SWF runs. This will cause a delay on frame 1until the content is <i>preloaded</i>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>So to summarize:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>allows you to stream in your movie clip, although the <spanclass=ImportantWord><span style='font-family:Helvetica'>scripts that use thismethod must be after the first time that the movie clip is seen on _root</span></span><i>.</i></p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>doesn’t allow you to use streaming. It instead forces Flash to preload themovie clip at frame 1, and this may cause a delay before frame 1 of your SWF isseen. The advantage of using <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>is that <span class=ImportantWord><span style='font-family:Helvetica'>you canassume that the movie clip is available to be attached to any timeline as soonas the _root timeline (and therefore any other timeline) starts to run</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There is a little bit of snobbery in certain Flash circlesabout using <span class=Code><span style='font-family:Courier'>duplicateMovieClip</span></span>and <span class=Code><span style='font-family:Courier'>attachMovie</span></span>(‘advanced coders prefer <span class=Code><span style='font-family:Courier'>attachmovie</span></span>and everyone else uses <span class=Code><span style='font-family:Courier'>duplicateMovieClip</span></span>’)but this is largely <span class=ImportantWord><span style='font-family:Helvetica'>basedon incorrect assumptions</span></span>:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>attachMovie</span></span> is moreusually seen in advanced SWFs that have only one frame (and create all theircontent programmatically), whereas… </p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>duplicateMovieClip</span></span>is more often seen in SWFs that have long <span class=Code><spanstyle='font-family:Courier'>_root</span></span> timelines, and may also havetweens and other non-code based constructs. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Given that one frame sites are usually designed byhard-core scripters, and tween based sites are used more often by us meremortals, it is easy to see why this misconception should arise. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>It is seen by this discussion however, that the core issueis actually subtler. <span class=ImportantWord><span style='font-family:Helvetica'>Thechoice between attachMovie and duplicateMovieClip is actually the choicebetween ‘to preload the copied clip, or to stream it in’.</span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>also has a slight advantage in some applications, in that a duplicated copywill have the movie clip properties (such as <span class=Code><spanstyle='font-family:Courier'>_x</span></span>, <span class=Code><spanstyle='font-family:Courier'>_y</span></span> and <span class=Code><spanstyle='font-family:Courier'>_alpha</span></span>) of the original, whereas anattached copy does not (since it is copied from the Library, and movie clips donot have properties until they are placed on the stage and become instances).</p>