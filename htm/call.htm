<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><span lang=EN-US> call</span></h1><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(a);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> or </span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(&quot;mylabel&quot;);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> is a frame number. You can also use a framelabel instead of a number.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thisaction is </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>compatible with Flash 4 or later</span></span><span lang=EN-US>. This action is deprecated and notrecommended if creating content for Flash 5 and above, where the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>function</span></span><span lang=EN-US> action can be used instead.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> The </span><spanclass=Code><span style='font-family:Courier'>call</span></span><span class=ImportantWord><spanstyle='font-family:Helvetica'>action</span></span><span lang=EN-US>  allowed the implementation of modularity inFlash 5, but is now superseded by </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>function</span></span><span lang=EN-US>, as introduced in Flash 5. You arenot recommended to use this action unless exporting to Flash 4.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Theargument of the call action refers to a frame. This argument can be one of thefollowing:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> A literalnumber that corresponds to the frame number you want to call:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(4)</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(45)</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> A literalstring that corresponds to the frame label you want to call:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(&quot;script&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(&quot;init&quot;);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Avariable that is either of the above:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = 45;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>y = &quot;script&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(x);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(y);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Flashwill look at the frame specified (rather than <i>jump to </i>it) as soon as itsees a call, and will begin executing the script attached to this frame. WhenFlash gets to the end of the script, it will continue execution in the originalframe script.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> There aresome subtle points in this operation that can really only be illustrated by anexample, consider the following timeline:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=433 height=66src="../png/0586_dict4_01.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Frame 1has the following script attached to it:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(&quot;script1&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>call(&quot;script2&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>trace(&quot;finished the script on frame 1!&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>stop();</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> frame 10(label &quot;script1&quot;) has the following script attached to it:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>trace(&quot;script 1 executed&quot;);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> and finally,frame 30 has the following script attached to it:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>trace(&quot;script 2 executed&quot;);</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thefollowing will happen:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1 style='text-indent:-56.75pt;'><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> On seeing the first </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>call()</span></span><span lang=EN-US>  on frame 1, Flash will execute the script on frame 10. It isimportant to note that </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica'>Flash does not go to the frame and display thegraphics (if any) on this frame</span></span><span lang=EN-US>. Rather, thetimeline play-head stays at frame 1, and only the <i>scripts </i>attached toframe 10 are run. The effect is as if the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>call()</span></span><span lang=EN-US> action on frame 1 was removed and the script on frame 10 replaced it.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> When the script at frame 10 iscompleted (i.e. Flash has got to the end of the script at frame 10), the second</span><span class=Code><span lang=EN-US style='font-family:Courier'>call()</span></span><span lang=EN-US>  on frame 1 is executed. The same process will occur, causing thescript on frame 20 to be executed as if it occupied the same place on frame 1as the </span><span class=Code><span lang=EN-US style='font-family:Courier'>call()</span></span><span lang=EN-US>  action that invoked it.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In thisway, the call action allows you to segment the code required on frame 1 intoseparate modules. The output for this example would be as shown below:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=331 height=142src="../png/0586_dict4_02.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Easy!There are a number of hidden pitfalls however:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> You must make sure that <i>normaltimeline execution never reaches the 'script' frames 10 and 20. </i>Forexample, consider what would happen if you omitted the </span><span class=Code><b><span lang=EN-US style='font-family:Courier'>stop()</span></b></span><span lang=EN-US>  at the end of the frame 1 script. The stuff we want to happen wouldwork as planned, but then the timeline would move on, passing frames 20 and 30,and this would cause our called scripts to execute again:<br><br>  <img width=391 height=146src="../png/0586_dict4_03.png"><br></span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> As you will recall we mentionedearlier, the called script will only return when it has finished. We shouldreally have said </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica'>if</span></span><i><span lang=EN-US>  it isfinished…<br><br></span></i><span lang=EN-US> For example, suppose we changed the script on frame20 to:<br><br></span><span class=Code><span lang=EN-US style='font-family:Courier'>trace(&quot;script1 executed&quot;);<br>gotoAndPlay(12);<br>trace(&quot;script 1 finished&quot;);<br><br></span></span><span lang=EN-US> The script will jump to frame 12 <i>before ithas finished so</i> the called script effectively </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>neverfinishes</span></span><span lang=EN-US>. The call will </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>never</span></span><span lang=EN-US>  return to frame 1 as it should!</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Finally, a </span><span class=Code><spanlang=EN-US style='font-family:Courier'>call()</span></span><span lang=EN-US> that is made to a non existent frame will not raise an error, but will failsilently (i.e. no script is run, but no error is raised to tell you this. Thisfeature makes developing using call structures difficult to debug.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Althoughyou can make things a little more elegant by using local variables in thecalled scripts (you would declare your local variables with </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>var</span></span><span lang=EN-US>  in aprogram block), it can be seen that the call action is a much-cut down versionof the </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>function</span></span><span lang=EN-US>.</span></p><h3><span lang=EN-US> Examples and practicaluses</span></h3><p class=MsoBodyText><span lang=EN-US> The callaction allowed the implementation of basic modularity in Flash 4 (code could besplit between frames, but is now superseded by functions, as introduced inFlash 5. You are not recommended to use this action unless creating content forthe Flash 4 player.</span></p><h3><span lang=EN-US> Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-US> As notedabove, this action is now both deprecated and effectively obsolete for anythingother than backwards compatibility. You should avoid its use in all othersituations.</span></p>