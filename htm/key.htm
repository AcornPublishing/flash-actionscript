<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc15883765">Key</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>newKey()</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText>Compatible with <span class=ImportantWord><spanstyle='font-family:Helvetica'>Flash Player 6 and later.</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span lang=EN-US> The </span></span><spanclass=Code><span style='font-family:Courier'>Key</span></span><span class=Code><span lang=EN-US>  object is used to provide properties with specifickeyboard key values, as well as methods to determine key codes of pressed keyson the keyboard.</span></span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>Key</span></span><span class=ImportantWord><span style='font-family:Helvetica'>object</span></span>contains several methods, properties, and event handler for working withkeyboard keys and their values.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There are several methods contained in the <spanclass=Code><span style='font-family:Courier'>Key</span></span> object (allcovered in their own reference later). These methods and their purposes are:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.getASCII</span></span><span lang=EN-US>  – returns the ASCII valueof the last key that changed state (i.e. was either pressed or released). If nokey has been pressed, it will return zero.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.getCode</span></span><span lang=EN-US>  – returns the key code ofthe last key pressed, which in most cases gives the same value as the </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>getASCII</span></span><span lang=EN-US>  method.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.isDown</span></span><span lang=EN-US>  – returns </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>true</span></span><span lang=EN-US>  if a specified key is pressed or continues to be pressed.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.isToggled</span></span><span lang=EN-US>  – returns </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>true</span></span><span lang=EN-US>  if the </span><span class=Keyboard><span lang=EN-USstyle='font-family:"New York"'>Num Lock</span></span><span lang=EN-US>  or </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Caps Lock</span></span><span lang=EN-US>  key is on.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There are many properties in the <span class=Code><spanstyle='font-family:Courier'>Key</span></span> object (which are also examinedin their own reference sections), which you can use instead of the lessprogrammer friendly raw ASCII values:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.BACKSPACE</span></span><span lang=EN-US>  – the&quot;backspace&quot; key (ASCII 9)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.CAPSLOCK</span></span><span lang=EN-US>  – the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Caps Lock</span></span><span lang=EN-US>  key (ASCII 20)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.CONTROL</span></span><span lang=EN-US>  – the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>CTRL</span></span><span lang=EN-US>  key (ASCII 27)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.DELETEKEY</span></span><span lang=EN-US>  –- the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Delete</span></span><span lang=EN-US>  key (ASCII 46)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.DOWN</span></span><span lang=EN-US>  – the &quot;down arrow&quot;(ASCII 40)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.END</span></span><span lang=EN-US>  – the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>End</span></span><span lang=EN-US>  key (ASCII 35)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.ENTER</span></span><span lang=EN-US>  – The </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Enter</span></span><span lang=EN-US>  or &quot;return&quot; key (ASCII 13)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.HOME</span></span><span lang=EN-US>  – the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Home</span></span><span lang=EN-US>  key (ASCII 36)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.INSERT</span></span><span lang=EN-US>  – The </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Insert</span></span><span lang=EN-US>  key (ASCII 45)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.LEFT</span></span><span lang=EN-US>  – the &quot;left arrow&quot;(ASCII 37)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.PGDN</span></span><span lang=EN-US>  – the </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Page Down</span></span><span lang=EN-US>  or </span><span class=Keyboard><span lang=EN-US style='font-family:"New York"'>PgDn</span></span><span lang=EN-US>  key (ASCII 34)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.PGUP</span></span><span lang=EN-US>  – The </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Page Up</span></span><span lang=EN-US>  or </span><span class=Keyboard><span lang=EN-US style='font-family:"New York"'>PgUp</span></span><span lang=EN-US>  key (ASCII 33)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.RIGHT</span></span><span lang=EN-US>  – the &quot;right arrow&quot;(ASCII 39)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.SHIFT</span></span><span lang=EN-US>  – The </span><spanclass=Keyboard><span lang=EN-US style='font-family:"New York"'>Shift</span></span><span lang=EN-US>  key (ASCII 16)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.SPACE</span></span><span lang=EN-US>  – the &quot;space bar&quot;(ASCII 32)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.TAB</span></span><span lang=EN-US>  – the &quot;tab&quot; key(ASCII 9)</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.UP</span></span><span lang=EN-US>  – the &quot;up arrow&quot;(ASCII 38)</span></p><h3>Examples and practical uses</h3><p class=MsoBodyText>You do not need to use a constructor to access the <spanclass=Keyboard><span style='font-family:"New York"'>Key</span></span> methodsand properties. You can call them directly using the usual dot method:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Key.isDown(Key.SPACE)){</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;You are pressing thespacebar.&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This shows the use of both a method and a property of the <spanclass=Code><span style='font-family:Courier'>Key</span></span> object.</p><h3>Tips and precautions</h3><p class=MsoBodyText>Keyboard codes are mapped using the ASCII character set.Non-QWERTY keyboards still map to the ASCII character set although someaccented and non-Germanic symbols are constructed of combinations of ASCIIkeys.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You can use the <span class=Code><span style='font-family:Courier'>Key</span></span> methods and properties to verify keyboard entriesprior to continuing processing in a script. For example, you can use code likethis:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>Keypress=Key.getASCII();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Keypress != Key.RIGHT) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    Trace(&quot;That is not the right arrowkey!&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In many cases, a set of nested if statements will be usedto check depressed keys. For example, if coding a game you might have a routinelike this to detect specific key presses and then go to a specific movie frameand play from there:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Key.isDown(Key.RIGHT)) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   gotoAndPlay(&quot;Right&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Key.isDown(Key.LEFT)) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   gotoAndPlay(&quot;LEFT&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Key.isDown(Key.SPACE)) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   gotoAndPlay(&quot;Cloaking&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(Key.isDown(Key.TAB)) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   gotoAndPlay(&quot;Hyperjump&quot;)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You should note that this code has to be run for everyframe that you want to continue checking for key-presses. If this code werecontrolling the player's spaceship in a video game, the easiest thing would beto incorporate it into the spaceship movie clip’s <span class=Code><spanstyle='font-family:Courier'>onEnterFrame</span></span> script.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You can simply echo back pressed characters as a string(into a form, for example), like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>Keypress=Key.getASCII();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>Towrite=chr(Keypress);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Here, whatever the user presses is detected by the <spanclass=Code><span style='font-family:Courier'>getASCII()</span></span> method.Then, the <span class=Code><span style='font-family:Courier'>chr()</span></span>function returns the string of that ASCII value which can be used elsewhere inthe code.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Many of the <span class=Code><span style='font-family:Courier'>Key</span></span> objects methods and properties are duplicated tosome extent with a key press event, usually assigned to a button. In practice,you should never use the <span class=Code><span style='font-family:Courier'>Button</span></span>object to detect key-presses because the button has to have both browser focus <i>and</i>input focus, two occurrences that are both very rare and difficult tomaintain. See also the entries for <span class=ImportantWord><spanstyle='font-family:Helvetica'>Button.onKeyUp</span></span> and <spanclass=ImportantWord><span style='font-family:Helvetica'>Button.onKeyDown</span></span>.Although either can be used in most cases, the <span class=Code><spanstyle='font-family:Courier'>Key</span></span> object has more flexibility thanan event assigned to a button. Also, by using ASCII codes, you can check forconditions that are not supported by the key press event (such as the <spanclass=Keyboard><span style='font-family:"New York"'>Escape</span></span> key).Having said that, the key press events are often a little easier to code thanusing the <span class=Code><span style='font-family:Courier'>Key</span></span>object for the same purpose.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There are a number of things to watch out for when usingthe methods of the Key object:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Some methods use the operating systemskeyboard repeat rate, and this is usually set to repeat after a short pause.You therefore need to use methods such as </span><span class=Code><spanlang=EN-US style='font-family:Courier'>key.isDown</span></span><span lang=EN-US>  that bypass the repeat rate (and keyboard buffer for slowercomputers!) and return the state of the keyboard <i>now </i>if you arecontrolling real time movement (such as in a video game or drawingapplication).</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Some methods respond to a key beingpressed down or released, but don’t tell you which key is involved. This isrelevant for the </span><span class=Code><span lang=EN-US style='font-family:Courier'>onKeyDown</span></span><span lang=EN-US> /</span><span class=Code><spanlang=EN-US style='font-family:Courier'>onKeyUp</span></span><span lang=EN-US> events.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The </span><span class=Code><spanlang=EN-US style='font-family:Courier'>Key.getASCII</span></span><span lang=EN-US>  and </span><span class=Code><span lang=EN-US style='font-family:Courier'>Key.getCode</span></span><span lang=EN-US>  tell you the last key thatchanged, but not <i>when this occurred. </i>For example, if the last keypressed was the space bar, and this occurred an hour ago, both these methodswill tell you the space bar was pressed. Not very useful if you want to createresponsive real time interactive animation via key presses!</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In general, you almost always have to use more than onemethod of the <span class=Code><span style='font-family:Courier'>Key</span></span>object together to create an efficient key detection routine. Typicalapplications are:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Using the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>onKeyDown</span></span><span lang=EN-US> event to detect a key press for a &quot;click any key to continue&quot; dialog.This will not tell you exactly which key was pressed.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Using </span><span class=Code><spanlang=EN-US style='font-family:Courier'>Key.getASCII</span></span><span lang=EN-US>  or </span><span class=Code><span lang=EN-US style='font-family:Courier'>key.getCode</span></span><span lang=EN-US>  within an </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>onKeyDown</span></span><span lang=EN-US> /</span><span class=Code><span lang=EN-US style='font-family:Courier'>onKeyUp</span></span><span lang=EN-US>  event handler to ascertain exactly which key is down (although thisroute cannot tell you which key is down/up if the user presses more than onekey together).</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Using </span><span class=Code><spanlang=EN-US style='font-family:Courier'>Key.isDown</span></span><span lang=EN-US>  and </span><span class=Code><span lang=EN-US style='font-family:Courier'>Key</span></span><span lang=EN-US>  code values (or the constantvalues, such as </span><span class=Code><span lang=EN-US style='font-family:Courier'>key.BACKSPACE</span></span><span lang=EN-US>, etc) to check the stateof specific keys. This method is the best implementation when you want to buildresponsive key detection (it gives the state of the key <i>now </i>rather thangoing via a keyboard buffer or through keyboard &quot;typomatic repeat&quot;filtering), but you have to make your check every frame. It is the method youhave to use if you want to build Flash video games or other performance motiongraphics.</span></p>