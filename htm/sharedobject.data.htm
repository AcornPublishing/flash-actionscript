<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>SharedObject.data</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySO.data.username= “foobar”; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where an attribute, <span class=Code><spanstyle='font-family:Courier'>username, </span></span>of the <span class=Code><spanstyle='font-family:Courier'>data </span></span>property from the shared objectreferenced by <span class=Code><span style='font-family:Courier'>mySO </span></span>will be created with a string value of <span class=Code><span style='font-family:Courier'>foobar. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The property is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 6 and above. </span></span>There are <span class=ImportantWord><span style='font-family:Helvetica'>noknown issues </span></span>with any version of Flash that supports this object.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>data </span></span>property of the <span class=Code><span style='font-family:Courier'>SharedObject </span></span>object is used to hold all the information that is to be saved to the disk. Theattributes of this property will be written to a local file when the <spanclass=Code><span style='font-family:Courier'>SharedObject.flush </span></span>method is executed or the Flash movie is ended. Shared objects can store any ofthe following data types: <span class=Code><span style='font-family:Courier'>Array, </span></span><span class=Code><span style='font-family:Courier'>Boolean, </span></span><spanclass=Code><span style='font-family:Courier'>Date, </span></span><spanclass=Code><span style='font-family:Courier'>Object, </span></span><spanclass=Code><span style='font-family:Courier'>Number, </span></span><spanclass=Code><span style='font-family:Courier'>String </span></span>and <spanclass=Code><span style='font-family:Courier'>XML </span></span>object. See also<span class=ImportantWord><span style='font-family:Helvetica'>SharedObject.flush </span></span>and <span class=ImportantWord><span style='font-family:Helvetica'>SharedObject.getSize. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>data </span></span>property is an object itself, an object of the type <span class=Code><spanstyle='font-family:Courier'>Object </span></span>object of the <spanclass=Code><span style='font-family:Courier'>SharedObject </span></span>object.Hence the dot notation used to access its attributes. The data type of the <spanclass=Code><span style='font-family:Courier'>data </span></span>property cannotbe changed and will remain an object. All attempts to modify its data type willbe ignored.</p><h3>Description</h3><p class=MsoBodyText>This property holds all the information that will bewritten to a local file when the <span class=Code><span style='font-family:Courier'>SharedObject.flush </span></span>method is executed.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=195 valign=top style='width:146.05pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=189 valign=top style='width:141.6pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Additional explanation </span></span></p>  </td>  <td width=188 valign=top style='width:140.95pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=195 valign=top style='width:146.05pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> <span class=Code><span style='font-family:Courier'>mySO.data.username = “foobar”; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=189 valign=top style='width:141.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> Using a <span class=Code><span style='font-family:Courier'>String </span></span> data type.</p>  </td>  <td width=188 valign=top style='width:140.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=195 valign=top style='width:146.05pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> <span class=Code><span style='font-family:Courier'>mySO.data.allowAccess = true; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=189 valign=top style='width:141.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> Using a <span class=Code><span style='font-family:Courier'>Boolean </span></span> data type.</p>  </td>  <td width=188 valign=top style='width:140.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=195 valign=top style='width:146.05pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> <span class=Code><span style='font-family:Courier'>mySO.data.count = 1; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=189 valign=top style='width:141.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> Using a <span class=Code><span style='font-family:Courier'>Number </span></span> data type.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=195 valign=top style='width:146.05pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>mySO.data.information = new Array({name: &quot;John&quot;, age:45}, {name: &quot;Dan&quot;, age:43}, {name: &quot;Joe&quot;, age: 14}); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=189 valign=top style='width:141.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Returns the <span class=Code><span  style='font-family:Courier'>information </span></span>property containing an array with three keys. Each key is an object containing two properties, <span  class=Code><span style='font-family:Courier'>name </span></span>and <span  class=Code><span style='font-family:Courier'>age. </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>An example of using one attribute of the <span class=Code><span style='font-family:Courier'>data </span></span> property to store both <span class=Code><span style='font-family:Courier'>Array </span></span> data types and <span class=Code><span style='font-family:Courier'>Object </span></span> data types.</p>  </td> </tr> <tr> <td width=195 valign=top style='width:146.05pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>mySO.data = “String data type”; </span></span></p>  </td>  <td width=189 valign=top style='width:141.6pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Returns nothing.</p>  </td>  <td width=188 valign=top style='width:140.95pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The <span class=Code><span  style='font-family:Courier'>data </span></span>property has a data type of <span  class=Code><span style='font-family:Courier'>Object </span></span>object. This cannot be changed, all attempts to alter this, such as this example, are ignored.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><h4>General</h4><p class=MsoBodyText>The shared object is perfect for use as a simple hitcounter and remembering simple user details such as a name and theirpreferences. The following code is the basics of a simple hit counter:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>SO =SharedObject.getLocal(&quot;foo&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(SO.data.count != undefined) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> SO.data.count++; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} else{ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> SO.data.count = 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>SO.flush(); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the example <ahref="../fla/sharedobjectflush.fla">sharedobjectflush.fla</a>/ <a href="../swf/sharedobjectflush.swf">sharedobjectflush.swf</a>for an example of a hit counter – as well as a members area of a web pagerequiring username and password access.</p><h3>Tips and precautions</h3><h4>Removing attributes</h4><p class=MsoBodyText>From time to time, you may create some attributes of thedata property that you don’t need any longer. These can and should be removedto conserve the amount of disk space that your shared object requires. To dothis use the delete operator and reference the unwanted attributes to removethem from the shared object the next time the <span class=Code><spanstyle='font-family:Courier'>flush </span></span>method is executed. Use thefollowing code:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySO =SharedObject.getLocal(“foo”); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySO.data.count++; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// Doesthe user want to reset the counter? </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(resetCounter == true) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    delete mySO.data.count; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><h4><span class=Code><span style='font-size:9.5pt;'>Removing a sharedobject </span></span></h4><p class=MsoBodyText><span class=Code>Besides removing just one attribute of a sharedobject, you may want to remove the entire shared object. The following codewill destroy every attribute of the </span><span class=Code><spanstyle='font-family:Courier'>data </span></span><span class=Code>property andthen flush the shared object. As soon as you have run this code, the SOL filethat the shared objects data was saved to will be removed.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(var i in mySO.data) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> delete mySO.data[i]; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySO.flush(); </span></span></p><h4><span class=Code><span style='font-size:9.5pt;'>Session attributes </span></span></h4><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>data </span></span><span class=Code>property isused to store information that will be saved to disk when the </span><spanclass=Code><span style='font-family:Courier'>flush </span></span><spanclass=Code>method is executed. However, if you want to create some “private” attributes or“session” attributes, you can do so by storing them directly to the sharedobject. You may need to have certain variables exist and be accessed andmodified for your application/web site to function. The </span><spanclass=Code><span style='font-family:Courier'>SharedObject </span></span><spanclass=Code>object is a convenient place to store these session attributes (or variables)as they won’t clutter up the global namespace, and the </span><spanclass=Code><span style='font-family:Courier'>SharedObjec </span></span><spanclass=Code>tobject is timeline independent (it exists in the global namespace), so youdon’t have to worry about target paths. All session attributes you create willnot be saved to the client’s disk when the </span><span class=Code><spanstyle='font-family:Courier'>SharedObject.flush </span></span><span class=Code>method isexecuted or when the Flash movie ends. They will however, continue to existafter the </span><span class=Code><span style='font-family:Courier'>SharedObject.flush </span></span><spanclass=Code>method is executed but will cease to exist when the Flash movie ends. Run thefollowing code in a Flash movie to test a session attribute:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>SO =SharedObject.getLocal(&quot;foo&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//Comment these lines out the second time you run the code </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>SO.username= &quot;foobar&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>SO.data.username= &quot;foobarfoo&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(SO.username); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(SO.data.username); </span></span></p><p class=MsoBodyText style='margin-left:0in'>&nbsp;</p><p class=MsoBodyText>Run this code once, and then comment the lines that defineboth the persistent and the session <span class=Code><span style='font-family:Courier'>username </span></span>attributes. When you run it for the secondtime, you’ll notice an <span class=Code><span style='font-family:Courier'>undefined </span></span>value appear in the Output window for the session attribute <span class=Code><spanstyle='font-family:Courier'>username </span></span>because it wasn’t redefinedthe second time around.</p>