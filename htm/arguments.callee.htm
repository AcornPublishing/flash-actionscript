<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>arguments.callee</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>arguments.callee(); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where the <span class=Code><span style='font-family:Courier'>callee </span></span>property is a reference to thecurrently running function.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This property of the <span class=Code><spanstyle='font-family:Courier'>arguments </span></span>object is <spanclass=ImportantWord><span style='font-family:Helvetica'>compatible with Flash 5or later. </span></span>It will only exist within the scope of the currentlyrunning function, and will cease to exist as soon as program execution returnsto the code that called the function.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>arguments.callee() </span></span>property provides a reference to the current running function. You would referto this property if you did not know the name of the currently running functionand you wanted it to call itself recursively. The only time you would not knowthe name of the currently running function would be if it were definedanonymously, for example, of the form:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myFunction= function() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> //function code goes here </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText>Or if you define an event handler as an anonymous function(which is a very common programming structure in Flash MX):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myClip.onSomeEvent= function() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> //event code goes here </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To make the function call itself, you would use code asshown in the examples below.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=312 valign=top style='width:234.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.onMouseDown = function() { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     var diagnostic = _root.count; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     _root.count++; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     if (_root.count&lt;20) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>           arguments.callee(); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     } </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     message = &quot;I am function call number &quot; + diagnostic; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     trace(message) </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>count = 0; </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>When using anonymous functions to define event handlers, the <span class=Code><span style='font-family:Courier'>arguments.callee </span></span> property is a way of running the event handler more than once in response to the event. In this example, the <span class=ImportantWord><span  style='font-family:Helvetica'>onMouseDown </span></span>event handler will run 20 times for each press of the mouse.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>factorial = function (x) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  if (x &lt;= 1) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>    return 1; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  } else { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>    return x * arguments.callee(x-1); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  } </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>}; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>trace(factorial(300)) </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Although the standard ‘factorial of a number’ algorithm is usually wheeled out as a good example of both recursion and <span  class=Code><span style='font-family:Courier'>arguments.callee, </span></span> it is actually questionable as a real life programming solution, and this example shows why. Running this code will raise an error because only 256 levels of function call are allowed, so recursive routines are a poor general solution unless you know that the number of iterations will be small. </p>  <p class=MsoBodyText> </p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>function myFunction() { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      trace(arguments.callee); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myfunction(); </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>This code will not trace the name of the current function (<span class=Code><span style='font-family:Courier'>myfunction </span></span>) to the output window, because the <span class=Code><span style='font-family:  Courier'>arguments.callee </span></span>property is a <i>reference </i>and not a printable string. If you want to know the order of execution of functions, you should use the debugger with breakpoints set up in your code.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>There are very few practical uses of <span class=Code><spanstyle='font-family:Courier'>arguments.callee </span></span>in motion graphicsbecause recursive routines are generally slower than non recursive solutions,and very quickly use up resources because they use nested levels. In mostcases, code that uses loops is much faster. </p><h3>Tips and precautions</h3><p class=MsoBodyText>If you need to recursively call an anonymous function,rather than use <span class=Code><span style='font-family:Courier'>arguments.callee, </span></span>it may be easier to simply change your code so that the function name is known.This may make your code easier to debug. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The anonymous function shown below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>factorial= function (x) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  if (x&lt;=1) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     return 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  } else { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     return x*arguments.callee(x-1); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(factorial(10)); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… can be rewritten as:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionfactorial(x) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  if (x&lt;=1) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    return 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  } else { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    return x * factorial(x-1); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(factorial(10)); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This code does not need to use <span class=Code><spanstyle='font-family:Courier'>arguments.callee </span></span>at all.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Recursive routines are generally processor and memoryintensive. Although recursion is a nice technique in theory, it is next touseless in real life because of the limit to the number of function levels thatcan exist (256). You should instead consider using loops as shown below.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionfactorial(x) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> if (x&lt;=1) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     return 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> } else { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     y = 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     for (i=x; i&gt;1; i--) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        y = (y*i); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>         return y; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(factorial(10)); </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText>Unlikethe recursion based version of the factorial function, this version cancalculate factorials up to the maximum allowable number range of Flash, and cando it faster. Because <span class=Code><span style='font-family:Courier'>arguments.callee </span></span>is associated with recursivetechniques, its use in the real world is similar to recursion; a nicetheoretical idea let down by practical reality.</p>