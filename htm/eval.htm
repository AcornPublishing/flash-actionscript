<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>eval </h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a =eval(b); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b </span></span>is an expression that evaluates to avariable name, and <span class=Code><span style='font-family:Courier'>a </span></span>will be equated to the <spanclass=ImportantWord><span style='font-family:Helvetica'>value </span></span>ofthis variable.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This global function is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 4 and later. </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Although it is notdeprecated in Flash 5 (and later), you will never have to use it in any otherversion of Flash other than Flash 4, given that there are better ways ofachieving the same functionality in later versions of Flash. </span></span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>eval </span></span>global function allows you to simulate the ability to access dynamic variablenames and target paths. For example, if you want to access the variable <spanclass=Code><span style='font-family:Courier'>a </span></span>and assign it to <span class=Code><spanstyle='font-family:Courier'>b </span></span>you write:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = a; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>Suppose instead that you wanted to assign <spanclass=Code><span style='font-family:Courier'>b </span></span>to a variablewhose identity you will only know at runtime. You can’t do this in Flash 4,because variable names are literal references. The <span class=Code><spanstyle='font-family:Courier'>eval </span></span>function allows you to getaround this constraint by taking an expression as its argument so that it evaluatesas a variable name.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>So now you can make your name dynamic:</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b =eval( </span></span><span class=Code-NEW><span style='font-family:"Optima Bold";border:none'><span style='border:none'>“ </span></span></span><span class=Code><spanstyle='font-family:Courier'>my </span></span><span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>” </span></span></span><spanclass=Code><span style='font-family:Courier'>+ </span></span><spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>” </span></span></span><span class=Code><spanstyle='font-family:Courier'>Variable </span></span><span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>” </span></span></span><spanclass=Code><span style='font-family:Courier'>); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>… will equate <span class=Code><span style='font-family:Courier'>b </span></span>to the variable <span class=Code><spanstyle='font-family:Courier'>myVariable. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note that this will equate <span class=Code><spanstyle='font-family:Courier'>b </span></span>to the value of <span class=Code><spanstyle='font-family:Courier'>myVariable </span></span>rather than the stringliteral <span class=Code-NEW><span style='font-family:"Optima Bold";border:none'><span style='border:none'>“ </span></span></span><span class=Code><spanstyle='font-family:Courier'>myVariable </span></span><span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>”</span>. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In Flash 5 and later versions, you can use dot notation todo the same thing, and so therefore do not need to use <span class=Code><spanstyle='font-family:Courier'>eval </span></span>:</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b =_root[ </span></span><span class=Code-NEW><span style='font-family:"Optima Bold";border:none'><span style='border:none'>“ </span></span></span><span class=Code><spanstyle='font-family:Courier'>my </span></span><span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>” </span></span></span><spanclass=Code><span style='font-family:Courier'>+ </span></span><spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>“ </span></span></span><span class=Code><spanstyle='font-family:Courier'>Variable </span></span><span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>” </span></span></span><spanclass=Code><span style='font-family:Courier'>]; </span></span></p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=360 valign=top style='width:270.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=180 valign=top style='width:135.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=360 valign=top style='width:270.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 5; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x = eval(&quot;myVariable&quot;+i); </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=180 valign=top style='width:135.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Variable <span class=Code><span style='font-family:Courier'>x </span></span>is equated to the value of variable <span  class=Code><span style='font-family:Courier'>myVariable5. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=360 valign=top style='width:270.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for (i=0; i&lt;10; i++) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    tellTarget (eval(&quot;myClip&quot;+i)) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        gotoAndStop(2); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for (i=0; i&lt;10; i++) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    _root[&quot;myClip&quot;+i].gotoAndStop(2); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=180 valign=top style='width:135.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The first script will make the ten movie clips <span  class=Code><span style='font-family:Courier'>myClip0 </span></span>to <span class=Code><span  style='font-family:Courier'>myClip9 </span></span>go to frame 2 on their respective timelines. This script is written in a Flash 4 style. </p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The shorter second script will do the same thing, but is written in a much more up to date style (that doesn’t need <span class=Code><span  style='font-family:Courier'>eval </span></span>).</p>  <p class=MsoBodyText> </p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>eval </span></span>global function is widely used in Flash 4 to emulate arrays. Supposing wewanted to set up an array <span class=Code><span style='font-family:Courier'>x[0] </span></span>to <span class=Code><span style='font-family:Courier'>x[3]. </span></span>Wecan do this in Flash 5 (and later versions) with ease, because arrays aresupported. The following Flash 5/MX code will define values for our array andshow these values in the Output window:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x = [2,45, 12, 23.5]; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(i=0; i&lt;4; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(x[i]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>This code will give the following output:</p><p class=MsoBodyText><span class=Code><span style='font-size:8.0pt;'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img width=143 height=134src="../png/0586-dict5-06.png"> </span></span></p><p class=Picturereference><span class=Code></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>Because Flash 4 doesn’t support arrays, a workaround wasinstead used, and this involved using <span class=Code><span style='font-family:Courier'>eval, </span></span>as shown by the following script (which will dothe same thing as the script above):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x0 = 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x1 =45; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x2 =12; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x3 =23.5; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(i=0; i&lt;4; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(eval(&quot;x&quot;+i)); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In Flash 5 and MX you <i>never</i>need to use <span class=Code><span style='font-family:Courier'>eval, </span></span>because dot notation allows you to assign variable names and target paths thatcontain dynamic portions. An example of how you would write the Flash 4 versionin Flash 5 and above (without using arrays) is shown below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x0 = 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x1 =45; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x2 =12; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x3 =23.5; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(i=0; i&lt;4; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(_root[&quot;x&quot;+i]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>See also the entry for.<span class=ImportantWord><spanstyle='font-family:Helvetica'> (dot operator). </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Foranything other than legacy Flash 4 content, there is no need to consider eval. </span></span>The only real time you ever need to know about it for practical work nowadaysis when you are converting Flash 4 code up to more recent standards (during forexample a site update/re-write).</p><h3>Tips and precautions</h3><p class=MsoBodyText>The Flash implementation of <span class=Code><spanstyle='font-family:Courier'>eval </span></span>is <i>not </i>the same as the JavaScript version. The JavaScript versionallows you to evaluate statements as well as variable names. To implement the samefunctionality in Flash would require the Flash player to contain a fullActionScript interpreter – something that would require the Flash player to bemuch larger than it currently is. Small file size is one of the high leveldesign requirements of the Flash player, and it is unlikely that a fullJavaScript implementation of <span class=Code><span style='font-family:Courier'>eval </span></span>will ever occur in ActionScript. </p>