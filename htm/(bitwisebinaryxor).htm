<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12169700"><span lang=EN-US> ^Bitwise (binary) XOR (exclusive OR)</span></a></h1><p class=MsoBodyText><span lang=EN-US> a = b ^c;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>b</span></span><span lang=EN-US>  and </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  are numbers that will be convertedto unsigned 32 bit numbers and XORed together to form a new unsigned 32 bitnumber, which will be returned as </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>a</span></span><span lang=EN-US>. If b or c evaluate as anythingelse, the result will be 0 because b or c will be undefined (and taken to be0).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Compatiblewith </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Flash 5 and above</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> See alsosection 2.5.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> This </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>operator</span></span><span lang=EN-US> performs per bit (or &quot;bitwise&quot;)XORing of two numbers. The arguments are assumed to be unsigned 32 bit numbers,and the returned value will be the same.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thefollowing table shows how the </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>^</span></span><span lang=EN-US>  operator works;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c = a ^ b</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>a     b          c</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>0   0     0</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>0   1     1</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>1   0     1</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>1   1     0</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  is </span><span class=Code><span lang=EN-US style='font-family:Courier;'>1</span></span><span lang=EN-US>  if </span><span class=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>  or </span><span class=Code><span lang=EN-US style='font-family:Courier;'>b</span></span><span lang=EN-US>  is also </span><span class=Code><span lang=EN-US style='font-family:Courier;'>1</span></span><span lang=EN-US>, but not both. This binary table (sometimescalled a <i>truth table </i>in Boolean math)can be applied to every bit position of two 32 bit values expressed as binary.For example;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c = 345 + 678</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>345 =     00000000 0000 0000 0000 0001 0101 1001</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>456 =     00000000 0000 0000 0000 0001 1100 1000</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>          00000000 0000 0000 0000 0000 1001 0001 = 145</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Writingbinary can be a long and error prone exercise, and is more usually expressed inhexadecimal. A 32 bit unsigned number can express all integers between 0 and4294967295 (0xFFFFFFFF). </span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> XOR wasuseful in early computer graphics draw routines because:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x ^ anything ^ x = x</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Put another way, if you have a blankpixel on a screen, you can set it to white by XORing it with 1. You can then <i>undraw </i>it by doing the same thing;XORing it with 1. Early computers were memory limited, and a XOR based drawengine was both fast (because it operated on a per bit level) and memoryefficient (because the draw routine was the same as the undraw routine). </span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> XOR ismuch less useful with the Flash player, because Flash does not operate in thesame way as early computers did (Flash uses a high level vector based drawengine that doesn’t allow per bit operations direct to screen). XOR thereforehas very few (if any) practical motion graphics applications in Flash.</span></p>