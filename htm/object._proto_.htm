<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><span lang=EN-GB>Object._proto_</span></h1><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject._proto_ </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Where </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>myObject </span></span><span lang=EN-GB>is an </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Object </span></span><spanlang=EN-GB>instance</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB>&nbsp; </span></span></p><p class=MsoBodyText><span class=ImportantWord><span lang=EN-GBstyle='font-weight:normal'>This property is </span></span><span class=ImportantWord><spanlang=EN-GB style='font-family:Helvetica'>compatible with Flash 5 and later.</span></span><spanclass=ImportantWord><span lang=EN-GB style='font-weight:normal'> </span></span></p><h3><span lang=EN-GB>Description</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><span class=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>property </span></span><span lang=EN-GB>is a reference to theprototype property in the object’s constructor function. A prototype is presentfor each class in Flash. It can be empty, or contain methods and properties.Whenever an object’s method or properties is requested by some ActionScriptcode, Flash checks the defined methods and properties, and if it can’t findthem, then checks the prototype of the class that the object was created from.This is the process of inheritance, as the class prototype methods andproperties are available to the objects of that class.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The same applies when subclasses arecreated from classes. Each subclass inherits the parent’s prototype propertiesand methods. Each subclass can have additional properties and methods in theirprototype. Anything created from those subclasses will inherit the parent’sprototype properties and methods, as well as the parent’s parent’s propertiesand methods (unless they have been overridden by the parent).</span></p><h3><span lang=EN-GB>Examples and practical uses</span></h3><p class=MsoBodyText><span lang=EN-GB> Let’s put the theory described in the Description section intopractice. We can create a class called </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>MotorVehicles.</span></span><spanlang=EN-GB> The </span><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles </span></span><span lang=EN-GB>class has two propertiesdefined:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//Create the MotorVehicles class </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>functionMotorVehicles (numWheels, numDoors) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//Create properties for the MotorVehicles class. </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//Assign them to the prototype so all new </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//instances or objects will have these properties. </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles.prototype.numWheels= 4; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles.prototype.numDoors= 4; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Next, we create two new subclasses of the</span><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles </span></span><spanlang=EN-GB>class, one called </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>SUV </span></span><span lang=EN-GB>and the other </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles,</span></span><spanlang=EN-GB> that have the same two properties passed as arguments:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//create a new subclass called SUV from MotorVehicles </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>functionSUV (numWheels, numDoors) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.numWheels = numWheels; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.numDoors = numDoors; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//create a new subclass called Motorcyles from MotorVehicles </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>functionMotorcyles (numWheels, numDoors) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.numWheels = numWheels; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.numDoors = numDoors; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The use of the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>this </span></span><span lang=EN-GB>keyword implies the object or class in which it is contained. So, </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>this.numWheels </span></span><spanlang=EN-GB>in the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>function is the same assaying </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles.numWheels.</span></span><spanlang=EN-GB> We could add more properties and methods to the subclasses bysimply defining them. (When we created the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>SUV </span></span><span lang=EN-GB>and </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles </span></span><spanlang=EN-GB>subclass we did not define a prototype function, although we couldhave if we desired one. This will be important in a moment.)</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The next step is to tell both </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>SUV </span></span><spanlang=EN-GB>and </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>to inherit the properties ofthe </span><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles </span></span><spanlang=EN-GB>class like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>//inherit from the MotorVehicles class </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>SUV.prototype._proto_= MotorVehicles.prototype; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles.prototype._proto_= MotorVehicles.prototype; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>ActionScript uses the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><spanlang=EN-GB>property to determine the methods and properties that are inheritedfrom the class. An easy way to think of what the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><spanlang=EN-GB>property means is to keep in mind that </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>_proto_ </span></span><span lang=EN-GB>means to inherit all the properties from the class prototype specified afterthe </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Object._proto_.</span></span><spanlang=EN-GB> For example, the line:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>SUV.prototype._proto_= MotorVehicles.prototype; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… means that the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>SUV.prototype </span></span><spanlang=EN-GB>property is to inherit all the properties from the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles.prototype.</span></span><spanlang=EN-GB> Whenever an object is created, the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><spanlang=EN-GB>property is automatically assigned. For example, if we create anobject from the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>class like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>KawiVulcan= new Motorcycles ( 2, 0 ); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… the values for the properties arepassed to the function defining the class prototype (so the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>KawiVulcan </span></span><spanlang=EN-GB>object of the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>classwould have </span><span class=Code><span lang=EN-GB style='font-family:Courier'>numWheels </span></span><spanlang=EN-GB>set to </span><span class=Code><span lang=EN-GB style='font-family:Courier'>2 </span></span><span lang=EN-GB>and </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>numDoors </span></span><span lang=EN-GB>set to </span><span class=Code><span lang=EN-GB style='font-family:Courier'>0 </span></span><spanlang=EN-GB>). Since the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>KawiVulcan </span></span><span lang=EN-GB>object isof the subclass </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles,</span></span><span lang=EN-GB> the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Motorcycles </span></span><spanlang=EN-GB>prototype function would normally be used in </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>KawiVulcan.</span></span><spanlang=EN-GB> However, </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>has noprototype function, so it is the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Motorcycles </span></span><span lang=EN-GB>’ parentclass, </span><span class=Code><span lang=EN-GB style='font-family:Courier'>MotorVehicles,</span></span><spanlang=EN-GB> that has its prototype function executed for </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>KawiVulcan.</span></span><spanlang=EN-GB> </span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>In general, the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>_proto_ </span></span><span lang=EN-GB>property is used to refer to the prototype property in the constructor of aclass, and all objects of a class have the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>_proto_ </span></span><span lang=EN-GB>property assigned automatically when it is created. You can add properties tothe </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><spanlang=EN-GB>property using the </span><span class=ImportantWord><spanlang=EN-GB style='font-family:Helvetica'>Object.AddProperty() </span></span><spanlang=EN-GB>method.</span></p><h3><span lang=EN-GB>Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Object._proto_ </span></span><spanlang=EN-GB>property is not usually used directly, although you can addproperties to it, which are then inherited by all objects from that class.Because classes can lead to subclasses, which can lead to more subclasses, thehierarchy of prototype functions can get confusing. However, the _proto_property always refers to the constructor function of the class from which theobject is created (which itself may refer to higher class prototype functions).</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>As a rule, </span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>youshouldn’t ever overwrite the _proto_ property in Flash </span></span><spanlang=EN-GB>as this may disrupt other object’s inheritance and result inunexpected behaviors!</span></p>