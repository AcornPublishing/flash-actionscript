<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc16343127">while</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(condition) {.// code here };</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>Where </span><span class=Code><spanstyle='font-family:Courier'>condition</span></span><span class=Code> is anexpression to be evaluated.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Compatible with </span><spanclass=ImportantWord><span style='font-family:Helvetica'>Flash Player 4 andlater</span></span><span class=Code>.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>while</span></span> op<span class=Code>erator is usedto provide a loop which is executed continuously while the condition evaluatesto </span><span class=Code><span style='font-family:Courier'>true</span></span><spanclass=Code>.If the condition evaluates to </span><span class=Code><spanstyle='font-family:Courier'>false</span></span><span class=Code>, the loop isexited and not used again, unless the code is re-executed. While the </span><spanclass=Code><span style='font-family:Courier'>while</span></span><spanclass=Code>loop iterates, the code within the braces is executed each time. The </span><spanclass=Code><span style='font-family:Courier'>while</span></span><spanclass=Code>loop has a looser structure than other loop operators such as </span><spanclass=Code><span style='font-family:Courier'>for</span></span><span class=Code>, and is almostidentical to the </span><span class=Code><span style='font-family:Courier'>do...while</span></span><spanclass=Code>loop, with the only difference being the syntax structure.</span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>while</span></span><span class=ImportantWord><span style='font-family:Helvetica'>operator</span></span>is a looping control structure that will loop indefinitely whilean expression evaluates to <span class=Code><span style='font-family:Courier'>true</span></span>.</p><h3>Examples and practical uses</h3><p class=MsoBodyText>The syntax for the <span class=Code><spanstyle='font-family:Courier'>while</span></span> <span class=ImportantWord><spanstyle='font-family:Helvetica'>operator</span></span> is a <span class=Code>conditionalargument followed by a code block. Upon each iteration of the loop, thecondition is re-evaluated. If the condition evaluates to </span><spanclass=Code><span style='font-family:Courier'>false</span></span><spanclass=Code>,the code block is not executed and execution continues past the end of the </span><spanclass=Code><span style='font-family:Courier'>while </span></span><spanclass=Code>operator'scode block. </span>For example:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(&quot;somethingup here&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>var1 =1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while (var1 &lt; 10 ) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // do some stuff</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   var1 += 1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(var1);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(&quot;somethingdown here&quot;);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This code will execute the statements inside the bracesnine times, until the value of <span class=Code><span style='font-family:Courier'>var1</span></span>has been incremented to <span class=Code><span style='font-family:Courier'>10</span></span>.The condition is tested each time the loop is completed until evaluating to <spanclass=Code><span style='font-family:Courier'>false</span></span>. Any number ofstatements can be inside the code block, and are only executed if the conditionis <span class=Code><span style='font-family:Courier'>true</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>while</span></span>operator is excellent for automating tasks that you need to perform on manyobjects. For example, applying the same properties on a bunch of movie clips orremoving a bunch of objects from the stage. See example <ahref="../fla/while.fla">while.fla</a> and <a href="../swf/while.swf">while.swf</a>. Using user defined properties the movie clip will create <spanclass=Code><span style='font-family:Courier'>X</span></span> number of movieclips based on settings the user provides.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>while</span></span>operator can also be used to spawn multiple functions. For example, thefollowing code loops ten times and executes four different functions, so eachfunction is four times in itself:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 0;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(i &lt; 10) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   createSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:21.8pt'><span class=Code><spanstyle='font-family:Courier'>positionSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:21.8pt'><span class=Code><spanstyle='font-family:Courier'>formatSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:21.8pt'><span class=Code><spanstyle='font-family:Courier'>applyParent(i-1);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>The code above also passes a parameter to thefunctions. This can be used for any number of things but is useful so eachfunction knows what stage the loop is in. Especially useful if each function isgoing to be modifying a different movie clip (with similar names). Take thefollowing code for example:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>createSquare= function (num) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  _root[&quot;movieName&quot;+num].attachMovie(&quot;squareClip&quot;,&quot;squareClip&quot;, 1);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>positionSquare= function (num) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   _root[&quot;movieName&quot;+num]._x =_root[&quot;movieName&quot;+num]._x/2;</span></span></p><p class=MsoBodyText style='text-indent:3.8pt'><span class=Code><spanstyle='font-family:Courier'>  _root[&quot;movieName&quot;+num]._y =_root[&quot;movieName&quot;+num]._y/2;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>formatSquare= function (num) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // code here</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>applyParent= function (num) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // code here</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 0;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(i &lt; 10 ) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   createSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:3.8pt'><span class=Code><spanstyle='font-family:Courier'>  positionSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:3.8pt'><span class=Code><spanstyle='font-family:Courier'>  formatSquare(i);</span></span></p><p class=MsoBodyText style='text-indent:3.8pt'><span class=Code><spanstyle='font-family:Courier'>  applyParent(i-1);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><h3>Tips and precautions</h3><p class=MsoBodyText>It is very easy to create infinite loops using the <spanclass=Code><span style='font-family:Courier'>while</span></span> operator. Inthe <span class=Code><span style='font-family:Courier'>for...</span></span>loop, a value is incremented for you automatically, however with the <spanclass=Code><span style='font-family:Courier'>while</span></span> loop, you needto do this yourself. Take the following code:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(i &lt; 10) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;looped &quot; + i + &quot;time(s)&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>This code will create an infinite loop, because <spanclass=Code><span style='font-family:Courier'>i</span></span> is never altered.The following code is more accurate and increments the value of <spanclass=Code><span style='font-family:Courier'>i</span></span> so the loop willonly iterate 9 times.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(i &lt; 10) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;looped &quot; + i + &quot;time(s)&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   i++;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>One thing to note, is that the equation in the bracketswill be evaluated before the first loop, so the following loop will never runas <span class=Code><span style='font-family:Courier'>i</span></span> isalready equal to 1:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>i = 1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>while(i&lt; 1) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;looped &quot; + i + &quot; time(s)&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   i++;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>