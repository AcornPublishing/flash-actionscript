<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12874594"><span lang=EN-US> Button._quality</span></a></h1><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>instanceName._quality = a;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>b = instanceName._quality;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>instanceName</span></span><span lang=EN-US> is theinstance name of a button, and </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>a</span></span><span lang=EN-US> is thequality value you want to apply to the whole FLA. </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>b</span></span><span lang=EN-US> is avariable that is equated to the current value of the FLA’s </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  setting. The </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  setting is a measure of theanti-aliasing applied by Flash.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thisglobal property is </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>compatible with Flash 6or later</span></span><span lang=EN-US>. Whenusing previous versions of Flash, buttons are not objects and do not thereforehave properties. The </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>MovieClip._quality</span></span><span lang=EN-US>, </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>Button._quality</span></span><span lang=EN-US>, and </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>TextField._quality</span></span><span lang=EN-US> properties are identical to the Flash 4 (andabove) global property, </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>_quality</span></span><span lang=EN-US>, and you are recommended to usethis form of the property if compatibility is an issue.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Therelated action </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>toggleHighQuality</span></span><span lang=EN-US> allows aneasy way to toggle smoothing. The related </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>Button._highquality</span></span><span lang=EN-US>  also allows some control, but youare advised to use </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  or </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>Button.quality</span></span><span lang=EN-US>  instead because these allow finercontrol.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> The </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>property</span></span><span lang=EN-US>  of a running SWF can be accessed asa property of the </span><span class=Code><span lang=EN-US style='font-family:Courier;'>Button</span></span><span lang=EN-US>  object, and is also available as a property ofthe </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Movie Clip</span></span><span lang=EN-US>  or </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>TextField</span></span><span lang=EN-US>  objects. In short, the </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  property is available as a propertyof <i>all the graphic objects available inFlash. </i>It is important to realize that when applied toany such object, the </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_quality</span></span><span lang=EN-US>  property is applied to everythingon the stage, including Movie Clips, Buttons, TextFields, and any othergraphics<i>.</i></span></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> Aliasingis a form of noise seen in an electronic audio signal and the math that definesit and comes from signal processing theories (particularly digital signalprocessing). Aliasing errors in graphics are the visual form of the audio noisethat makes your voice sound more mechanical than it actually is when heard on atelephone line, and this process is generally known as <i>under sampling. </i>It is caused by trying to replicate a signal withless data than is seen in the original. It is caused in graphics by trying toreproduce an image using less pixels than are needed to reproduce it adequatelyto fool the human eye. The process of reducing Aliasing error (or hiding it) iscalled <i>anti-aliasing.</i></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> TheAnti-aliasing used by Flash is based on an <i>averaging</i>algorithm. This tries to hide the fact that any image is built up of pixelsby averaging the color of adjacent pixels. This hides the pixels due toblending (or to put it another way, &quot;makes the image look like it consistsof more data than it actually does&quot;). The output becomes smoother the morepixels you use in the averaging process, but this can also reduce detail due tothe smoothing.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Flash canbe set up to use different levels of anti-aliasing:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> No anti-aliasing</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> 2x2 grid</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> 4x4 grid</span></p><h4><span lang=EN-US> No anti-aliasing</span></h4><p class=MsoBodyText><span lang=EN-US> Noanti-aliasing results in the blockiest image, but is also the one that givesmaximum clarity and the sharpest image. When using small text fonts, noanti-aliasing results in the sharpest (and therefore most readable) text. Thedownside is that you can see the individual pixels that make up the screen, andthis feature is referred to as &quot;staircasing&quot; or &quot;jaggies&quot;.</span></p><h4><span lang=EN-US> 2x2 grid</span></h4><p class=MsoBodyText><span lang=EN-US> If youuse all pixels adjacent to each target pixel, you are said to be using a 2x2anti-aliasing pixel grid;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=108 height=108src="../png/0586-dict3-23.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Eachpixel position, </span><span class=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>,isaveraged with the three neighbors as shown, starting from the top left cornerof the screen, top to bottom and left to right. Although the pixel </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> doesn’t atfirst appear to be averaged with its neighbors above and to the left of it,remember that these pixel positions will already have been averaged when takinginto account the pixel grids of other pixels to the left and above of </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><i><span lang=EN-US>.</span></i></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> Thecumulative effects of the averaging on each individual pixel </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> after allthe pixels have been aliased, will actually add up so the effect statisticallyis as if you used a 3x3 grid, with pixel </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> at thecenter (or &quot;anti-alias by one pixel in any direction from </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> &quot;). The effects ofanti-aliasing do in fact extend beyond the statistical 3x3 grid. This effectdepends on how much you allow adjacent pixels to affect the color of yourtarget pixel </span><span class=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><i><span lang=EN-US>, </span></i><span lang=EN-US> and this is something called the <i>weighting</i>, but the immediate neighborsto </span><span class=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>  in the 3x3 grid are the ones that will have the greatest effect.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=156 height=156src="../png/0586-dict3-24.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Using a2x2 grid corresponds to the </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>MEDIUM</span></span><span lang=EN-US>  quality setting in Flash.</span></p><h4><span lang=EN-US> 4x4 grid</span></h4><p class=MsoBodyText><span lang=EN-US> The sameprinciple occurs if you use a 4x4 grid. The effective statistical grid ofneighboring pixels that have a strong effect on </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>  is a 7x7 grid with </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> at itscenter (or &quot;anti-alias by three pixels in any direction from </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US> &quot;). Although the math thatproves this is beyond the scope of this book, you can see intuitively why thisshould be so:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The top left corner of the 7x7 gridcontains the farthest away pixel that uses </span><span class=Code><spanlang=EN-US style='font-family:Courier'>a</span></span><span lang=EN-US> in it’s own 4x4 pixelgrid, so it is the farthest away pixel that is affected by pixel </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>a</span></span><i><span lang=EN-US>.</span></i></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The bottom right corner of the 7x7grid contains the farthest away pixel that </span><span class=Code><spanlang=EN-US style='font-family:Courier'>a</span></span><span lang=EN-US> uses in its own 4x4 pixelgrid, and so is the farthest away pixel that directly affects the anti-aliasingof pixel </span><span class=Code><span lang=EN-US style='font-family:Courier'>a</span></span><span lang=EN-US>.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> These two farthest away pixels formthe diagonal of the effective statistical grid.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=132 height=132src="../png/0586-dict3-24a.png">      <img width=195 height=195src="../png/0586-dict3-24b.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Using a4x4 grid corresponds to the </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>HIGH</span></span><span lang=EN-US>  anti aliasing quality setting inFlash.</span></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> Youshould note that </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>the anti aliasing settingis not the only thing that affects the final appearance of the graphics seen inFlash</span></span><span lang=EN-US>. There arethree other issues that can affect appearance, and these are:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The user’s screen resolution. Althoughyou cannot change this, you can find out what it is via the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>Capabilitesobject</span></span><span lang=EN-US>, and tailor your </span><span class=Code><spanlang=EN-US style='font-family:Courier'>_quality</span></span><span lang=EN-US> setting accordingly.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The position of Flash’s virtual screenco-ordinates in relation to the true pixels used by your hardware. Thisrelationship can be seen in the authoring environment as the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>pixel snapgrid</span></span><span lang=EN-US>, and this has a very strong effect onanti-aliasing.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The color scheme you use can affectthe contrast between pixels. A low contrast color scheme makes&quot;jaggies&quot; less prominent before anti-aliasing, so you may be able toget away with a lower anti-aliasing setting.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> See thetips and precautions section for further discussion on these issues.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:5.4pt; border-collapse:collapse;border:none;'> <tr>  <td width=236 valign=top style='width:176.9pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span class=ImportantWord><span lang=EN-US  style='font-family:Helvetica;'>Code</span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=146 valign=top style='width:109.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span class=ImportantWord><span lang=EN-US  style='font-family:Helvetica;'>Rendered quality</span></span></p>  </td>  <td width=179 valign=top style='width:134.4pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span class=ImportantWord><span lang=EN-US  style='font-family:Helvetica;'>Notes</span></span></p>  </td> </tr> <tr>  <td width=236 valign=top style='width:176.9pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>my_btn._quality = &quot;LOW&quot;;</span></span></p>  </td>  <td width=146 valign=top style='width:109.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> <img width=129 height=84  src="../png/0586-dict3-25.png"></span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>    </td>  <td width=179 valign=top style='width:134.4pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This is  the lowest quality setting available via ActionScript. No anti-aliasing  (pixel smoothing) will take place, and &quot;jaggies&quot; will result. This  setting gives the fastest performance.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  setting is the same as the </span><span class=Code><span lang=EN-US  style='font-family:Courier;'>Low</span></span><span lang=EN-US>  quality setting in the Publish  Settings window.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  setting is best used when you are creating FLAs for low performance devices  (which may include PDA devices.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> It is  also useful when writing retro Flash games (or websites with the same design  influences), where the chunky pixilated feel is a definite advantage!</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>  <td width=236 valign=top style='width:176.9pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>my_btn._quality = &quot;MEDIUM;</span></span></p>  </td>  <td width=146 valign=top style='width:109.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> <img width=129 height=84  src="../png/0586-dict3-26.png"></span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>   <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=179 valign=top style='width:134.4pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This is  the lowest available anti-aliased quality setting via ActionScript. No  anti-aliasing (pixel smoothing) will take place on bitmaps, but anti-aliasing  is applied to everything else.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  setting corresponds to the </span><span class=Code><span lang=EN-US  style='font-family:Courier;'>medium</span></span><span lang=EN-US>  quality setting in the Publish  Settings window.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> The  difference between this setting and </span><span class=Code><span lang=EN-US  style='font-family:Courier;'>high</span></span><span lang=EN-US>  quality is not normally apparent  if your graphics are all moving constantly, even though this setting is  actually of a lower quality.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>  <td width=236 valign=top style='width:176.9pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>my_btn._quality = &quot;HIGH&quot;;</span></span></p>  </td>  <td width=146 valign=top style='width:109.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> <img width=129 height=84  src="../png/0586-dict3-27.png"></span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>    <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=179 valign=top style='width:134.4pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This is  the highest available quality setting via ActionScript. Anti aliasing is  applied to everything on the stage. This setting is exactly the same as the  last example, except that bitmaps are always smoothed.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  setting corresponds to the </span><span class=Code><span lang=EN-US  style='font-family:Courier;'>high</span></span><span lang=EN-US>  quality setting in the Publish  Settings window. Because anti-aliasing is a smoothing effect, you may lose  sharpness in the final image, particularly if your image has very small  details.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>  <td width=236 valign=top style='width:176.9pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>my_btn._quality = &quot;BEST&quot;;</span></span></p>  </td>  <td width=146 valign=top style='width:109.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> <img width=129 height=84  src="../png/0586-dict3-28.png"></span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>    </td>  <td width=179 valign=top style='width:134.4pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This is  the highest available quality setting via ActionScript. Anti-aliasing is  applied to everything on the stage. This setting is exactly the same as the  last example, except that bitmaps are always smoothed.</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  setting corresponds to the </span><span class=Code><span lang=EN-US  style='font-family:Courier;'>best</span></span><span lang=EN-US>  quality setting in the Publish  Settings window. It is only different to the </span><span class=Code><span  lang=EN-US style='font-family:Courier;'>high</span></span><span lang=EN-US>  setting in the way it deals with  bitmaps. Bitmaps are <i>always </i>smoothed,  and you may therefore prefer to use this setting if your presentation has  large areas of static bitmaps (such as an online portfolio).</span></p>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> You  should note however, that this setting is the most computationally expensive,  and will slow down any animations considerably.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>  <td width=236 valign=top style='width:176.9pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>myFirst_btn._quality = &quot;LOW&quot;;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>mySecond_btn._highquality =  &quot;BEST&quot;;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>myFirst_mc._highquality = &quot;LOW&quot;;</span></span></p>  </td>  <td width=146 valign=top style='width:109.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=179 valign=top style='width:134.4pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText><span lang=EN-US> This  code is attempting to apply individual quality settings to individual graphic  objects. The </span><span class=Code><span lang=EN-US style='font-family:  Courier;'>_quality</span></span><span lang=EN-US>  setting is a <i>global </i>property; everything will always use the last seen  setting.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-US> Examples and practicaluses</span></h3><p class=MsoBodyText><span lang=EN-US> You canuse the </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  property to define the quality of renderingdynamically. Although the &quot;</span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>Auto High</span></span><span lang=EN-US> &quot; and &quot;</span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>AutoLow</span></span><span lang=EN-US> &quot;settings in the publish settings are quick ways to set a compromise betweenquality and playback speed, they only take into account <i>performance vs quality. </i>There are other issues you may want toconsider, and these may include:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The type of machine the user is usingin terms of graphic capabilities as well as performance. If the user is using a256 color screen, there is no point in using the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>BEST</span></span><span lang=EN-US>  anti-aliasingsetting for example, because the user isn’t using enough colors to support it.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> You want to allow the user to set thequality manually.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> See theexample </span><span class=FileName><span lang=EN-US style='font-family:Courier;'><a href="../fla/button._quality.fla">button._quality.fla</a></span></span>and <span class=FileName><span lang=EN-US style='font-family:Courier;'><a href="../swf/button._quality.swf">button._quality.swf</a></span></span>.<span lang=EN-US></span></p><h3><span lang=EN-US> Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-US> There area number of issues that can also affect apparent image quality other than theanti-aliasing setting you choose. If you select some of these options insteadof simply choosing the highest anti-aliasing level &quot;because it must bebetter&quot;, you may achieve a better overall performance with the sameapparent quality because some of the other options do not result in greaterprocessing overheads, whereas increasing anti-aliasing <i>always</i> does.</span></p><h4><span lang=EN-US> Screen Resolution</span></h4><p class=MsoBodyText><span lang=EN-US> Theeffects of jaggies get less noticeable with increasing screen resolution.Jaggies are four times less prominent on a 1280x1024 screen than on a 600x400screen simply because the pixels in the former are 4 times smaller. This meansthat you can get away with less anti-aliasing and therefore a lower </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_quality</span></span><span lang=EN-US>  settings if the user has a largescreen resolution. You can detect the current screen attributes using the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Capabilities</span></span><span lang=EN-US>  object.</span></p><h4><span lang=EN-US> The pixel grid</span></h4><p class=MsoBodyText><span lang=EN-US> As notedabove, aliasing is a noise (or error) caused by under sampling. In practice forus, this really means that Flash tries to use anti-aliasing to simulate beingable to draw more pixels than there physically are. For example, you can tellFlash to draw a line from (0.5, 0.5) to (100, 100) via the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Movie Clip</span></span><span lang=EN-US> object </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>lineTo</span></span><span lang=EN-US>  and </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>moveTo</span></span><span lang=EN-US>  methods. This tells Flash to draw aline starting from half a pixel in from the top left corner. There is really noway to draw half a pixel, but it can be approximated as follows:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Assumingthe square below left is one pixel. If you wanted to draw pixels smaller thanthis (as per the middle drawing below), you can <i>approximate </i>it by drawing the larger pixel, but by using a lightercolor that takes on the <i>average </i>valueof the smaller &quot;virtual pixels&quot; (as per the rightmost image). Seenfrom a distance (or with very small pixels), the one gray pixel can look likethe two smaller back pixels.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img border=0 width=401 height=105src="../png/0586-dict3-29.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> So Flash isn’t just anti-aliasingthe pixels that are already on the screen, it is simulating the fact that youcan reference <i>more pixels than therephysically are as well. </i>Now, if you force Flash to only use whole pixels,and not the smaller &quot;virtual pixels&quot; created by anti-aliasingtrickery, you can afford to rely on anti-aliasing less, and can turn it off orto a lower setting, <i>and this willincrease performance with no loss of apparent quality.</i></span></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> Considerthe following image. The two dots are drawn on stage. The left one is alignedto the pixel grid (which you can display by selecting </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>View &gt; Snap to Pixels</span></span><span lang=EN-US> and then zooming in until you seethe pixel grid appear), and therefore requires whole pixels only to replicate.The one on the right crosses a &quot;true pixel&quot; boundary, and thereforerequires smaller virtual pixels to replicate it.</span></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> <img border=0 width=180 height=101src="../png/0586-dict3-30.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> If yourun the FLA containing these dots and view the output, you can see how Flash isusing whole gray dots to simulate the smaller virtual pixels.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> If you design your site so that asmuch of it as possible is created using true pixels, your design will requireless anti-aliasing, and moving from the higher settings to lower ones will notaffect apparent quality.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img border=0 width=204 height=106src="../png/0586-dict3-31.png"></span></p><p class=MsoBodyText><i><span lang=EN-US> &nbsp;</span></i></p><p class=MsoBodyText><span lang=EN-US> NB – Youcan also use the pixel grid to stop Flash aliasing certain selected graphics(such as small text) if you ensure that all the chosen graphics are aligned tothe pixel grid.</span></p><h4><span lang=EN-US> Choosing a less contrasting color scheme.</span></h4><p class=MsoBodyText><span lang=EN-US> Anti-aliasingworks by bringing the color of adjacent pixels closer together. If the colorsof your pixel borders are already close together, you need less anti-aliasingto achieve the same effect. For example, instead of using black text on a whitebackground with a high anti-aliasing setting, consider using dark gray text ona light gray background, with a lower anti-aliasing setting.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Theapparent quality of a scene can look better <i>and</i>the detail of your graphics can remain sharper, if you just tweak yourcolor scheme so that the largest contrasting colors are just a little nearer toeach other.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Unsurprisingly,the best solutions always seem to occur when careful design <i>and </i>efficient coding are used together!</span></p>