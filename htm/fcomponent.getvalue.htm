<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>F<i>Component</i>.getValue</h1><p class=MsoBodyText>(This method is applicable to <span class=Code><spanstyle='font-family:Courier'>FCheckbox.getValue, </span></span><span class=Code><spanstyle='font-family:Courier'>FComboBox.getValue, </span></span><span class=Code><spanstyle='font-family:Courier'>FListBox.getValue </span></span>and <spanclass=Code><span style='font-family:Courier'>FRadioButton.getValue. </span></span>)</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a =myComponent.getValue(); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where the variable <span class=Code><spanstyle='font-family:Courier'>a </span></span>is equated to the value of thecomponent instance <span class=Code><span style='font-family:Courier'>myComponent. </span></span>Depending on which component youare using, this value will be:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Check box </span></span>:either <span class=Code><span style='font-family:Courier'>true </span></span>or<span class=Code><span style='font-family:Courier'>false </span></span>depending on whether the check box instance is checked (<span class=Code><spanstyle='font-family:Courier'>true </span></span>) or unchecked (<span class=Code><spanstyle='font-family:Courier'>false </span></span>).</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Combo box </span></span>:returns a string corresponding to the label of the currently selected item. </p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>List box </span></span><spanclass=ImportantWord><span style='font-weight:normal'>: </span></span>returns a string corresponding to thecurrently selected item.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Radio button </span></span>:returns a string or the data corresponding to the currently selected radiobutton in a radio button group. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This method is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 6. </span></span>Thismethod returns the value for all applicable components. It does not apply tothe push button (which doesn’t return a value, but instead generates an eventwhen it is pressed, as do all buttons), and the scrollbar/scroll pane (whichhave their own specialized method to return their value, <spanclass=ImportantWord><span style='font-family:Helvetica'>FComponent.getScrollPosition </span></span>).</p><h3>Description</h3><p class=MsoBodyText>This is one of the more important methods, because it isthe method you will use the most. If you use the Property inspector to manuallyconfigure your components, it is the <i>only</i>method you need to get your code working with most of the components, as weshall see…</p><h4>Check box</h4><p class=MsoBodyText>To set up a checkbox the procedure is as follows.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=480 height=111src="../png/0586-dict5-37.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Drag a check box instance onto the stage. You can eitherconfigure the checkbox via scripting or manually via the Property inspector.Because the configurable values of the check box rarely change, there is noreason not to just use the Property inspector, and one big advantage is thatonce configured, the only method you have to use is <span class=Code><spanstyle='font-family:Courier'>getValue, </span></span>so there’s not really muchelse to remember by way of scripting!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Set the <span class=ScreenText><span style='font-family:Optima'>Label </span></span>field tothe value of the check box to whatever text you want the text field to belabeled with.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Set the <span class=ScreenText><span style='font-family:Optima'>Initial </span></span><spanclass=ScreenText><span style='font-family:Optima'>Value </span></span>field to <span class=Code><spanstyle='font-family:Courier'>true </span></span>if you want the check box to beinitially checked, or <span class=Code><span style='font-family:Courier'>false </span></span>for unchecked.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Set the <span class=ScreenText><span style='font-family:Optima'>Change </span></span><spanclass=ScreenText><span style='font-family:Optima'>Handler </span></span>to the name of a function that youwant to run every time the check box’s state changes. This function will beexecuted every time the check box goes from checked to unchecked, or uncheckedto checked.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You have to also define your change handler. We havecalled this function <span class=Code><span style='font-family:Courier'>checkHandler </span></span>in our version’s Property inspector,and our function would look something like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functioncheckHandler(component) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    if (component.getValue()) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        //code you want to execute when </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        //the checkbox is checked goes here </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } else { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        // code you want to execute when </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        // the checkbox is unchecked goes here </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>getValue </span></span>method for a check box will return either <span class=Code><spanstyle='font-family:Courier'>true </span></span>(checkbox is checked) or <spanclass=Code><span style='font-family:Courier'>false </span></span>(checkbox isunchecked) and the <span class=ImportantWord><span style='font-family:Helvetica'>if </span></span>and <span class=ImportantWord><spanstyle='font-family:Helvetica'>else </span></span>branches of the <span class=ImportantWord><span style='font-family:Helvetica'>if </span></span>structureare used to conditionally run two sections of code that look after eacheventuality. Notice that the function has an argument <span class=Code><spanstyle='font-family:Courier'>component. </span></span>This argument ispassed to all change handlers, and refers in this case to the instance name ofthe check box that has just called the function.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There is only one other complication you need to consider,and that what to do if you have more than one check box. There are two options:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1 style='margin-left:60.55pt;text-indent:-.25in;'>1.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Youcan assign a different change handler to each check box. You would then have aseparate function per check box.</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;</span>You can give each check box a unique instance name. Using thisname, you can then configure the function to behave differently depending on whichfunction called it. For example, supposing you had two check box instances <spanclass=Code><span style='font-family:Courier'>check1 </span></span>and <span class=Code><spanstyle='font-family:Courier'>check2, </span></span>you could have a single change handler that handles both ofthem that looks something like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>function checkHandler(component) { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>    switch(component) { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>    casecheck1 : </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        if(component.getValue()) { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //code you want to execute when the checkbox </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //instance &quot;check1&quot; is checked goes here </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        }else { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //code you want to execute when the checkbox </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //instance &quot;check1&quot; is unchecked goes here </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        } </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>       break; </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>    casecheck2 : </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        if(component.getValue()) { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //code you want to execute when the checkbox </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //instance &quot;check2&quot; is checked goes here </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        }else { </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>            //code you want to execute when thecheckbox </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>           //instance &quot;check2&quot; is unchecked goes here </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>        } </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>    } </span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There are of course other, more complex options (such asusing part of the instance name as an index of an array whose values specifywhat to do when each check box is checked/unchecked, but this shows you thebasic schemes available. As you can see, if you configure the check boxmanually using the Property inspector, the <span class=Code><spanstyle='font-family:Courier'>getValue </span></span>method is the only otherthing you will need to interface your code with the check box.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>See also the example file <ahref="../fla/fcomponentgetvalue1.fla">fcomponentgetvalue1.fla</a>/ <a href="../swf/fcomponentgetvalue1.swf">fcomponentgetvalue1.swf</a>.</p><h4>Combo box</h4><p class=MsoBodyText>To set up a combo box the procedure is as follows. Drag acombo box instance onto the stage. You can either configure the combo viascripting or manually via the Property inspector. Unless you are driving yourcombo box via dynamic data (in which case you will also have to use the othermethods of the combo box as well as <span class=Code><span style='font-family:Courier'>getValue </span></span>) you can get away with configuring the combobox manually via the Property inspector. If your application allows you to dothis, then the only method you need to know about is <span class=Code><spanstyle='font-family:Courier'>getValue. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=604 height=135src="../png/0586-dict5-38.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Editable </span></span>value defines whether the fields inthe combo box will be editable or not. If you want the standard drop-down andun-editable menu, you will want to leave this as <span class=Code><spanstyle='font-family:Courier'>false. </span></span></p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Labels </span></span>define what will appear in the combobox drop-down. Assuming the values seen here (the colors red, green, blue,yellow, magenta, cyan), the final runtime combo would look like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=116 height=147src="../png/0586-dict5-39.png"> <b><span style='color:red'> </span></b><img border=0 width=116 height=147src="../png/0586-dict5-40.png"> <b><span style='color:red'> </span></b><img border=0 width=116 height=147src="../png/0586-dict5-41.png"><b><spanstyle='color:red'>  </span></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The image to the left is the closed combo. The middle oneis what you will see if you open it, and the final one is the closed combo witha selection made.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Data </span></span>field is optional. If you don’t fillit in then the value returned when you select a label will be the defaultvalue, which is the label text itself as a string value. So if you selected ‘<spanclass=Code>yellow’</span>(as we have done above), the <spanclass=Code><span style='font-family:Courier'>getValue </span></span>methodwould return <span class=Code><span style='font-family:Courier'>&quot;yellow&quot;. </span></span>If however, you enter a data value (in the Property inspector above, we haveentered the corresponding hex values for the colors), you would see <spanclass=Code><span style='font-family:Courier'>&quot;0xFFFF00&quot; </span></span>asthe returned value. The choice on whether to use a data field or not is usuallydown to your application, but the following tips might be useful:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Ifyou are going to use the returned values mathematically, you should populatethe <span class=ScreenText><span style='font-family:Optima'>Data </span></span>field, because that is the only way you will get a number.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Ifyou simply want the numbers <span class=Code><span style='font-family:Courier'>0 </span></span>for red, <span class=Code><span style='font-family:Courier'>1 </span></span>forgreen, and so on through to <span class=Code><span style='font-family:Courier'>5 </span></span>for cyan, you would be better of just filling in the labels and using the <spanclass=ImportantWord><span style='font-family:Helvetica'>FComponent.getIndex </span></span>method, which will return the numbersyou require, because they correspond to the <span class=Code><spanstyle='font-family:Courier'>index </span></span>of the selected label.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Ifyou have made the combo box editable, you most likely want the edited <spanclass=ScreenText><span style='font-family:Optima'>Label </span></span>stringsto be returned, in which case you should not fill in the <spanclass=ScreenText><span style='font-family:Optima'>Data </span></span>fields.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>RowCount </span></span>is the maximumsize of the drop-down. If the size is greater than the number of labels (as inthe cases seen above), you will simply see all the labels. If it is <i>less </i>than the number of labels, thenthat number of labels will be seen at any one time, and a scroll bar willappear to allow you to see the other options. For example, if you set this to <spanclass=Code><span style='font-family:Courier'>3 </span></span>for our comboabove, you would now see this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=123 height=87src="../png/0586-dict5-42.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Finally, you need to enter the <span class=ScreenText><spanstyle='font-family:Optima'>Change Handler. </span></span>As before for thecheck box, this is the function that will run whenever you make a change to thecombo box.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Typical examples of it would be:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functioncomboHandler(component) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    x = component.getValue(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This would equate <span class=Code><span style='font-family:Courier'>x </span></span>to the last label that was selected (if no data hasbeen defined for the label) or the <span class=ScreenText><spanstyle='font-weight:normal;font-style:normal'>Data </span></span>value (if it has).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functioncomboHandler(component) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    switch (component.getValue()) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 1 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        text_txt.text = &quot;To create red,use the RGB value 0xFF0000.&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        break; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 2 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        text_txt.text = &quot;To create green,use the RGB value 0x00FF00.&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        break; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 3 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        text_txt.text = &quot;To create blue,use the RGB value 0x0000FF.&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        break; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 4 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        text_txt.text = &quot;Yellow is redplus green so you need to AND red and green, giving 0xFFFF00.&quot;; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>If the combo shown below had a Data field of <spanclass=Code><span style='font-family:Courier'>[1, 2, 3, 4], </span></span>thenthis code would run a different branch of its <span class=Code><spanstyle='font-family:Courier'>switch </span></span>statement for each optionselected.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=101 height=85src="../png/0586-dict5-43.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The strategy for creating event handlers that can dealwith multiple combo boxes is the same as that one discussed for the check boxdiscussed above. </p><h4>List box</h4><p class=MsoBodyText>To set up a list box the procedure is as follows.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Drag a list box instance onto the stage. You can eitherconfigure the list box via scripting or manually via the Property inspector.Unless you are driving your list box via dynamic data (in which case you willalso have to use the other methods of the list box as well as <spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>getValue </span></span></span>) you can get away withconfiguring the list box manually via the Property inspector. If yourapplication allows you to do this, then the only method you need to know aboutis <span class=Code><span style='font-family:Courier'>getValue. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=622 height=112src="../png/0586-dict5-44.png"></p><p class=MsoBodyText>&nbsp;</p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Labels </span></span>field defines what will appear in thelist box. Each string you enter will be used as a label for one of theavailable list box options. In the list box shown, we have configured thelabels to be colors, the first one being black.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Data </span></span>field is optional. If you don’t fillit in then the value returned when you select a label will be the defaultvalue, which is the label text itself as a string value. If however, you entera data value (in the Property inspector above, we have entered the numbers 1 to8), you would see <span class=Code><span style='font-family:Courier'>1 </span></span>returned by <span class=Code><span style='font-family:Courier'>getValue. </span></span>The choice on whether to use a data field or not is usually down to yourapplication, but the following tips might be useful:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Ifyou are going to use the returned values mathematically, you should populatethe <span class=ScreenText><span style='font-family:Optima'>Data </span></span>field, because that is the only way you will get a number.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Ifyou simply want the numbers <span class=Code><span style='font-family:Courier'>0 </span></span>for black, <span class=Code><span style='font-family:Courier'>1 </span></span>for white, and so on through to <span class=Code><span style='font-family:Courier'>7 </span></span>for cyan, you would be better of just filling in the labels and using the <spanclass=ImportantWord><span style='font-family:Helvetica'>FComponent.getIndex </span></span>method, which will return the numbersyou require, because they correspond the <span class=Code><spanstyle='font-family:Courier'>index </span></span>of the selected label.</p><p class=MsoBodyText style='margin-left:20.25pt'>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>SelectMultiple </span></span>field allowsyou to specify whether or not the user can make a multiple selection or not. Acombo box with this feature enabled is shown below. The user can make multipleselections by holding down the <span class=Keyboard><span style='font-family:"New York"'>Control </span></span>or <span class=Keyboard><spanstyle='font-family:"New York"'>Shift </span></span>keys. If you enable thisproperty, be aware that the values returned by <span class=Code><spanstyle='font-family:Courier'>getValue </span></span>will become non trivial,because the current item selected is not a single thing anymore, but aselection of variable length. To see how to handle list boxes with SelectMultiple enabled, see the entry for <span class=ImportantWord><spanstyle='font-family:Helvetica'>FComponent.getSelectedItems </span></span>and <span class=ImportantWord><spanstyle='font-family:Helvetica'>FComponent.getSelectedIndices. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=128 height=122src="../png/0586-dict5-27.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Finally, you need to enter the <span class=ScreenText><spanstyle='font-family:Optima'>Change Handler. </span></span>As before for theprevious components, this is the function that will run whenever you make achange to the list box. You can use exactly the same kind of functionsdiscussed for the combo box. The combo box and list box are actually identicalin terms of programming, as long as you have not enabled Select Multiple in thelist box.</p><h4>Radio button</h4><p class=MsoBodyText>The radio button will seem slightly non standard whencompared to the other components until you realize that the radio button <spanclass=ImportantWord><span style='font-family:Helvetica'>group </span></span>is the thing that is equivalent toother components, not the individual radio button instances themselves; youneed a group of radio buttons before they become useful.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The purpose of a radio button group is to allow the userto select from one or more groups of <i>mutuallyexclusive options</i>. Thatsounds a bit dense, but is actually quite simple. Coffee anyone?</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=437 height=95src="../png/0586-dict5-45.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The first set of options for your coffee are <spanclass=Code><span style='font-family:Courier'>strong, </span></span><spanclass=Code><span style='font-family:Courier'>regular </span></span>and <spanclass=Code><span style='font-family:Courier'>weak </span></span>(or in thesedays of ‘up-side’ marketing, <span class=Code><span style='font-family:Courier'>healthyoption </span></span>not <spanclass=Code><span style='font-family:Courier'>weak </span></span>). These <spanclass=Code><span style='font-family:Courier'>strength </span></span>options are mutually exclusive; you canonly choose one out of the group. The second group is the same deal. Ignoringthe variations of milk and sugar quantity, there are really only four differenttypes of coffee: ‘with nothing’, with ‘milk no sugar’, ‘with milk, sugar’, and‘with sugar’. You can only have one of these four <i>with </i>options, so this group is also mutually exclusive.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is the sort of selections that radio buttons are usedfor, and you can start to see that our two groups are really components intheir own right rather than individual sets of radio buttons. In particular, <spanclass=ImportantWord><span style='font-family:Helvetica'>the getValue methodlooks at the group, and returns one value per group. </span></span>It doesn’treturn the value of one individual radio button, because that is very rarelyrelevant.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To set up a radio button group the procedure is asfollows.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Drag the number of radio buttons you need in your grouponto the stage. You can either configure the radio buttons via scripting ormanually via the Property inspector. Unless you are driving your radio buttonsvia dynamic data (in which case you will also have to use the other methods ofthe radio button as well as <span class=Code><span style='font-family:Courier'>getValue </span></span>)you can get away with configuring manually via the Property inspector. If yourapplication allows you to do this, then the only method you need to know aboutis <span class=Code><span style='font-family:Courier'>getValue. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=518 height=110src="../png/0586-dict5-46.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Label </span></span>field defines the label that willappear next to each radio button.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>InitialState </span></span>defines whetherthis radio button will start as selected (<span class=Code><spanstyle='font-family:Courier'>true </span></span>) or unselected (<spanclass=Code><span style='font-family:Courier'>false </span></span>). You shouldonly have one button as <span class=Code><span style='font-family:Courier'>true </span></span>per group. If you have more than one set to <span class=Code><spanstyle='font-family:Courier'>true, </span></span>Flash will still only set oneduring runtime.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>GroupName </span></span>defines the radiobutton group, and this is synonymous with the instance name for othercomponents; <span class=ImportantWord><span style='font-family:Helvetica'>themost important methods of the radio button will take the component name to bethis group name. </span></span>During runtime, only one radio button in eachgroup is allowed to be selected at any one time. You should have at least tworadio buttons in each group name. If you have one radio button it is impossibleto unselect it once selected!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Data </span></span>field is optional. If you don’t fillit in then the value returned when you select a label will be the defaultvalue, which is the label text itself as a string value. If however, you entera data value (<span class=Code><span style='font-family:Courier'>2 </span></span>in the example below), you would see that value returned by <span class=Code><spanstyle='font-family:Courier'>getValue. </span></span>The choice on whether touse a data field or not is usually down to your application, but if you are goingto use the returned values mathematically, you should populate the Data field,because that is the only way you will get a number.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>Labelplacement </span></span>specifiesthe justification of the label. You can have either left or rightjustification.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=518 height=110src="../png/0586-dict5-47.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=ScreenText><span style='font-family:Optima'>ChangeHandler </span></span>field <i>may</i>be hidden when you first open the Property inspector, and you will have toscroll down to see it. As before for the previous components, this is thefunction that will run whenever you make a change to the radio handler. It isslightly different to other components, because as mentioned above, theargument to this function is not the name of the radio button that has changed,<i>but the name of the radio button groupthat contains it. </i>This is reasonable, given that the radio button group isactually more important generally. The most basic radio handler is shown below.This simply traces the <span class=Code><span style='font-family:Courier'>getValue </span></span>value to the Output window. If we selected the green radio button, thisfunction would return either <span class=Code><span style='font-family:Courier'>&quot;green&quot; </span></span>(if we had not defined the Data value of <span class=Code><spanstyle='font-family:Courier'>2 </span></span>) or <span class=Code><spanstyle='font-family:Courier'>2 </span></span>(if we had, as seen in the picturesabove).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionradioHandler(radioGroup) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(radioGroup.getValue()); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>A more useful handler would have a <spanclass=ImportantWord><span style='font-family:Helvetica'>switch </span></span>or<span class=ImportantWord><span style='font-family:Helvetica'>if… else if… else </span></span>that executed a different bit of code per radio button selected. This handlershows the general structure of such a handler: </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionradioHandler(radioGroup) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    switch (radioGroup.getValue()) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 1 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        trace(&quot;you have selectedred&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        break; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    case 2 : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        trace(&quot;you have selectedgreen&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        break; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    default : </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        trace(&quot;you have selectedblue&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also the example file <ahref="../fla/fcomponentgetvalue2.fla">fcomponentgetvalue2.fla</a>/ <a href="../swf/fcomponentgetvalue2.swf">fcomponentgetvalue2.swf</a>.</p><h3>Examples and practical uses</h3><p class=MsoBodyText>The examples above show how to use the <span class=Code><spanstyle='font-family:Courier'>getValue </span></span>method to retrieve valuesform all the components that use this method. The coding style used is therecommended event driven route, which is the most efficient way to do it.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the main text above for a list of example files.</p><h3>Tips and precautions</h3><p class=MsoBodyText>The only two components not covered by this entry are thescrollbar and scroll pane. There is a good reason for this. In their normalmode of operation, they don’t need any ActionScript!Although it is beyond the scope of this entry to discuss these twocomponents, you should note that you can configure these two componentsentirely via non-scripting techniques.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Reading this entry and understanding the examples includedwill go a long way to introducing how components work, and how to interface tothem via scripting. </p>