<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>arguments.length</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x =arguments.length; </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x </span></span>will be returned as the number ofexpected arguments of the currently scoped function. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This property of the <span class=Code><spanstyle='font-family:Courier'>arguments </span></span>object is <spanclass=ImportantWord><span style='font-family:Helvetica'>compatible with Flash 5or later. </span></span>It will only exist within the scope of the currentlyrunning function, and will cease to exist as soon as program execution returnsto the code that called the function.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>length </span></span>property of the <span class=Code><spanstyle='font-family:Courier'>arguments </span></span>object becomes defined whena function is called, and defines the number of arguments that have beenincluded with the call. </p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=336 valign=top style='width:252.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>function myFunction() { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  trace(arguments.length); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myfunction(10, 20, 30); </span></span></p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The function <span class=Code><span style='font-family:  Courier'>myfunction </span></span>shows how you can capture the number of arguments received by a function. Note that the number of arguments sent is greater than the number of arguments <span  class=Code><span style='font-family:Courier'>myFunction </span></span>is set up to receive (it isn’t actually set up to receive any!). </p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The Output window will display <span class=Code><span  style='font-family:Courier'>“3” </span></span>if you run this script.</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Note that the value of the arguments sent to a function can be more or less than the function is set up to receive, and neither case will raise an error, because ActionScript does not check this. </p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>function myFunction() { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  for (i=0; i&lt;arguments.length; i++) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      trace(arguments[i]); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  } </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>trace(&quot;first call…&quot;); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myfunction(10, 20, 30); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>trace(&quot;second call…&quot;); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myfunction(2, 4, 6, 8, 10); </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The function <span class=Code><span style='font-family:  Courier'>myFunction </span></span>shows how you can send a variable number of arguments to a function. The first call sends 3 numbers, whereas the second call sends 5. </p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>This code also illustrates the true nature of the <span  class=Code><span style='font-family:Courier'>arguments </span></span>object: <span  class=ImportantWord><span style='font-family:Helvetica'>it is an array. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The output of this code is shown below:</p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=165 height=251  src="../png/0586-dict2-08.png"></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Note that the <span class=Code><span style='font-family:  Courier'>arguments </span></span>object should really be described as ‘array like’. The <span class=Code><span style='font-family:Courier'>arguments </span></span> object has a very small subset of the features of the <span class=Code><span  style='font-family:Courier'>Array </span></span>object (it only has the length property of the true <span class=Code><span style='font-family:Courier'>Array </span></span> object).</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>arguments.length </span></span>property is very useful when used withthe fact that the <span class=Code><span style='font-family:Courier'>arguments </span></span>object itself is an array like structure. Consider the following function thatcalculates averages:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionaverage(a0, a1, a2, a3) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  return (a0+a1+a2+a3)/4; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x =average(1, 4, 7, 9); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(x); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This will return the average of 4 numbers, as shown below.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=256 height=110src="../png/0586-dict2-11.png"></p><p class=MsoBodyText><b></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The function is limited to providing the average of 4numbers only though, and this limits its usefulness as a general solution.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following function uses the <span class=Code><spanstyle='font-family:Courier'>length </span></span>property to create a function that can handle a dynamically sizedinput list:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionaverage() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  var i = 0; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  var total = 0; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  for (i=0; i&lt;arguments.length; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>       total = total+arguments[i]; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  return total/(arguments.length); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x =average(1, 4, 7, 9); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(x); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>y =average(1, 2); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(y); </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText>This code will give the output shown below. Note that thetwo calls to the <span class=Code><span style='font-family:Courier'>average() </span></span>function have two differently sizedinput lists, which the function is written to deal with. See also <ahref="../fla/argumentslength.fla">argumentslength.fla</a>and <a href="../swf/argumentslength.swf">argumentslength.swf</a>.</p><p class=MsoPlainText>&nbsp;</p><p class=MsoPlainText><img border=0 width=204 height=87src="../png/0586-dict2-12.png"></p><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>arguments </span></span>object used with the <span class=Code><span style='font-family:Courier'>length </span></span>property allows you to build generalsolutions to a number of problems, as shown in the example above. Since the <spanclass=Code><span style='font-family:Courier'>arguments </span></span>object is <i>always </i>created whether you use it ornot, the use of this feature is generally as fast, if not faster, than thetraditional way of using fixed argument functions.</p>