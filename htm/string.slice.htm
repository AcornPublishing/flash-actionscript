<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>String.slice</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>newString= myString.slice(start [, end]); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>newString </span></span>will have a value of <span class=Code><span style='font-family:Courier'>myString </span></span>from the <span class=Code><span style='font-family:Courier'>start </span></span>index to the <span class=Code><span style='font-family:Courier'>end </span></span>index.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The object is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 and above. </span></span>There are <span class=ImportantWord><span style='font-family:Helvetica'>noknown issues </span></span>with any version of Flash that supports this object.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>slice </span></span>method will create a new string from the calling string. The <span class=Code><spanstyle='font-family:Courier'>start </span></span>parameter defines the index inwhich to start the new string from. The optional <span class=Code><spanstyle='font-family:Courier'>end </span></span>parameter defines the index inwhich to end the new string from. If the <span class=Code><spanstyle='font-family:Courier'>end </span></span>parameter is not supplied the <spanclass=Code><span style='font-family:Courier'>slice </span></span>method willinclude all characters from the <span class=Code><span style='font-family:Courier'>start </span></span>index to the end of the calling string. It should be noted that the <spanclass=Code><span style='font-family:Courier'>slice </span></span>method createsa new string – it won’t modify the calling string.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>slice </span></span>method will create a new string containing the characters from the <spanclass=Code><span style='font-family:Courier'>start </span></span>index of thecalling string, to the <span class=Code><span style='font-family:Courier'>end </span></span>index of the calling string.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=252 valign=top style='width:189.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=156 valign=top style='width:117.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Additional explanation </span></span></p>  </td>  <td width=163 valign=top style='width:1.7in;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=252 valign=top style='width:189.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myString = new String(&quot;This is a string with some words in it&quot;); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>newString = myString.slice(5); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>trace(newString); </span></span></p>  </td>  <td width=156 valign=top style='width:117.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Result in the string <span  class=Code><span style='font-family:Courier'>“is a string with some words in it” </span></span>being sent to the Output window.</p>  </td>  <td width=163 valign=top style='width:1.7in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This example uses a <span  class=Code><span style='font-family:Courier'>String </span></span>object. Also, an <span class=Code><span style='font-family:Courier'>end </span></span> parameter is not being passed, so the <span class=Code><span  style='font-family:Courier'>slice </span></span>will end at the end of the string.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=252 valign=top style='width:189.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myString = &quot;This is a string with some words in it&quot;; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>newString = myString.slice(8, 16); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>trace(newString); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=156 valign=top style='width:117.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Result in the string <span  class=Code><span style='font-family:Courier'>“a string” </span></span>being sent to the Output window.</p>  </td>  <td width=163 valign=top style='width:1.7in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This is an example of the slice method working with a string literal.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=252 valign=top style='width:189.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myString = &quot;This is a string with some words in it &quot;; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>newString = myString.slice(22, -1); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>trace(newString); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=156 valign=top style='width:117.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Result in the string <span  class=Code><span style='font-family:Courier'>“some words in it” </span></span> being sent to the Output window.</p>  </td>  <td width=163 valign=top style='width:1.7in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> If you set the <span class=Code><span style='font-family:Courier'>end </span></span> value to <span class=Code><span style='font-family:Courier'>-1, </span></span> it will end the slice at the last character in the string.</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The example <ahref="../fla/stringslice.fla">stringslice.fla</a>/ <a href="../swf/stringslice.swf">stringslice.swf</a>demonstrates a search and replace using the slice function to extract thestrings.</p><h3>Tips and precautions</h3><p class=MsoBodyText>The difference between the <span class=Code><spanstyle='font-family:Courier'>slice </span></span>and <span class=Code><spanstyle='font-family:Courier'>substr </span></span>methods is that <spanclass=Code><span style='font-family:Courier'>slice </span></span>uses onlyindex points to extract a string and <span class=Code><span style='font-family:Courier'>substr </span></span>uses an index point and a length value to extracttext. The <span class=Code><span style='font-family:Courier'>slice </span></span>method will extract text between index point 1 and index point 2. Take thefollowing code for example. It shows one string and both the <span class=Code><spanstyle='font-family:Courier'>substr </span></span>method and the <spanclass=Code><span style='font-family:Courier'>slice </span></span>method withthe same parameters.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myString= new String(&quot;This is a test string for testing.&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myString.slice(5,6)); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myString.substr(5,6)); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The results generated by this code are very different. Ifyou were to write a <span class=Code><span style='font-family:Courier'>substr </span></span>method that matched that <span class=Code><span style='font-family:Courier'>slice </span></span>method from above it would look like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myString= new String(&quot;This is a test string for testing.&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myString.substr(5,1)); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… and if you were to construct a slice method that matchedthe <span class=Code><span style='font-family:Courier'>substr </span></span>method it would look like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myString= new String(&quot;This is a test string for testing.&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myString.slice(5,11)); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>As you can see, the <span class=Code><spanstyle='font-family:Courier'>slice </span></span>method works only with indexpoints and the <span class=Code><span style='font-family:Courier'>substr </span></span>method works with both an index point, as the start point, and then a length,from which it will start at the index point. Also, based on tests that I ran,there is not much difference in execution speed between the two methods.Neither method was consistently faster than the other.</p>