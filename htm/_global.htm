<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12169703"><span lang=EN-US> _global</span></a></h1><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.a = b;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>  is a non timeline based object or avariable, function or class name and </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>b</span></span><span lang=EN-US>  is the corresponding expression,function definition or class definition.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Compatiblewith </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Flash 6 and above</span></span><span lang=EN-US>. The global object allows you to createobjects, functions, and definitions that can be accessed from any timelinewithout having to specify a path to </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_global</span></span><span lang=EN-US>, because the global level is, asits name suggests, global, and available directly from any timeline.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> Theglobal object (sometimes also referred to as the <i>global level</i>) is the object within whose scope the default Flashdata objects, functions, and definitions are contained in. In non-programmingterms it is &quot;where ActionScript lives&quot;. The </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>global object is not a timeline</span></span><span lang=EN-US>  structure, and therefore cannot hold movieclips, buttons, textfields, or other timeline based object. You can only attachobjects that have no graphic appearance, and consist of data structures ordefinitions only.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> To avoidmisconceptions about what </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_global</span></span><span lang=EN-US>  is, it is better to use the term <i>global object </i>rather than <i>global level </i>when describing </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Theusefulness in the </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>  object is that:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> It allows you to create globalfunctions and variables.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> It simplifies the control of typicalmulti level SWF structures.</span></p><p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> &nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=288 valign=top style='width:216.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Code</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=276 valign=top style='width:207.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Notes</span></span></p>  </td> </tr> <tr>  <td width=288 valign=top style='width:216.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>_global.gVariable  = 20;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=276 valign=top style='width:207.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> Creates a global variable </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>gVariable</span></span><span class=Code><i><span lang=EN-US>. </span></i></span><span class=Code><span lang=EN-US> You can access this variable on any timeline as </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>gVariable</span></span><span class=Code><span lang=EN-US> (i.e. without having to specify a path)</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=288 valign=top style='width:216.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>_global.gFunction  = function(text) {</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>var text;</span></span></p>  <p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:  Courier;'>trace(text);</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>};</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=276 valign=top style='width:207.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> Creates a global function </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>gFunction</span></span><span class=Code><span lang=EN-US>. You can access this function on any timeline as </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>gFunction()</span></span><span lang=EN-US>  <span class=Code>(i.e. without having to specify a path) in exactly the same way as you  do not have to specify a path for ActionScript actions and methods such as </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>Math.abs()</span></span><span class=Code><span lang=EN-US>  or </span></span><span class=Code><span lang=EN-US style='font-family:  Courier;'>evaluate()</span></span><span class=Code><span lang=EN-US>. This can make global functions look like native  ActionScript actions.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=288 valign=top style='width:216.2pt;border:none;border-bottom:solid windowtext .5pt;background:silver;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>_global.x =  10;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>_root.myClip.x  = 5;</span></span></p>  </td>  <td width=276 valign=top style='width:207.0pt;border:none;border-bottom:solid windowtext .5pt;background:silver;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> If you have a global and local variable (or object or  function) of the same name, you will create &quot;collisions&quot; between  the two. See the Tips and precautions section below.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-US> Examples and practical use</span></h3><p class=MsoBodyText><span lang=EN-US> There arethree main reasons why </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_global</span></span><span lang=EN-US>  is useful:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> For the beginner or non ObjectOrientated programmer, the fact that you don’t have to use any paths to theglobal object makes for much neater code. For example, if you place all yourfunctions on </span><span class=Code><span lang=EN-US style='font-family:Courier'>_root</span></span><span lang=EN-US>, you would have to include the path to the function every time youcall it:<br><br></span><span class=Code><span lang=EN-US style='font-family:Courier'>_root.myFunction()<br><br></span></span><span lang=EN-US> If you define your function in </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>_global</span></span><span lang=EN-US>, you can now call it by its name only from any timeline;<br><br></span><span class=Code><span lang=EN-US style='font-family:Courier'>myFunction();<br><br></span></span><span lang=EN-US> This of course also applies to variables andobjects.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The second cool thing about </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>_global</span></span><span lang=EN-US>  is that it is more permanent than any other area that you can scopevariables to. This becomes useful in multi level SWFs, where you have </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>_level0</span></span><span lang=EN-US>  and other levels loaded in on demand. The global object is <i>not a timeline, </i>and therefore <i>cannot be overwritten by any loaded level. </i>Youshould of course note that </span><span class=Code><span lang=EN-USstyle='font-family:Courier'>_global</span></span><span lang=EN-US>  is not framebased (because it is not a timeline), so you cannot attach frame based scriptsto it.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Finally, for Object Orientatedprogramming, the </span><span class=Code><span lang=EN-US style='font-family:Courier'>_global</span></span><span lang=EN-US>  object has special significancebecause it allows you to create global structures that can act as the basestructures and prototypes that subsequent definitions in the timelines canrefer to. This is particularly useful in the definition of advanced components,where &quot;base components&quot; can populate the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>_global</span></span><span lang=EN-US> object with base data structures and functions that higher-level components canassume.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> See </span><spanclass=FileName><span lang=EN-US style='font-family:Courier;'><a href="../fla/(global).fla">(global).fla</a></span></span><span lang=EN-US>  and </span><span class=FileName><spanlang=EN-US style='font-family:Courier;'><ahref="../swf/(global).swf">(global).swf</a></span></span><span lang=EN-US>  for examples of programming stylesthat rely on the </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>  object.</span></p><h3><span lang=EN-US> Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-US> Tips andprecautions when using </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_global</span></span><span lang=EN-US>  are given as follows.</span></p><h4><span lang=EN-US> Using _global in modular code</span></h4><p class=MsoBodyText><span lang=EN-US> Misuse oroveruse of the global level is a common mistake in modular programming (andthis is really only an issue if you are writing components). You should onlyuse </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>  when it is actually required, because aheavily populated </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>  layer increases the chances of one piece ofmodular code overwriting global structures defined by another. In particular,you do not need to declare global prototypes when redefining default classes,because the prototype object will gain a scope of global from the default classvia inheritance.</span></p><h4><span lang=EN-US> Managing the global data-space</span></h4><p class=MsoBodyText><span lang=EN-US> If aglobal variable is given the same name as a timeline attached variable of thesame name, such as the following code:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.foo = 5;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_root.myClip.foo = &quot;dog&quot;;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> then theversion of </span><span class=Code><span lang=EN-US style='font-family:Courier;'>foo</span></span><span lang=EN-US>  you access will vary because the two versions of the identically namedvariable will tend to mask each other:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = foo;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> will give</span><span class=Code><span lang=EN-US style='font-family:Courier;'>x = 5</span></span><span lang=EN-US> everywhere except </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_root.myClip</span></span><span lang=EN-US>, where the timeline attached version of </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>foo</span></span><span lang=EN-US>  is scoped. On this timeline, youwill see </span><span class=Code><span lang=EN-US style='font-family:Courier;'>x =&quot;dog&quot;</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = _global.foo;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> will give</span><span class=Code><span lang=EN-US style='font-family:Courier;'>x = 5</span></span><span lang=EN-US> everywhere.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = _root.myClip.foo;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> will give</span><span class=Code><span lang=EN-US style='font-family:Courier;'>x = &quot;dog&quot;</span></span><span lang=EN-US>  everywhere.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> You canreduce the risk of creating &quot;collisions&quot; with same named global and timelineattached variables by using a naming convention. Prefixing all global variableswith &quot;</span><span class=Code><span lang=EN-US style='font-family:Courier;'>g</span></span><span lang=EN-US> &quot; will eradicate collisions in all FLAs that contain code writtenby you only.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Whereyour code is general and may find itself used along with other modular codewritten by other programmers (i.e. components), the use of &quot;</span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>g</span></span><span lang=EN-US> &quot; gives almost zero advantageagain, because almost all programmers will be using the same convention! Don’tworry, though, because there is another way out: define a <i>namespace within global. </i>To do this, define a global object thathas a name unique to you (for example, your name or your design house’s name).For example:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>//define personal namespace...</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.shamB = new Object();</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.shamB.foo = &quot;longSufferingWriter&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> defines my own personalversion of the global variable </span></span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>foo</span></span><spanclass=Code><span lang=EN-US>. If someone else creates a component that alsouses a variable or data structure </span></span><span class=Code><spanlang=EN-US style='font-family:Courier;'>foo</span></span><spanclass=Code><span lang=EN-US>  (something that is more likely to occur inObject Orientated Programming, because it is usually written in a common andwell defined style), they will not overwrite my </span></span><span class=Code><spanlang=EN-US style='font-family:Courier;'>foo</span></span><spanclass=Code><span lang=EN-US>  unless they are also using the same namespace:</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.glenRhodes.foo = &quot;CanadiangameHead&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>...</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>...</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.johnDavey.foo = &quot;tall CockneyBloke&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>...</span></span></p><h4><span lang=EN-US> Writing to _global variables</span></h4><p class=MsoBodyText><span lang=EN-US> If youwrite to a global variable from a location other than </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>, Flash will create a new <i>local </i>variableof the same name as the global. This is because Flash has no way of knowingwhether you want to access the global version of the variable or create a newlocal variable of the same name. For example, if you add the following code onframe 1 of a new FLA:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.gFoo = 10;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = gFoo;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>gFoo = 100;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> you willend up with:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> A variable <i>gFoo </i>with scope_global and value 10.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> A variable <i>x </i>with scope _rootand value 10.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> A variable <i>gFoo </i>with scope_root and value 100.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> What youmay have expected is:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> A variable <i>gFoo </i>with scope_global and value 100.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> A variable <i>x </i>with scope _rootand value 10.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thefollowing code will do this:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.gFoo = 10;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = gFoo;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_global.gFoo = 100;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The moralof this tale is </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>when writing to globalvariables, always include the _global path, otherwise Flash will assume youwant to define a new variable at the current scope, rather than simply updatethe existing global variable</span></span><span lang=EN-US>.</span></p><h4><span lang=EN-US> Creating Flash 5 content in Flash MX</span></h4><p class=MsoBodyText><span lang=EN-US> If youuse </span><span class=Code><span lang=EN-US style='font-family:Courier;'>_global</span></span><span lang=EN-US>  in Flash MX and export it as Flash 5, notethat all global variables will not be created <i>and </i></span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>no error to signify this will occur</span></span><span lang=EN-US>.</span></p>