<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>MovieClip.beginGradientFill</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myMovieClip.beginGradientFill(gradientFillType,colors, alphaValues, ratioValues, matrix);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span style='font-family:Courier'>gradientFillType</span></span>is either the string “<span class=Code><span style='font-family:Courier'>linear</span></span>”or “<span class=Code><span style='font-family:Courier'>radial</span></span>”.#</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span style='font-family:Courier'>colors</span></span>is an array of colors that are used to define the gradient (you can have asmany as you want to define your gradient).</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span style='font-family:Courier'>alphaValues</span></span>is an array that has a corresponding alpha setting for each of the <spanclass=Code><span style='font-family:Courier'>colors</span></span>entries(you must have as many entries for <span class=Code><span style='font-family:Courier'>alphas</span></span>as you do for <span class=Code><spanstyle='font-family:Courier'>colors</span></span>and <span class=Code><spanstyle='font-family:Courier'>ratios</span></span>or the method willfail).</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span style='font-family:Courier'>ratioValues</span></span>is an array that specifies where each color is on the gradient (you musthave as many entries for <span class=Code><span style='font-family:Courier'>rations</span></span>as you do <span class=Code><span style='font-family:Courier'>colors</span></span>and <span class=Code><span style='font-family:Courier'>alphas</span></span>or the method will fail).</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span style='font-family:Courier'>matrix</span></span>is a 3x3 matrix that is used as a transformation matrix or aparameter list for a simplified box transform.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This method also requires a very good understanding of <spanclass=ImportantWord><span style='font-family:Helvetica'>MovieClip.lineTo</span></span>,<span class=ImportantWord><span style='font-family:Helvetica'>movieClip.moveTo</span></span>,<span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.endFill</span></span>,and <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.beginFill</span></span>.You are advised to learn about those methods before attempting this one; thediscussion below assumes you have.</p><h3>Description</h3><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>is difficult to get to grips with, and probably the most difficult programmaticgraphics feature in Flash MX. This is not because it has a difficult syntax,but because the function it performs is fairly involved. You need to have agood understanding of the gradient editing features available in the graphicenvironment before you delve into the programmatic control of gradients,because otherwise you will have no feel for the underlying visual effect thatis hiding behind all those numbers. Don’t worry, though, because we’re assumingthe worst, and we’ll recap as we go along.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>There are also two versions of this method, and one ofthem requires an understanding of matrices,a branch of math that dealswith arithmetic operators (*, /, +, -) that can handle multi-value variables.Matrices are one of the golden chalices waiting for the intrepid MotionGraphics scripter who makes it to the very top of Mount ActionScript, becauseit allows you to teach Flash to think in 3D. We will briefly delve into thisarea as well in the <i>Tips and Precautions</i> section.</p><h4>Using gradients manually</h4><p class=MsoBodyText>Understanding how Flash treats gradients when you areusing the Flash interface is the key to understanding <span class=Code><spanstyle='font-family:Courier'>MovieClip.beginGradientFill</span></span>, becausealthough there are a lot of arguments in this method, they are all actuallyvery familiar to you, and you have already used them before, you just don’tknow that yet. The first stop is a recap of the <span class=ScreenText><spanstyle='font-family:Optima'>Color Mixer</span></span>panel:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=218 height=255src="../png/0586_dict8e_01.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>When you use this, you are actually defining all of thecorresponding <span class=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>parameters emboldened below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>beginGradientFill(</span></span><spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>gradientFillType, colors, alphaValues, ratioValues</span></span></span><spanclass=Code><i><span style='font-family:Courier'>, matrix</span></i></span><spanclass=Code><span style='font-family:Courier'>);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Let's take a look:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>gradientFillType</span></span>is the dynamic version of the <span class=ScreenText><spanstyle='font-family:Optima'>Fill Style</span></span>drop down menu inthe <span class=ScreenText><span style='font-family:Optima'>Color</span></span>panel. Although the drop-down has a number of options, obviously, the only onesthat are appropriate for <span class=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>are those that apply to gradients, and they are <span class=ScreenText><spanstyle='font-family:Optima'>Linear</span></span> and <span class=ScreenText><spanstyle='font-family:Optima'>Radial</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=90 height=76src="../png/0586_dict8e_02.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>colors</span></span>,<span class=Code><span style='font-family:Courier'>alphaValues</span></span>,and <span class=Code><span style='font-family:Courier'>ratioValues</span></span>all apply to the color bricks that you add to define the gradient. You canhave as many of these color bricks as you need, and you add more simply byclicking on the gradient.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=189 height=32src="../png/0586_dict8e_04.png">   <img width=189 height=32src="../png/0586_dict8e_05.png">  <img width=189 height=32src="../png/0586_dict8e_06.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Because we can have a variable number of color bricks thatdefine our gradient, the <span class=Code><span style='font-family:Courier'>MovieClip.beginFill</span></span>method uses <i>arrays </i>for these arguments. For each color brick we want touse we need to specify: color, alpha, ratio, and matrix.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For each color brick, <span class=Code><spanstyle='font-family:Courier'>MovieClip.beginFill</span></span> needs the colorvalue, and this is best expressed in hex. The value you need per brick is shownat the bottom left of the color panel (<span class=ScreenText><spanstyle='font-family:Optima'>1</span></span>), although the same value is alsoexpressed as separate R-G-B values at the top right. The alpha value of eachcolor brick is specified as shown at (<span class=ScreenText><spanstyle='font-family:Optima'>2</span></span>).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=253 height=279src="../png/0586_dict8e_07.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>ratioValues</span></span>is a little less explicit. For <span class=Code><span style='font-family:Courier'>MovieClip.beginFill</span></span>, it is synonymous with the <i>positionof each color brick along the gradient, left to right, assuming that thegradient is 255 pixels long. </i>So in our picture below, the black color brickis at a <span class=Code><span style='font-family:Courier'>ratioValue</span></span>of 0 and the white one is at a <span class=Code><span style='font-family:Courier'>ratioValue</span></span>of 255.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=198 height=72src="../png/0586_dict8e_03.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Some people may prefer to express the <span class=Code><spanstyle='font-family:Courier'>ratioValues</span></span> in hex, but there is noreal reason to do so (unlike with RGB color where there is; if you express aRGB color in Hex, the R, G, B color components remain separate, so 0x10F0CA isa color with Red = 0x10, Green = 0xF0, Blue = 0xCA).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>That leaves the matrix parameter, so what is the matrix?When you come to actually place shapes with a gradient fill onto the stage youcan either:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-.25in;'><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Just draw out your shape and accept the defaultgradient fill:<br><br>  <img width=400 height=202src="../png/0586_dict8e_08.png"><br>  <b></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-.25in;'><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Or you can edit the gradient fill via the &quot;<spanclass=ImportantWord><span style='font-family:Helvetica'>Fill transform tool</span></span>&quot;<br><br>  <img width=263 height=268src="../png/0586_dict8e_09.png"><br>  <b><span style='color:red'><br><br></span></b>The ActionScript version of creating fills models the use of theFill Transform Tool, which is handy because not only can you animate the pointsthat make up a shape with <span class=Code><span style='font-family:Courier'>MovieClip.lineTo</span></span>and <span class=Code><span style='font-family:Courier'>MovieClip.moveTo</span></span><i>you can now also animate its fill! </i>To do all this though, we will needto define quite a lot of data. We need to define all the things that the FillTransform tool can do to our fill, and this includes:<br><br></p><p class=Bullet-Level2><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Transforming the size (scaling and stretching)</p><p class=Bullet-Level2><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Transforming the position (movement)</p><p class=Bullet-Level2><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Transforming the angle of the gradient (rotation)</p><p class=MsoBodyTextIndent style='margin-left:45.0pt'>&nbsp;</p><p class=MsoBodyTextIndent style='margin-left:45.0pt'>There are two ways to dothis:<br><br><span class=ImportantWord><span style='font-family:Helvetica'>The hard way –</span></span>take the bull by the horns and learn matrix transformations. Not exactly ano-brainer option, but not a waste of time either, because matrix transformscan be used to define your shape drawing routines as well, and if you usematrix transforms for both your 2D fill animations as well as your 3 pointdata, you can integrate the two and viola, all sorts of other <i>really </i>sexystuff drops out of the mix.<br><span class=ImportantWord><span style='font-family:Helvetica'>The easy way –</span></span>use a parameter list instead of a matrix. Macromedia call this the <i>Boxtransform. </i>It is great because it doesn’t really require an understandingof matrices, and the one to go for when you are starting out (or just want theodd gradient). Its only problem is that it doesn’t tell you will be unaware ofwhat’s really going on.</p><h4>Box transform</h4><p class=MsoBodyText>The Box transform specifies the gradient as a box shape,whose parameters are stored in an <span class=Code><span style='font-family:Courier'>Object</span></span> object called <span class=Code><spanstyle='font-family:Courier'>matrix</span></span><i>. </i>Although this objectis called <span class=Code><span style='font-family:Courier'>matrix</span></span><i>,</i>as we mentioned earlier, it is <i>not really a matrix at all, so you onlyhave to think of it as an object with properties that define the fill. </i>Your<span class=Code><span style='font-family:Courier'>matrix</span></span>objectmust have a number of properties, and these <i>describe the bounding box ofyour gradient pattern. </i>It is important to realize that these do not definethe <i>fill area, </i>simply how the gradient will look.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The gradient bounding box will have the gradient runningalong the direction of the arrow, starting from the corner point (x, y) and <i>notthe center of the box </i>(as happens in the manual environment).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=400 height=305src="../png/0586_dict8e_14.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrixType</span></span>must be “<span class=Code><span style='font-family:Courier'>box</span></span>”.</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x</span></span>and<span class=Code><span style='font-family:Courier'>y</span></span>are the corner point of the gradient bounding box.</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>w</span></span>and <span class=Code><span style='font-family:Courier'>h</span></span>arethe width and height of the bounding box.</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>r</span></span>is the angle of rotation of the box. It is measured in radians.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The positions of our gradient &quot;color bricks&quot;will be at the corresponding positions along the width side of the box. If wedefine a color brick to have a <span class=Code><span style='font-family:Courier'>ratios</span></span>value <span class=Code><span style='font-family:Courier'>ratio</span></span>it will be as if the color brick was at position <span class=Code><spanstyle='font-family:Courier'>(ratio/255)*w</span></span><i>.</i></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Let’s put all of this together in a couple of examples.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the example <ahref="../fla/movieclip.bgradfill01.fla">movieclip.begingradientfill01.fla</a>   and <a href="../swf/movieclip.bgradfill01.swf">movieclip.begingradientfill01.swf</a>   .</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//define the beginGradientFill parameters...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {matrixType:&quot;box&quot;, x:100, y:100, w:100, h:100, r:0};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colors= [0x00FFFF, 0xFFFF00];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>alphas= [100, 100];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ratios= [0, 255];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// createa clip to put our graphics in..</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.createEmptyMovieClip(&quot;clip&quot;,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// drawour shape and fill it;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineStyle(0,0, 100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.beginGradientFill(&quot;linear&quot;,colors, alphas, ratios, matrix);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.moveTo(100,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(200,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(200,200);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(100,200);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.endFill();</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=224 height=223src="../png/0586_dict8e_15.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Notice that in terms of defining the &quot;fillpath&quot;,<span class=Code><span style='font-family:Courier'>beginGradientFill</span></span>is no different from <span class=Code><span style='font-family:Courier'>MovieClip.beginFill</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The way to understand the gradient colors is to look athow we would define the same gradient in the <span class=ScreenText><spanstyle='font-family:Optima'>Color Mixer</span></span>:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=218 height=255src="../png/0586_dict8e_16.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Our two colors are cyan (0x00FFFF) and yellow (0xFFFF00),and they are at the ratio positions 0 (cyan, far left brick) and 255 (yellow,far right). We have set the alpha values to 100 for both. This gives us:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colors= [0x00FFFF, 0xFFFF00];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>alphas= [100, 100];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ratios= [0, 255];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>NB–</span></span><spanclass=Code>Ifany of these three arrays contains more/less parameters than it needs, themethod always fails, so make sure you count them!</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Our matrixis defining our gradient bounding box.It looks like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=303src="../png/0586_dict8e_18.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {matrixType:&quot;box&quot;, x:100, y:100, w:100, h:100, r:0};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Our <span class=Code><span style='font-family:Courier'>x</span></span>,<span class=Code><span style='font-family:Courier'>y</span></span> corner pointis at (100, 100) and the box height and width is <span class=Code><spanstyle='font-family:Courier'>100</span></span>. Our rotation is zero (norotation) so we haven’t put it in the picture. The bounding box is in exactlythe same position as the shape we are filling (it might look different in thecode because we have defined it by the 4 corner points (as required by <spanclass=Code><span style='font-family:Courier'>moveTo</span></span> and <spanclass=Code><span style='font-family:Courier'>lineTo</span></span>) rather thanby one corner point and a height and width.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=244src="../png/0586_dict8e_17.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>We therefore see our whole gradient. You can also changethe gradient from “<span class=Code><span style='font-family:Courier'>linear</span></span>”to “<span class=Code><span style='font-family:Courier'>radial</span></span>”(which actually shows this better):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.beginGradientFill(&quot;radial&quot;,colors, alphas, ratios, matrix);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=227 height=225src="../png/0586_dict8e_19.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Assuming the gradient bounding box is the samesize/position as a square that you are filling, the resulting gradient willlook exactly the same as the fill thumbnail in the color mixer:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=270 height=255src="../png/0586_dict8e_28.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Okay, that’s the simple case. What happens if the gradientbounding box is not over the shape? Well, the fill pattern will move, but theshape will stay where it is:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {matrixType:&quot;box&quot;, <b>x:50, y:50</b>, w:100, h:100, r:0};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=264 height=228src="../png/0586_dict8e_22.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you animate this effect, it will look as if the shapeis a window looking out onto the fill, and the fill will move past the window.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=227 height=225src="../png/0586_dict8e_20.png">  <img border=0 width=227 height=225src="../png/0586_dict8e_21.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If your shape and fill bounding boxes are different sizes,you will see only part of the full gradient (gradient bounding box bigger) or asquashed up gradient pattern (shape bounding box bigger).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The same effect will occur if you vary the gradientbounding box parameters <span class=Code><span style='font-family:Courier'>w</span></span>,<span class=Code><span style='font-family:Courier'>h</span></span>, and <spanclass=Code><span style='font-family:Courier'>r</span></span>.</p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText>If your shape is not rectangular, all you have to do is tomake sure that your shape is enclosed by the box:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=286src="../png/0586_dict8e_23.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Also worth mentioning is that if your gradient boundingbox doesn’t overlap your shape at all, then you will end up with a solid color(it might be because you are defining your gradient bounding box in <spanclass=Code><span style='font-family:Courier'>_root</span></span> co-ordinatespace and then trying to apply them in a movie clip; see <spanclass=ImportantWord><span style='font-family:Helvetica'>MovieClip.globalToLocal</span></span>and <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.localToGlobal</span></span>).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>fill</span></span>method doesn’t seem to like you defining your &quot;color bricks&quot; out oforder either, so make sure that you define them in ratios order, lowest tohighest (leftmost to rightmost).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Have a look at the example files: <ahref="../fla/movieclip.bgradfill02.fla">movieclip.begingradientfill02.fla</a>   and <a href="../swf/movieclip.bgradfill02.swf">movieclip.begingradientfill02.swf</a>;   <a href="../fla/movieclip.bgradfill03.fla">movieclip.begingradientfill03.fla</a>   and <a href="../swf/movieclip.bgradfill03.swf">movieclip.begingradientfill03.swf</a>;   <a href="../fla/movieclip.bgradfill04.fla">movieclip.begingradientfill04.fla</a>   and <a href="../swf/movieclip.bgradfill04.swf">movieclip.begingradientfill04.swf</a>.   These show:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>A static gradient fill.<br><br>  <img border=0 width=400 height=73src="../png/0586_dict8e_25.png"><br>  <b></b></p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>A gradient fill that has its color <i>ratios</i>animated.<br><br>  <img border=0 width=400 height=73src="../png/0586_dict8e_26.png"><br>  <b></b></p><p class=Bullet-Level1><spanlang=EN-GB style='font-family:Symbol;'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>A   gradient fill that has its color ratios and grade angle animated.<br>  <br>  <img border=0 width=400 height=73src="../png/0586_dict8e_27.png"></p><p class=Bullet-Level1><br>  <b></b></p><h4>True Matrix transforms</h4><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>beginGradientFill</span></span>uses a 3x3 matrix. What we are defining when we do this is a set of transformscalled <i>Affines. </i>Mathematicians define these as &quot;translations thatmaintain parallel lines and straightness&quot;, but we can simply remember themby the set of <i>before </i>and <i>after </i>diagrams:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=274src="../png/0586_dict8e_10.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>All these are directly available via the fill transformtool. There is also one other Affine transform, which we will also cover. To dothis manually, you rotate the fill transform tool and then scale it in eitherthe horizontal or vertical direction:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=95src="../png/0586_dict8e_11.png"></p><p class=MsoBodyText><b></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Affine transforms are usually handled by a particularlyscary object called a matrix. Think of a matrix as a pumped up array and youwon’t be far wrong. Here’s how mathematicians typically represent them:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=250 height=199src="../png/0586_dict8e_12.png"></p><p class=MsoBodyText><b></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Each number is a separate element in a grid, and matrixmath allows you to treat the whole thing as a single data object, effectivelychanging one dimensional equations into multi-dimensional ones, something thatis particularly used in advanced electronics (where even the simplest circuitshave at least one real and one imaginary dimension) and physical motion basedequations (where you can create minimum (usually 1) dimensional theories andthen plug multi dimensional data into them to instantly make the resultsmulti-dimensional (a process that engineers call <i>cheating!)</i>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The beauty of a matrix-based approach for motion graphicsis that you can combine any or all of the 4 Affine transformations into onetransform matrix. Once you have your transform matrix to move a point tenpixels to the right, one to rotate it by 25 degrees and one to scale it by0.875, you can combine them into <i>one transform matrix that does all threeoperations. </i>This is a very useful feature of matrices, and lends itself toa number of high end programming structures when building complex 2D and 3Dgeometric transform engines using the Drawing API:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Your code can handle a number of different transformsin one pass of a transform function, rather than have to go through separatescale, rotate and move functions for example. This can lead to code efficiency.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>The size of the matrix defines the order of yourgeometric model (matrix math is effectively dimension independent; it canrepresent 9 dimensional space if you let it, so physicists and engineers loveit). If you are using modular code (or an OOP based approach), this means thatyour function routines can be efficiently changed from 2D to 3D, or madegeneral so that they can handle either set of data (a feature that programmerscall <i>polymorphism</i>, but as a designer you can remember it as &quot;once Ihave built my 2D draw program I can quickly modify it to a 3D draw program if Iuse matrix math&quot;).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>As you can see, using matrix math is not just a feature ofthe gradient fill method, but it can also be used in the more general <spanclass=Code><span style='font-family:Courier'>MovieClip.moveTo</span></span> and<span class=Code><span style='font-family:Courier'>MovieClip.lineTo</span></span>methods as well as <span class=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>to create a more general fill engine. There is more on this in the <i>Tips andprecautions</i> section.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To use a true matrix as the <i>matrix </i>argument in <spanclass=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>,we have to specify a 3x3 matrix of the form shown below:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>a</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>b</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>c</p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>d</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>e</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>f</p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>g</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>h</p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>i</p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To create the matrix, simply add these values asproperties of our <i>matrix </i>argument. This must:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-.25in;'><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Be an <span class=Code><span style='font-family:Courier'>Object</span></span>object</p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-.25in;'><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span>Have properties <span class=Code><spanstyle='font-family:Courier'>a</span></span>to <span class=Code><spanstyle='font-family:Courier'>i</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=79 height=141src="../png/0586_dict8e_29.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>So what do these values actually do? Well, they are notvalues that do one thing; you cannot say what <i>d </i>does because it doesdifferent things depending on how the rest of the matrix is set up. We willfirst look at how to set up the box transform using the True matrix, and thenshow how to use a True matrix to create the other Affines. </p><h4>Box transform as a matrix</h4><p class=MsoBodyText>We can easily create a box transform (that doesn’t includerotation, <span class=Code><span style='font-family:Courier'>r</span></span>)as follows:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=400 height=166src="../png/0586_dict8e_30.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You also have to set <i>I </i>to 1. This means that the following   example (<ahref="../fla/movieclip.bgradfill05.fla">movieclip.begingradientfill05.fla</a>   and <a href="../swf/movieclip.bgradfill05.swf">movieclip.begingradientfill05.swf</a>   ):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//define the beginGradientFill parameters...</span></span></p><p class=MsoBodyText><span class=Code><b><span style='font-family:Courier'>matrix= {matrixType:&quot;box&quot;, x:0, y:0, w:550, h:100, r:0};</span></b></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colors= [0xFF0000, 0xFFFF00];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>alphas= [100, 100];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ratios= [0, 255];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//create a clip to put our graphics in..</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.createEmptyMovieClip(&quot;clip&quot;,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// drawour shap and fill it;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineStyle(0,0, 100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.beginGradientFill(&quot;linear&quot;,colors, alphas, ratios, matrix);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.moveTo(0,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(550,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(550,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(0,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.endFill();</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>can be easily changed to the corresponding True matrixversion by changing the matrix definition to:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:550, b:0, c:0, d:0, e:100, f:0, g:275, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>As we shall see in a moment, we have done this bycombining the <i>scale Affine </i>and the <i>translate Affine. </i>Notice thatthe True matrix defines the registration of the bounding box at its <i>center </i>notthe corner. This makes it very useful for rotation.</p><h4>Affine Transforms with True Matrices</h4><p class=MsoBodyText>A transform matrix transforms all the points in a gradientor 2D (or 3D) shape by mutiplication with a number of standard&quot;shapes&quot; of the 3x3 matrix. We will back it all up with examples atthe end.</p><h4>Unit Transform</h4><p class=MsoBodyText>The unit matrix creates a &quot;base&quot; matrix thatdoes nothing to the gradient. You end up with a gradient bounding box that isat (0,0) and 1 pixel square. Not very useful, but you need it in creating allthe other matrices. It looks like this:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:0, c:0, d:0, e:1, f:0, g:0, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>We have already added the unit transform to all thetransforms following, this works out as simply changing any zero diagonal valueto 1.</p><h4>Scale transform</h4><p class=MsoBodyText>To scale by an amount <span class=Code><spanstyle='font-family:Courier'>sX</span></span> and <span class=Code><spanstyle='font-family:Courier'>sY</span></span> in the x and y direction, you usethe following:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>sX</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>sY</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:sX, b:0, c:0, d:0, e:sY, f:0, g:0, h:0, i:1};</span></span></p><h4>Rotation transform</h4><p class=MsoBodyText>To rotate the gradient by an angle <span class=Code><spanstyle='font-family:Courier'>r</span></span>you use this, noting thatyou can get sin and cos via <span class=Code><span style='font-family:Courier'>Math.sin</span></span>and <span class=Code><span style='font-family:Courier'>Math.cos</span></span>:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=59 valign=top style='width:44.3pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>cos r</span></span></p>  </td>  <td width=49 valign=top style='width:36.9pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>sin r</span></span></p>  </td>  <td width=48 valign=top style='width:.5in;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=59 valign=top style='width:44.3pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>-sin r</span></span></p>  </td>  <td width=49 valign=top style='width:36.9pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>cos r</span></span></p>  </td>  <td width=48 valign=top style='width:.5in;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=59 valign=top style='width:44.3pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=49 valign=top style='width:36.9pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=48 valign=top style='width:.5in;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cosR=Math.cos(r);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>sinR =Math.sin(r);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:cosR, b:sinR, c:0, d:-sinR, e:cosR, f:0, g:0, h:0, i:1};</span></span></p><h4>Translation (move) transform</h4><p class=MsoBodyText>To move the center of the gradient or (<span class=Code><spanstyle='font-family:Courier'>x</span></span>, <span class=Code><spanstyle='font-family:Courier'>y</span></span>), you use this:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>x</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>y</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:0, c:0, d:0, e:1, f:0, g:x, h:y, i:1};</span></span></p><h4>Skew (shear) transform</h4><p class=MsoBodyText>To skew a gradient by an amount <span class=Code><spanstyle='font-family:Courier'>hS</span></span>in the horizontal directionyou use this:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>hS</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:hS, c:0, d:0, e:1, f:0, g:0, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To skew a gradient by an amount <span class=Code><spanstyle='font-family:Courier'>vS</span></span>in the vertical directionyou use this:</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>vS</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:0, c:0, d:vS, e:1, f:0, g:0, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>You canalso skew in both directions with a single transform:</span></span></p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;'> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>hS</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>vS</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td> </tr> <tr>  <td width=36 valign=top style='width:27.2pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>0</span></span></p>  </td>  <td width=36 valign=top style='width:27.0pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText align=center style='margin-left:0in;text-align:center'><span  class=Code><span style='font-family:Courier'>1</span></span></p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:hS, c:0, d:vS, e:1, f:0, g:0, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>Theseforms skew by a number of pixels. You can also skew by an angle, but we willleave that one for now.</span></span></p><h3>Examples and practical uses</h3><p class=MsoBodyText>Have a look at the following example (<ahref="../fla/movieclip.bgradfill06.fla">movieclip.begingradientfill06.fla</a>   and <a href="../swf/movieclip.bgradfill06.swf">movieclip.begingradientfill06.swf</a>   ):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.createEmptyMovieClip(&quot;clip&quot;,0);</span></span></p><p class=MsoBodyText><span class=Code><b><span style='font-family:Courier'>matrix= {a:1, b:0, c:0, d:0, e:1, f:0, g:0, h:0, i:1};</span></b></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colors= [0xFFFFFF, 0x00];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>alphas= [100, 100];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ratios= [0, 255];</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip._x= clip._y=200;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineStyle(0,0, 100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.beginGradientFill(&quot;radial&quot;,colors, alphas, ratios, matrix);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.moveTo(0,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(100,0);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(100,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.lineTo(0,100);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clip.endFill();</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Looking at the definition, this <i>should </i>create aradial gradient that goes from back to white:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=218 height=255src="../png/0586_dict8e_31.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>but we actually get this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is not good, but why does it happen? Well, we’reusing the unit matrix, which gives us a unit gradient of 1 pixel!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>We need to scale it. Looking at the scale transformmatrix, we have to change <span class=Code><span style='font-family:Courier'>a</span></span>and <span class=Code><span style='font-family:Courier'>e</span></span>:</p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {<b>a:100</b>, b:0, c:0, d:0, <b>e:100</b>, f:0, g:0, h:0, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=208 height=208src="../png/0586_dict8e_33.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is better, but we are in the top left corner. It'stime to add a translation by adding a move offset to <span class=Code><spanstyle='font-family:Courier'>g</span></span>and <span class=Code><spanstyle='font-family:Courier'>h</span></span>:</p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:1, b:0, c:0, d:0, e:1, f:0, <b>g:50</b>, <b>h:50</b>, i:1};</span></span></p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><img border=0 width=208 height=208src="../png/0586_dict8e_34.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Better again. Finally, we add a little skew:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>matrix= {a:100, <b>b:50</b>, c:0, d:0, e:100, f:0, g:50, h:50, i:1};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This skews in the horizontal direction by 50 pixels:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=208 height=208src="../png/0586_dict8e_35.png"></p><p class=Picturereference>&nbsp;</p><h3>Tips and precautions</h3><p class=MsoBodyText>We haven’t included rotation in the True matrix examplesbecause it requires a bit more understanding of how to combine matrices; youhave to know how to multiply out a matrix, which is beyond the scope of thisdictionary entry. If you want to know, the information is readily available onthe Internet You will hopefully realize that we have talked you through the verybasics here, as the next piece below implies.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>A transform matrix does not of course work with justfills. You can set up a drawing engine that uses the same transform matrix asyou use with <span class=Code><span style='font-family:Courier'>beginGradientFill</span></span>,but applies to the points of your shape. This means that your <i>gradient willmove as</i> if it were mapped onto the shape itself.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The fact that you can add skews when using a True matrixwith <span class=Code><span style='font-family:Courier'>MovieClip.beginGradientfill</span></span>is the mother lode. If you skew both horizontally and vertically and also scalein the horizontal directions you end up with a shape with particularproperties: <i>it can be used to represent a 2D fill that is being transformedas if it were mapped to a 3D surface:</i></p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><img border=0 width=400 height=321src="../png/0586_dict8e_13.png"></p><p class=Picturereference>&nbsp;</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you can build a 3D engine that can work with perspectivefree 3D points (an <i>orthographic projection</i>), then <span class=Code><spanstyle='font-family:Courier'>MovieClip.beginFill</span></span> can automaticallyscale your face fill textures as if they were mapped to your 3D shape. Becausegradient fills can be textures that map from light to dark versions of the samecolor, you have the beginnings of light-sourced 3D here!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>HINT–</span></span> The fact that Affines are not perspective transforms isn’t anissue if you want to build a 3D engine that shows perspective. You can actuallyget away with using linear gradients as long as they are parallel with theperspective of your view, as shown below. A perspective 3D engine withlight-sourcing is possible using <span class=Code><span style='font-family:Courier'>MovieClip.beginGradientFill</span></span>, <span class=Code><spanstyle='font-family:Courier'>MovieClip.lineTo</span></span>, <span class=Code><spanstyle='font-family:Courier'>MovieClip.moveTo</span></span> and <spanclass=Code><span style='font-family:Courier'>MovieClip.endFill</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=564 height=315src="../png/0586_dict8e_36.png"><b></b></p><p class=MsoBodyText>&nbsp;</p>