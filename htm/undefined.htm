<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc16343119">undefined</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>undefined</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Compatible with <span class=ImportantWord><spanstyle='font-family:Helvetica'>Flash Player 5 and later</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>keyword </span>indicates an unassigned value</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>undefined</span></span><span class=ImportantWord><span style='font-family:Helvetica'>keyword</span></span>is result of a query that has no value. For example, a variablethat has not been assigned a value has a value of undefined.</p><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>keyword </span>indicates no value has been set. This is often the casewith variable that have not been given a value, either directly or through thefailure of some method. For example:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myResult= Math.max(5);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>will not evaluate the maximum value properly because thereneeds to be two parameters in the method. Therefore, the method does not returna value, and <span class=Code><span style='font-family:Courier'>myResult</span></span>will be undefined (if it did not have a value prior to this statement). Methodscan have an undefined result, too. A conversion of a value that is <spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>results in an empty string.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Apart from debugging, </span><spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>is sometimes used in advanced coding techniques associated with setting up baseprototypes or other definitions that can be defined by several instances, butonly needs to run once.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>undefined</span></span><span class=Code> value can tellyou whether a variable or object has already been defined or not. Assuming thevariable </span><span class=Code><span style='font-family:Courier'>firstRun</span></span><span class=Code>has not yet been defined, the following codewill run once:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(firstRun == undefined) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   firstRun = true;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // add code that you want to execute oncehere</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the example <a href="../fla/undefined.fla">undefined.fla</a>and <a href="../swf/undefined.swf">undefined.swf</a> .</p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>This is particularly important in advancedprogramming (such as writing components that rely on user defined Objectprototype definitions). In such cases, you may have more than one instance of acomponent, each of which needs to know whether or not the base prototypedefinitions have already been defined by another instance. You know if theprototypes have not yet been defined because they will then be undefined, andyou can test for this:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>#initclip</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// do Ineed to define the prototype myProtoChain?</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(myProtoChain == undefined) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   //def = def+1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   myProtoChain = function () {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      this.defineProperties = function() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>         this.prop1 = 23;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>         this.prop2 = &quot;red&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      };</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      this.method1 = function() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>         // define method i</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      };</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      this.method2 = function() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>         // define method 2</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      };</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      this.defineProperties();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   };</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>#endinitclip</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// Basedefinitions complete...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//other code goes here</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>Line 3 will check to see if the base objectprototype(s) that the component relies on have been defined yet. If they havenot, then this particular instance will perform the definition, and theprototype </span><span class=Code><span style='font-family:Courier'>myProtoChain</span></span><span class=Code>will become defined. Other componentinstances will also make the same check, but will realize that the prototypehas already been defined, and so will not run their Object definition code.</span></p><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>keyword is similar to </span><span class=Code><span style='font-family:Courier'>null</span></span><span class=Code> and indicates no value or result. </span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>You can apply undefined to <i>any object </i>aswell as variables. This has some interesting implications because you canundefine a number of other things that do not initially appear to be objects.The most useful example of this is the Flash 6 event handler definition, whichis actually a reference to a function object. If you set up an event such asthe one below;</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myClip.onEnterFrame= function(){</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;hello!&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>you can undefine it as follows:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myClip.onEnterFrame= undefined;</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Advanced users will see from this a majorimplication and usefulness of </span><span class=Code><spanstyle='font-family:Courier'>undefined</span></span><span class=Code>; it is auseful value to set something to because it will delete the thing you assign itto! If you set something to any other value, the object may stop working, <i>butwill still exist.</i></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>can be useful in streaming applications, where the execution of particular codesegments may depend on things beyond your control (such as bandwidthconstraints). Although you can usually tell if a movie clip has loaded in ornot (by looking at whether the first keyframe it appears on has loaded in ornot) you can't always be as sure with code; it may have loaded in, but it maynot yet have run. Consider the following code:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// I dosomething very important...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  ...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// Ihave finished doing my important thing...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>doneImportant= true;</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>If another part of your Flash presentation needsto know if the &quot;something very important&quot; has been set up, you can doso by looking at whether the variable <i>done </i>is undefined or not:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(doneImportant == undefined){</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // important thing not done yet!</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>Such a system uses a dummy variable as a <i>flag</i>.If the flag is defined, then you know that the section of code that defined ithas executed.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>It is important to be aware of the differencebetween </span><span class=Code><span style='font-family:Courier'>null</span></span><spanclass=Code>and </span><span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>.Lets take the following code:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>var a =null;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(a);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(b);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>This code defines a variable, </span><spanclass=Code><span style='font-family:Courier'>a</span></span><span class=Code>, with a </span><spanclass=Code><span style='font-family:Courier'>null</span></span><spanclass=Code>value. It then sends the values of </span><span class=Code><spanstyle='font-family:Courier'>a</span></span><span class=Code> and </span><spanclass=Code><span style='font-family:Courier'>b</span></span><span class=Code> to the Outputwindow. Because </span><span class=Code><span style='font-family:Courier'>a</span></span><spanclass=Code>has been defined, but has a null value, it sends </span><spanclass=Code><span style='font-family:Courier'>null</span></span><spanclass=Code>to the </span><span class=ScreenText><span style='font-family:Optima'>Output</span></span><spanclass=Code>window. But because </span><span class=Code><span style='font-family:Courier'>b</span></span><span class=Code> hasn't been defined, </span><spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>is sent to the </span><span class=ScreenText><span style='font-family:Optima'>Output</span></span><span class=Code> window. So basically, a variable is </span><spanclass=Code><span style='font-family:Courier'>null</span></span><spanclass=Code>when it has a value, but that value is undefined or not set, and a variable is </span><spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>when it doesn't exist or hasn't been defined.</span></p>