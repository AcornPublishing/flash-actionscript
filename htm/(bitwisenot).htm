<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>~ bitwise NOT</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = ~a; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>a </span></span>is a number. <span class=Code><span style='font-family:Courier'>b </span></span>will be returned as the twos-complement (signed binary representation) of <spanclass=Code><span style='font-family:Courier'>a, </span></span>which isnumerically equal to <span class=Code><span style='font-family:Courier'>-a. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The bitwise NOT operator is <b>compatible with Flash 5 or later</b>. It returns the binary equivalentof <span class=Code><span style='font-family:Courier'>-a.</span></span><i> </i><span class=Code><spanstyle='font-family:Courier'>b </span></span><span class=ImportantWord><spanstyle='font-family:Helvetica'>will be returned as the twos complement of </span></span><spanclass=Code><span style='font-family:Courier'>a, </span></span>and is calculatedas follows:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1 style='margin-left:.5in;text-indent:-.25in;'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Convert <span class=Code><span style='font-family:Courier'>a </span></span>to an unsigned 32 binary number</p><p class=MsoBodyText style='margin-left:.5in;text-indent:-.25in;'>2.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Replaceall the ‘<span class=Code><span style='font-family:Courier'>1 </span></span>’swith ‘<span class=Code><span style='font-family:Courier'>0 </span></span>’s andall the ‘<span class=Code><span style='font-family:Courier'>0 </span></span>’swith ‘<span class=Code><span style='font-family:Courier'>1 </span></span>’s</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In terms of decimal numbers, this is the same as takingthe negative value of <span class=Code><span style='font-family:Courier'>a </span></span>and then subtracting <span class=Code><spanstyle='font-family:Courier'>1. </span></span>Bitwise NOT has little or noapplication in Motion graphics (or modern programming generally) when youconsider its normal application (twos compliment addition) because we now havethe ability to work directly with decimal numbers.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Don’tconfuse bitwise NOT with ! Logical NOT. The latter is the version you willalmost always use, because it works with Booleans, whereas bitwise NOT doesn’t. </span></span></p><h3>Description</h3><p class=MsoBodyText>Bitwise NOT (or more correctly, the twos complement of anumber) is the way binary deals with signed numbers. Since digital systems areso stupid they can only add numbers, the cleverer humans have worked out a wayof fooling computers into doing subtraction. This works by adding a binarypattern that gives results as if it were a negative number. This binary patternis the twos complement, and is what you get from bitwise NOT. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Signed 32 bit binary numbers are represented as a 32 bitunsigned number <i>except </i>that the mostsignificant bit represents -2<sup>31</sup> rather than 2<sup>31</sup> as innormal unsigned binary. For the sake of a quick example, assume a 4 bit numberinstead of the full 32 bit number Flash actually uses. Then <span class=Code><spanstyle='font-family:Courier'>6 </span></span>is represented in binary as:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>0110 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>because <span class=Code><span style='font-family:Courier'>(0* 23) + (1 * 22) + (1 * 21) + (0 * 20) = 4 + 2 = 6 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Now, in a <span class=ImportantWord><spanstyle='font-family:Helvetica'>signed </span></span>binary representation, we have the most significant bit being <spanclass=ImportantWord><span style='font-family:Helvetica'>negative, </span></span>so to represent <span class=Code><spanstyle='font-family:Courier'>-6 </span></span>we have to use <span class=Code><spanstyle='font-family:Courier'>-8, </span></span><span class=Code><spanstyle='font-family:Courier'>4, </span></span><span class=Code><spanstyle='font-family:Courier'>2 </span></span>and <span class=Code><spanstyle='font-family:Courier'>1. </span></span>Now <span class=Code><spanstyle='font-family:Courier'>-6 = -8 + 2 </span></span>or in our signed binaryformat:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>1010 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Now here’s the clever bit. <span class=Code><spanstyle='font-family:Courier'>6 = 0110 </span></span>and <span class=Code><spanstyle='font-family:Courier'>-6 = 1010. </span></span>To get from <spanclass=Code><span style='font-family:Courier'>0110 </span></span>to <spanclass=Code><span style='font-family:Courier'>1010 </span></span>is simple; justdo the following:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1 style='margin-left:.5in;text-indent:-.25in;'>1.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Changeall the ‘<span class=Code><span style='font-family:Courier'>1 </span></span>’sto ‘<span class=Code><span style='font-family:Courier'>0 </span></span>’ andvice versa, so <span class=Code><span style='font-family:Courier'>0110 </span></span>becomes <span class=Code><span style='font-family:Courier'>1001. </span></span></p><p class=MsoBodyText style='margin-left:.5in;text-indent:-.25in;'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Next, add <span class=Code><span style='font-family:Courier'>1. </span></span>This gives us <span class=Code><span style='font-family:Courier'>1010. </span></span>Bingo!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>(Note that you cannot tell the difference between a signedand unsigned binary bit pattern just by looking at them – you have to knowwhich one you are using.)</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is what bitwise NOT gives us, but in decimal form.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Okay, so we have <span class=Code><span style='font-family:Courier'>6 </span></span>and <span class=Code><span style='font-family:Courier'>-6. </span></span>Adding these together should give us <span class=Code><span style='font-family:Courier'>0 </span></span>…</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='margin-left:.45in; border-collapse:collapse;'> <tr> <td width=24 valign=top style='width:.25in;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=96 valign=top style='width:1.0in;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>01 </span></span></p>  <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>10 </span></span></p>  </td> </tr> <tr> <td width=24 valign=top style='width:.25in;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText align=right style='text-align:right'>+</p>  </td>  <td width=96 valign=top style='width:1.0in;border:none;border-bottom:solid windowtext .5pt;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>10 </span></span></p>  <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>10 </span></span></p>  </td> </tr> <tr> <td width=24 valign=top style='width:.25in;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=96 valign=top style='width:1.0in;border:none;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText align=right style='text-align:right'><sup>1</sup><span  class=Code><span style='font-family:Courier'>0 </span></span></p>  <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>00 </span></span></p>  <p class=MsoBodyText align=right style='text-align:right'><span class=Code><span  style='font-family:Courier'>0 </span></span></p>  </td> </tr></table><p class=MsoBodyText> </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>It actually gives us <span class=Code><spanstyle='font-family:Courier'>10000, </span></span>but if we ignore the carry 1at the end that takes us from a 4 bit number to a 5 bit one, we end up with <spanclass=Code><span style='font-family:Courier'>0000. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is how signed binary works. For a 32 bit number, anycarry to the 33<sup>rd</sup> bit is ignored (well, actually, the processor usesthis carry to tell it something about the sum that has just occurred, but sinceFlash doesn’t make it available to us, we will ignore it).</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:5.4pt; border-collapse:collapse;border:none;'> <tr> <td width=348 valign=top style='width:261.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=348 valign=top style='width:261.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = ~6; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = ~(-3); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = ~0 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = (-1 * (6+1)) = -7 </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = (-1 * (-3+1)) = 2 </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = (-1 * (0+1)) = -1 </span></span></p>  </td> </tr> <tr> <td width=348 valign=top style='width:261.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = ~true </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = ~false </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = -2 </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = -1 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>true </span></span> is converted to <span class=Code><span style='font-family:Courier'>1 </span></span> and <span class=Code><span style='font-family:Courier'>false </span></span>to <span class=Code><span style='font-family:Courier'>0 </span></span>as 32 bit unsigned numbers, and the twos complement of these is <span class=Code><span  style='font-family:Courier'>-2 </span></span>and <span class=Code><span  style='font-family:Courier'>-1 </span></span>respectively. Note that <span  class=Code><span style='font-family:Courier'>~true </span></span>is <span  class=ImportantWord><span style='font-family:Helvetica'>not </span></span><span class=Code><span  style='font-family:Courier'>false </span></span>and <span class=Code><span  style='font-family:Courier'>~false </span></span>is <span  class=ImportantWord><span style='font-family:Helvetica'>not </span></span><span class=Code><span  style='font-family:Courier'>true. </span></span>Do not confuse <span  class=Code><span style='font-family:Courier'>~ </span></span>with <span  class=ImportantWord><span style='font-family:Helvetica'>! </span></span>(<span  class=ImportantWord><span style='font-family:Helvetica'>Logical NOT </span></span>)</p>  <p class=MsoBodyText> </p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>There are very few widespread practical applications forbitwise NOT in motion graphics. Here are a couple of leads into potentialapplications. Bitwise operators generally do have some applications in other fields,such as simple data encryption, and you may find uses in it for that. A colorwill stand out from a bitwise NOT’ed version of it. This is a good way ofdefining a color that will stand out from a solid background if you do not knowwhat that background color will be during author time. See the example files, <ahref="../fla/(bitwisenot).fla">(bitwisenot).fla</a>and <a href="../swf/(bitwisenot).swf">(bitwisenot).swf</a>.</p><h3>Tips and precautions</h3><p class=MsoBodyText>As noted above, make sure that you are aware of the differencebetween logical NOT and bitwise NOT. The former expects Booleans and the latterexpects numbers. Getting this wrong will usually result in an error. </p>