<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>| bitwise OR</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = a |b; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><spanstyle='font-family:Courier'>b </span></span>are numbers. <span class=Code><span style='font-family:Courier'>c </span></span>will be returned as the bitwise result.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This operator is <b>compatiblewith Flash 5 or later</b>. <span class=Code><span style='font-family:Courier'>| </span></span>will convert the values <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><spanstyle='font-family:Courier'>b </span></span>to 32 bit values, which in plain English means that <span class=Code><spanstyle='font-family:Courier'>c </span></span>will always be an integer. BitwiseOR’ing is more usually used in Flash when forming RGB colors, and <spanclass=Code><span style='font-family:Courier'>| </span></span>is thereforeassociated with <span class=ImportantWord><span style='font-family:Helvetica'>theColor object. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Note </span></span></p><p class=MsoBodyText>Using bitwise operators requires a good understanding ofbinary and hexadecimal, and this dictionary entry assumes this is the case. Itis, however, possible to use the color object without using bitwise OR. If youdo not understand either Binary or Hexadecimal, then you should instead use themethods of the color object, and in particular <span class=ImportantWord><spanstyle='font-family:Helvetica'>Color.setTransform. </span></span></p><h3>Description</h3><p class=MsoBodyText>A bitwise operation is performed at the bit (binary)level. Such operations are very processor efficient because they are close tothe low-level processes that digital computers use internally. The followingexample shows a bitwise OR operation.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>val = 6| 11 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The first thing we need to do is convert our two values, 6and 45, to 32 bit unsigned binary:</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>6 =       (0 * 231) + (0 * 230)…+ (0 * 23) + (1 *22) + (1 * 21) + (0 </span></span><span class=Code><span style='font-family:Courier'>*20) </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11 =      (0 * 231) + (0 * 230)…+ (1 * 23) + (0 *22) + (1 * 21) + (1 </span></span><span class=Code><span style='font-family:Courier'>*20) </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>6:  00000000000000000000000000000110 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11:00000000000000000000000000001011 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note that any decimal part of either value would beomitted in this conversion, so 11.456 would still convert to the same bitpattern as 11. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>A negative number <span class=Code><span style='font-family:Courier'>-a </span></span>as an unsigned bit pattern is simply <spanclass=Code><span style='font-family:Courier'>~a </span></span>(see entry for <spanclass=ImportantWord><span style='font-family:Helvetica'>~ bitwise NOT </span></span>).As we shall see below, the only real application of bitwise OR is with color,so OR’ing negative numbers in Motion graphics is probably not something youwill ever need to do. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Bitwise OR’ing looks at each bit position, and returns a 1if either operand has a 1 in that position. If both bit positions are 0, thenthe result will be 0:</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>6:   00000000000000000000000000000110 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11:  00000000000000000000000000001011 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>val:00000000000000000000000000001111 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The result is binary 1111 or 15 decimal.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Generally, bitwise OR is used with the color object, andvalues are expressed in hexadecimal (because it is more compact than binary).Expressed in this form, the example becomes:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>6:      0x000006 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11:     0x00000B </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>result:0x00000F </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The usefulness of OR and color is that OR’ing the threecolor components (<span class=Code><span style='font-family:Courier'>0xRR0000, </span></span><span class=Code><span style='font-family:Courier'>0x00GG00, </span></span><spanclass=Code><span style='font-family:Courier'>0x0000BB </span></span>) results inthe correct RGB value. For example, if we wanted to create a color with values:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>R = 240 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>G = 90 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>B = 200 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>We would:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1>1.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Convertall our values to Hex:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>R =0xF0 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>G =0x5A </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>B =0xC8 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1>2.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>Shiftthe values to place each in the correct position:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>R = R*0x10000 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>G = G*0x100 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>B (nochange needed) </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1>3.<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span>OReach component to reach the final RGB value:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colValue=(R*0x10000) | (G*0x100) | (B) </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following code will give you the final RGB colorvalue:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>R =240; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>G = 90; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>B =200; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>colValue= (R*0x10000) | (G*0x100) | (B); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(colValue); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The value returned, <span class=Code><spanstyle='font-family:Courier'>15751880, </span></span>is <span class=Code><spanstyle='font-family:Courier'>0xF05AC8 </span></span>in hex, and you can doublecheck this by putting the initial decimal values into the Color Mixer:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=218 height=255src="../png/0586-dict2-06.png"></p><p class=MsoBodyText><b></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The final Hex value is shown at the bottom left of themaximized window.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Note </span></span>the two different ways of denoting a hexadecimal value:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>The Flash interface precedes hex values with ‘<spanclass=Code><span style='font-family:Courier'># </span></span>’. This is theformat used by HTML web design.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Flash ActionScript precedes hex values with ’<spanclass=Code><span style='font-family:Courier'>0x </span></span>’ (zero-x). Thisis in line with JavaScript (amongst other programming languages, all of whichtend to use this form).</p><p class=MsoBodyText> </p><p class=MsoBodyText>See also <span class=ImportantWord><span style='font-family:Helvetica'>Color.getRGB(), </span></span><span class=ImportantWord><spanstyle='font-family:Helvetica'>Color.setRGB(), </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Color.getTransform(), </span></span><span class=ImportantWord><span style='font-family:Helvetica'>color.setTransform(). </span></span></p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:5.4pt; border-collapse:collapse;border:none;'> <tr> <td width=318 valign=top style='width:238.65pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=222 valign=top style='width:166.35pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=318 valign=top style='width:238.65pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 2; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = 3; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = a | b; </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=222 valign=top style='width:166.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = 3 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=318 valign=top style='width:238.65pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = 0xCC0000 | 0x00AA00 | 0x000055; </span></span></p>  </td>  <td width=222 valign=top style='width:166.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c </span></span> will be returned as <span class=Code><span style='font-family:Courier'>13412949 </span></span> (decimal) or <span class=Code><span style='font-family:Courier'>0xCCAA55 </span></span> (hex).</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=318 valign=top style='width:238.65pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>if (x | y){</p>  <p class=MsoPlainText>  //do this</p>  <p class=MsoPlainText>}</p>  <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=222 valign=top style='width:166.35pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Although bitwise OR works much the same as logic OR, you are recommended to <span class=ImportantWord><span style='font-family:Helvetica'>use Logical OR (||) </span></span>in situations such as this example (decision making).</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=318 valign=top style='width:238.65pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText>value = “dog” | ”cat”;</p>  </td>  <td width=222 valign=top style='width:166.35pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Bitwise logic assumes that the input values can be converted to numbers. The result is meaningless if this is not the case. </p>  <p class=MsoBodyText> </p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>There are no other real Motion graphics applications of Bitwise   OR other than with the Color object. Even when using the Color object, you can   avoid using bitwise operators by using the methods of the Color object. The   example files, <a href="../fla/(bitwiseor).fla">(bitwiseor).fla</a> and <a href="../swf/(bitwiseor).swf">(biswiseor).swf</a>,   however, shows how bitwise OR’ing can be used to set the color of a movie clip   via a R, G and B slider.</p><h3>Tips and precautions</h3><p class=MsoBodyText>Bitwise OR’ing a value with 0 was a very efficient way ofremoving the decimal part of a value in the old days of programming, but youwill find that using <span class=ImportantWord><span style='font-family:Helvetica'>MathFloor </span></span>is just as fastin Flash:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 0 |a; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>will for example return <span class=Code><spanstyle='font-family:Courier'>b </span></span>as <span class=Code><spanstyle='font-family:Courier'>2 </span></span>if <span class=Code><spanstyle='font-family:Courier'>a = 2.3456789, </span></span>but the following lineis much easier on the eye and mind:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b =Math.round(a); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note also:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a | b =b | a </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a |0xFFFFFFFF = 0xFFFFFFFF </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a | 0 =a </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>-a | b= ~a | b </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The last expression is true because when converted tounsigned binary, -a = ~a. For more information about <span class=ImportantWord><spanstyle='font-family:Helvetica'>~ (bitwise NOT) </span></span>see the entry for <spanclass=ImportantWord><span style='font-family:Helvetica'>~. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>OR’ing two values, one of which is <spanclass=ImportantWord><span style='font-family:Helvetica'>undefined, </span></span>will result in a <span class=ImportantWord><span style='font-family:Helvetica'>defined </span></span>value. For example, in the code below, <span class=Code><span style='font-family:Courier'>c = 10. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 10; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b =undefined; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = a |b; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(c); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The fact that <span class=Code><span style='font-family:Courier'>b </span></span>is <span class=Code><span style='font-family:Courier'>undefined </span></span>is hidden from you, and tracking thisdown if the undefined value has appeared in error (as is usually the case) canbe difficult.</p>