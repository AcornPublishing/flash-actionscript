<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>super</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>super([arg1,...., argn]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>super.method([arg1,...., argn]); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where the <span class=Code><span style='font-family:Courier'>super </span></span>method of the method currently being executed will be executed with thearguments <span class=Code><span style='font-family:Courier'>arg1 </span></span>through <span class=Code><span style='font-family:Courier'>argn </span></span>being passed.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Compatiblewith Flash 6 and above. </span></span>There are no known issues with anyversion of Flash that supports this operator.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The subclass method is used to execute the method of the <spanclass=Code><span style='font-family:Courier'>superclass </span></span>function.The following code presents the <span class=Code><span style='font-family:Courier'>superclass </span></span><span class=Code><span style='font-family:Courier'>apples </span></span>and the<span class=Code><span style='font-family:Courier'>subclass </span></span><spanclass=Code><span style='font-family:Courier'>oranges. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//define the superclass </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionapples(typeOfApple) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> this.appleType = typeOfApple; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//define the wichType method </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>apples.prototype.whichType= function () { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> trace(this.appleType); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//define the oranges class </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionoranges(typeOfOrange) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> this.orangeType = typeOfOrange; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// makeoranges extend apples (the superclass) </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>oranges.prototype= new apples(&quot;nonApple&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//create an instance of the orange class (subclass) </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>orange= new oranges(&quot;sunOrange&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// whattype of fruit and apple are we? </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>orange.whichType(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>apple =new apples(&quot;red&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>apple.whichType(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code>In the code above, the </span><spanclass=Code><span style='font-family:Courier'>apples </span></span><spanclass=Code>class is defined with a method named </span><span class=Code><spanstyle='font-family:Courier'>whichType.</span></span><span class=Code> When the </span><spanclass=Code><span style='font-family:Courier'>oranges </span></span><spanclass=Code>class is defined, it also extends the </span><span class=Code><spanstyle='font-family:Courier'>apples </span></span><span class=Code>class with theline </span><span class=Code><span style='font-family:Courier'>oranges.prototype= new apples(&quot;nonApple&quot;);.</span></span><span class=Code> The </span><spanclass=Code><span style='font-family:Courier'>oranges </span></span><spanclass=Code>class automatically inherits the </span><span class=Code><spanstyle='font-family:Courier'>whichType </span></span><span class=Code>method fromthe </span><span class=Code><span style='font-family:Courier'>apples </span></span><spanclass=Code>class. However, add the following code to the code above and you’ll see thatthe </span><span class=Code><span style='font-family:Courier'>oranges </span></span><spanclass=Code>class now extends the </span><span class=Code><span style='font-family:Courier'>whichType </span></span><span class=Code>method of the </span><spanclass=Code><span style='font-family:Courier'>apples </span></span><spanclass=Code>class. Test the movie with the new code and you’ll see the extra </span><spanclass=Code><span style='font-family:Courier'>trace </span></span><spanclass=Code>call. See </span><span class=ImportantWord><span style='font-family:Helvetica'>prototype.</span></span><span class=Code></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>oranges.prototype.whichType= function () { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> // trace(this.orangeType); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> super.whichType(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><h3>Description</h3><p class=MsoBodyText>Calls the method with the same name, if it exists of the <spanclass=Code><span style='font-family:Courier'>superclass. </span></span></p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=360 valign=top style='width:270.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=192 valign=top style='width:2.0in;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=360 valign=top style='width:270.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><br> function superClass() { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>superClass.prototype.method = function () { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> trace(&quot;superClass.method&quot;); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function subClass() { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>subClass.prototype = new superClass(); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>subClass.prototype.method = function () { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> trace(&quot;subClass.method&quot;); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'> super.method(); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>instance = new subClass(); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>instance.method(); </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=192 valign=top style='width:2.0in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Will send the following code to the Output window:</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>subClass.method </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>superClass.method </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The <span class=Code><span  style='font-family:Courier'>superClass </span></span>is created with a method named method. The <span class=Code><span style='font-family:Courier'>subClass </span></span> then extends the <span class=Code><span style='font-family:Courier'>superClass </span></span> class and extends the <span class=Code><span style='font-family:Courier'>method </span></span> method of the <span class=Code><span style='font-family:Courier'>superClass. </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><h4>Inheritance</h4><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>super </span></span>method allows you to extend a class and more importantly a super classesmethods, while still keeping the original super methods in tact (if necessary).This allows us to extend methods not just classes. The example <ahref="../fla/super.fla">super.fla</a>/ <a href="../swf/super.swf">super.swf</a>takes a class named <span class=Code><span style='font-family:Courier'>boxClass </span></span>which adds a box to stage and positions it based on the passed parameter. Asubclass is then created, named <span class=Code><span style='font-family:Courier'>colorBoxClass, </span></span>which extends the <span class=Code><span style='font-family:Courier'>boxClass </span></span>by allowing you to change the boxes color once it has been placed on the stage.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>super </span></span>method is excellent for adding functionality to a class with the need tore-write the entire class from scratch.</p><h3>Tips and precautions</h3><p class=MsoBodyText>When extending a method of a super class, you don’t needto use the super classes method. Only use it if you need to keep the superclasses method intact. In the example file above we did need to the keep thesuper classes method in tact so the boxes would still be added to the stage.However, my removing the <span class=Code><span style='font-family:Courier'>super.newBox(xpos,ypos); </span></span>line we can overwrite the super classes <span class=Code><spanstyle='font-family:Courier'>newBox </span></span>method and add our own ways toattach a box to the stage.</p>