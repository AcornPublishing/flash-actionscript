<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc15970076">XML</a></h1><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>newXML([source]);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>Compatible with <span class=ImportantWord><spanstyle='font-family:Helvetica'>Flash Player 5 and above</span></span><spanclass=Code>. This constructor is used </span><spanclass=ImportantWord><span style='font-family:Helvetica'>to create a new XMLobject, instance</span></span><span class=Code>, into which XMLdata structures are loaded or created and then processed into usableinformation for a Flash movie. The </span><span class=Code><spanstyle='font-family:Courier'>source</span></span><span class=Code> argument refers to an optional string of well-formed XML data.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object handles XML documents and document trees. <span lang=EN-US> XML stands for <i>e</i></span><span class=ImportantWord><span style='font-family:Helvetica'>x</span></span><i><span lang=EN-US> tensible </span></i><span class=ImportantWord><span style='font-family:Helvetica'>m</span></span><i><spanlang=EN-US>arkup </span></i><spanclass=ImportantWord><span style='font-family:Helvetica'>l</span></span><i><span lang=EN-US> anguage</span></i><span lang=EN-US>, andit is a language used to describe </span><span class=ImportantWord><spanstyle='font-family:Helvetica'>relationships between data</span></span><spanlang=EN-US> in a well-formed structure. This </span><spanclass=ImportantWord><span style='font-family:Helvetica'>tag based structure</span></span><spanlang=EN-US> is most useful when you have a lotof complex data which needs to be organized in a specific way. XML can bedynamically updated and modified by interface users, which is why it is called </span><spanclass=ImportantWord><span style='font-family:Helvetica'>extensible</span></span><spanlang=EN-US>. The structure can be modified byadding new content or even new tags, manually or dynamically, even in Flash! </span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> You areable to transfer and load data between a structure and a Flash movie using XML.This is </span><span class=ImportantWord><span style='font-family:Helvetica'>comparableto data transfer methods using the LoadVars object or loadVariables actions</span></span><spanlang=EN-US>. XML offers you a different, andwidely supported, way of organizing and using data with your movies. Onedefinite benefit of using XML is that the </span><span class=ImportantWord><spanstyle='font-family:Helvetica'>language is very intuitive, and relatively easy</span></span><spanlang=EN-US> to pick up.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> XMLsupport has been </span><span class=ImportantWord><span style='font-family:Helvetica'>significantly modified since Flash 5 in how structures are processedby the Player</span></span><span lang=EN-US>.The Flash Player 6 has inherent support for XML, written right into the player.Therefore, processing is much faster in the latest player than it was in Flash5 Player. If you are creating documents in Flash 5, you should be aware of codeout there which you can include in your movies to speed up parsing. Theseinclude &quot;XMLNitro&quot; and &quot;XML:ACK&quot; from </span><spanclass=MsoHyperlink><span style='font-family:Optima;color:blue'>http://chattyfig.figleaf.com</span></span><spanlang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Anotherimportant issue with XML is </span><span class=ImportantWord><spanstyle='font-family:Helvetica'>whitespace</span></span><span lang=EN-US>. You will need to strip any white spaces(carriage returns and so on) from XML structures, or Flash will treat them asnodes, thus making processing your data very difficult. Using the </span><spanclass=Code><span style='font-family:Courier'>XML.ignoreWhite = true</span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>you are able to removewhite spaces from movies played in the release 4.0 and later Flash Players</span></span><spanlang=EN-US>. If you want your movies compatiblewith earlier versions of the Flash 5 Player, you will need to manually removewhite space, or use the previously mentioned include files.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> A goodexample of XML files can be found in the configuration files of Flash itself,one of which you might find necessary to edit! If you open the </span><spanclass=Code><span style='font-family:Courier'>ASColorSyntax.xml</span></span><spanlang=EN-US> file within the Actions Panelfolder in your Flash MX directory, you will find a simple, well formed XML datastructure. This file controls what words are color-coded when you type in yourActionScript. You might want to edit this file if you find a part of theActionScript language not color coded in the Actions panel, by adding newelements and attributes. </span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Let's takea quick look at the structure of a typical XML document. Notice how elementsare </span><span class=ImportantWord><span style='font-family:Helvetica'>nested</span></span><spanlang=EN-US> within other elements, and </span><spanclass=ImportantWord><span style='font-family:Helvetica'>tags</span></span><spanlang=EN-US> are used to form the </span><spanclass=ImportantWord><span style='font-family:Helvetica'>tree-like structure</span></span><spanlang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&lt;linen-cupboard&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   &lt;shelf-one&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      &lt;towel color=&quot;red&quot;/&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      &lt;towel color=&quot;blue&quot;/&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   &lt;/shelf-one&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   &lt;shelf-two&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      &lt;sheet fabric=&quot;cotton&quot;/&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      &lt;sheet fabric=&quot;silk&quot;/&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   &lt;/shelf-two&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&lt;/linen-cupboard&gt;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> If wetook a look at this in a diagram, it would look like the following:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=766 height=469src="../png/0586_dict12_01.png"></span></p><p class=Picturereference><span lang=EN-US> </span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Note howeach element is related to another in a </span>parent/child relationship<spanlang=EN-US>. The </span><span class=Code><spanstyle='font-family:Courier'>&lt;linen-cuboard&gt;</span></span><spanlang=EN-US> is a </span><spanclass=ImportantWord><span style='font-family:Helvetica'>parent</span></span><spanlang=EN-US> to </span><span class=Code><spanstyle='font-family:Courier'>shelf-one</span></span><span lang=EN-US>  and </span><span class=Code><spanstyle='font-family:Courier'>shelf-two</span></span><span lang=EN-US>, and it is also the </span><spanclass=ImportantWord><span style='font-family:Helvetica'>root node</span></span><spanlang=EN-US> or </span><span class=Code><spanstyle='font-family:Courier'>firstChild</span></span><span lang=EN-US>  (in Flash). </span><span class=Code><spanstyle='font-family:Courier'>shelf-one</span></span><span lang=EN-US>  and </span><span class=Code><spanstyle='font-family:Courier'>shelf-two</span></span><span lang=EN-US>  are </span><span class=ImportantWord><spanstyle='font-family:Helvetica'>siblings</span></span><span lang=EN-US>  of one another, which all exist on the samelevel. You can navigate this level using </span><span class=Code><spanstyle='font-family:Courier'>previousSibling</span></span><span lang=EN-US>  and </span><span class=Code><spanstyle='font-family:Courier'>nextSibling</span></span><span lang=EN-US>. Both of the shelf nodes contain childrenelements, which are </span><span class=Code><span style='font-family:Courier'>towel</span></span><spanlang=EN-US> and </span><span class=Code><spanstyle='font-family:Courier'>sheet</span></span><span lang=EN-US>  nodes. Subsequently, the parent node (</span><spanclass=Code><span style='font-family:Courier'>parentNode</span></span><spanlang=EN-US>) of the </span><span class=Code><spanstyle='font-family:Courier'>towel</span></span><span lang=EN-US>  nodes is </span><span class=Code><spanstyle='font-family:Courier'>shelf-one</span></span><span lang=EN-US>, and the parent of the </span><spanclass=Code><span style='font-family:Courier'>sheet</span></span><spanlang=EN-US> nodes is </span><span class=Code><spanstyle='font-family:Courier'>shelf-two</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> If wechanged the structure to include text nodes, perhaps instead of attributes inthe </span><span class=Code><span style='font-family:Courier'>shelf-one</span></span><spanlang=EN-US> children, the nodes would look likethe following:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&lt;towel&gt;red&lt;/towel&gt;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&lt;towel&gt;blue&lt;/towel&gt;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> This isperfectly valid, and it is completely up to you and your requirements how youdecide to structure your nodes and elements. You should take into considerationthat Flash usually </span><span class=ImportantWord><span style='font-family:Helvetica'>processes attributes faster than text nodes</span></span><spanlang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In thissection of XML methods, properties and event handlers you will find many functionsthat will both create data in an XML structure, and control it so it is usablewithin your Flash movies. You will use these to manipulate the data in anobject-oriented manner (using dot notation hierarchy). These functions willhelp check that XML has been loaded and processed without error so you canproceed in using the data within your interfaces. Please refer to </span><i>Chapters18, 19, and 20</i><span lang=EN-US>  for moreinformation on XML and socket servers.</span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span><span class=ImportantWord><span style='font-family:Helvetica'>object</span></span>has many methods attached to it that can be used to control the actions andappearances of XML documents and document trees. XML object instances must beinstantiated with a constructor. To construct a new XML object instance <spanclass=Code><span style='font-family:Courier'>myXML_xml</span></span>, you woulduse the following format:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml= new XML();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>Then, you will load orcreate XML in this new </span><span class=Code><span style='font-family:Courier'>myXML_xml</span></span><span class=Code> object instance.You can either add XMLwithin the brackets, such as:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml= newXML(&quot;&lt;laundry&gt;&lt;shirts&gt;3&lt;/shirts&gt;&lt;socks&gt;none&lt;/socks&gt;&lt;/laundry&gt;&quot;);</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Or, you can load XMLinto a document using the </span><span class=Code><spanstyle='font-family:Courier'>XML.load</span></span><span class=Code> method:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml= new XML();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml.load(&quot;laundry.xml&quot;);</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>This will load the </span><spanclass=Code><span style='font-family:Courier'>laundry.xml</span></span><spanclass=Code> document into the </span><span class=Code><spanstyle='font-family:Courier'>myXML</span></span><span class=Code> object in Flash. Note that </span><span class=Code><spanstyle='font-family:Courier'>_xml</span></span><span class=Code> is added to the instance name so Flash recognizes the name for codehinting purposes.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object contains these methods:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.appendChild</span></span><span lang=EN-US>   appends a node to theend of the child list</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.cloneNode</span></span><span lang=EN-US>   clones the specifiednode and children</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.createElement</span></span><span lang=EN-US>   creates an XMLelement</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.createTextNode</span></span><span lang=EN-US>   creates an XMLtext node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.getBytesLoaded</span></span><span lang=EN-US>   returns the numberof bytes of an XML document that have loaded</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.getBytesTotal</span></span><span lang=EN-US>   returns the totalsize of an XML document in bytes</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.hasChildNodes</span></span><span lang=EN-US>   indicates whetherthe node has child nodes</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.insertBefore</span></span><span lang=EN-US>   inserts a node infront of an existing node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.load</span></span><span lang=EN-US>   loads an XML document from aURL</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.parseXML</span></span><span lang=EN-US>   parses an XML documentinto a tree</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.removeNode</span></span><span lang=EN-US>   removes a node </span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.send</span></span><span lang=EN-US>   sends an XML document to aURL</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.sendAndLoad</span></span><span lang=EN-US>   sends an XML documentto a URL and loads the server response</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.toString</span></span><span lang=EN-US>   converts the node to astring</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object also has several properties associated with it:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.contentType</span></span><span lang=EN-US>   the MIME type sent bythe server</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.docTypeDecl</span></span><span lang=EN-US>   a documents DOCTYPEdeclaration</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.firstChild</span></span><span lang=EN-US>   references the firstchild in the list</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.ignoreWhite</span></span><span lang=EN-US>   discard white-spaceonly nodes</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.lastChild</span></span><span lang=EN-US>   references the lastchild in the list</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.loaded</span></span><span lang=EN-US>   checks if an XML documenthas loaded</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.nextSibling</span></span><span lang=EN-US>   references the nextsibling in a node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.nodeName</span></span><span lang=EN-US>   the tag name of the XMLelement</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.nodeType</span></span><span lang=EN-US>   the type of the XMLelement</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.nodevalue</span></span><span lang=EN-US>   the text of the XMLelement</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.parentNode</span></span><span lang=EN-US>   references the parentof the node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.previousSibling</span></span><span lang=EN-US>   references theprevious sibling in a node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.status</span></span><span lang=EN-US>   the numeric status code ofa parsing operation</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.xmlDecl</span></span><span lang=EN-US>   the XML documentsdeclaration</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object has two collection summaries associated with it, and both are used toreturn node arrays:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.attributes</span></span><span lang=EN-US>   all the attributes ofthe node</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.childNodes</span></span><span lang=EN-US>   all the child nodes ofthe node</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object also has two event handlers that are used to perform error checking whenXML data is loaded into a movie:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.onData</span></span><span lang=EN-US>   invoked when the documenthas been downloaded</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.onLoad</span></span><span lang=EN-US>   invoked for the </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>XML.load</span></span><spanlang=EN-US> and </span><span class=Code><span lang=EN-US style='font-family:Courier'>XML.sendAndLoad</span></span><span lang=EN-US>  methods</span></p><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XML</span></span>object contains methods, properties and event handlers. These work together toload data, check that the data has arrived, and then process the data so youcan use it in your movie. For example, the <span class=Code><spanstyle='font-family:Courier'>onLoad</span></span> handler uses a function tomake sure that the movie is ready to proceed after the file has been found andloaded. It does not throw an error if there is a problem with the file itself(such as, if it is residing in the correct subdomain, missing an closing tag, andso on).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml= new XML();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml.onLoad= function(success) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   if (success) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      trace(&quot;the file was loaded&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   } else {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      trace(&quot;error loading file&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   }</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myXML_xml.load(&quot;xmldoc.xml&quot;);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The examples <a href="../fla/xml.fla">xml.fla</a> (and <a href="../swf/xml.swf">xml.swf</a>)   and <ahref="../swf/xmldoc.xml">xmldoc.xml</a> are used to expand upon this code. You   will load the XML file into the movie successfully in one text box, and the   second box will file will purposefully fail loading so you can see how this   code works.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>XML documents can be transferred between a server and theFlash Player using the <span class=Code><span style='font-family:Courier'>XML.load()</span></span>and <span class=Code><span style='font-family:Courier'>XML.send()</span></span>methods. The <span class=Code><span style='font-family:Courier'>load() </span></span>method,as you can see in the previous code listing, downloads XML from the server andplaces the received data in an <span class=Code><span style='font-family:Courier'>XML</span></span>object. The <span class=Code><span style='font-family:Courier'>send()</span></span>method converts an <span class=Code><span style='font-family:Courier'>XML</span></span>object into an XML document and sends that data to the server. A variation ofthis process is the <span class=Code><span style='font-family:Courier'>sendAndLoad()</span></span>method, which sends data to the server, and then loads any received intoanother <span class=Code><span style='font-family:Courier'>XML</span></span>object. You should note that these XML methods use HTTP <span class=Code><spanstyle='font-family:Courier'>GET</span></span> and <span class=Code><spanstyle='font-family:Courier'>POST</span></span> methods for transferringinformation between player and server. If a smaller amount of data needs to betransferred very frequently and faster than HTTP transfers, the <spanclass=Code><span style='font-family:Courier'>XMLSocket</span></span> object anda socket server could be more beneficial to your movie. This is because of thelow overhead of socket transfer methods. Please refer to <i>Chapter 20</i> formore information on socket servers.</p><h3>Tips and Precautions</h3><p class=MsoBodyText>It is a good idea to add <span class=Code><spanstyle='font-family:Courier'>_xml</span></span> onto the end of your instancenames in the <span class=Code><span style='font-family:Courier'>XML</span></span>object. Therefore, you will get code hinting in the script pane in the <spanclass=ScreenText><span style='font-family:Optima'>Actions</span></span> panel.This can help you write ActionScript faster, and help you avoid typos of themethods and properties in your code.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You may also want to be aware of the <span class=Code><spanstyle='font-family:Courier'>XMLnode</span></span><i> class</i>, which is used to define the methods and properties of nodeswithin a large container XML node (the parent of all subsequent child nodes).For example, <span class=Code><span style='font-family:Courier'>myXML = newXML();</span></span> would be part of the <span class=Code><spanstyle='font-family:Courier'>XML</span></span> class. Children of <spanclass=Code><span style='font-family:Courier'>myXML</span></span> would be partof the <span class=Code><span style='font-family:Courier'>XMLnode</span></span>class. Most of the time you will not need to be overly concerned with thedistinction between these two different classes, however in some cases you canonly invoke certain methods, properties, or handlers on the top level <spanclass=Code><span style='font-family:Courier'>XML </span></span>class. These arenoted in the following pages.</p>