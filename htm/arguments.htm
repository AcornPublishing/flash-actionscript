<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>arguments </h1><p class=MsoBodyText>Thisobject addressed in Chapter 10 of the book.</p><h2>General</h2><p class=MsoBodyText>Whenevera function is called, an object called the <span class=ImportantWord><spanstyle='font-family:Helvetica'>call object </span></span>is created, one per nested functioncall depth. This object is used to create the scope chain amongst other things.It also has an additional associated object called <spanclass=ImportantWord><span style='font-family:Helvetica'>arguments, </span></span>and this object is available for the programmer to interrogate.The arguments object is actually an <span class=ImportantWord><spanstyle='font-family:Helvetica'>array </span></span>holding the function argumentvalues. </p><p class=MsoBodyText>&nbsp;</p><p class=Focuspoints>(The following discussion is fairly advanced and assumes agood knowledge of the properties of the arguments object, so you may do well tohave a look at the entries for <span class=ImportantWord><spanstyle='font-family:Helvetica'>arguments.callee, </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>arguments.caller </span></span>and <span class=ImportantWord><spanstyle='font-family:Helvetica'>arguments.length </span></span>first, plus have a good understandingof arrays.)</p><p class=MsoBodyText> For example, consider the function below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function3D(x, y, z){ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  // code goes here </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText> </p><p class=MsoBodyText>Thisfunction would have an array <span class=Code><span style='font-family:Courier'>arguments </span></span>as follows:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class=Code><span style='font-family:Courier'>arguments[0] </span></span>holds the value of argument <spanclass=Code><span style='font-family:Courier'>x </span></span></p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class=Code><span style='font-family:Courier'>arguments[1] </span></span>holds the value of argument <span class=Code><span style='font-family:Courier'>y </span></span></p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class=Code><span style='font-family:Courier'>arguments[2] </span></span>holds the value of argument <spanclass=Code><span style='font-family:Courier'>z </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Moresubtly, because the arguments object is really just an array, you can pass itfrom one function to another, as shown by the following code:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionsendArguments() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    receiveArguments(arguments); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionreceiveArguments(received) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(received[0]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(received.length); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>sendArguments(&quot;cat&quot;,&quot;dog&quot;, &quot;hamster&quot;, 3, 5, 9); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Thearguments <span class=Code><span style='font-family:Courier'>“cat”, </span></span><span class=Code><spanstyle='font-family:Courier'>“dog”, </span></span><span class=Code><span style='font-family:Courier'>“hamster”, </span></span><span class=Code><spanstyle='font-family:Courier'>3, </span></span><span class=Code><span style='font-family:Courier'>5, </span></span><span class=Code><spanstyle='font-family:Courier'>9 </span></span>are placed in an <span class=Code><span style='font-family:Courier'>array arguments[0] = “cat” </span></span>to <span class=Code><spanstyle='font-family:Courier'>arguments[5] = 9 </span></span>by the function <spanclass=Code><span style='font-family:Courier'>sendArguments().</span></span><spanclass=Code></span> This function sends the argumentsto another function <span class=Code><span style='font-family:Courier'>receiveArguments(). </span></span></p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>receiveArguments() </span></span>sees thesearguments as the object <span class=Code><span style='font-family:Courier'>received, </span></span>and <span class=Code><span style='font-family:Courier'>arguments[0] </span></span>to <span class=Code><spanstyle='font-family:Courier'>[5] </span></span>of <span class=Code><span style='font-family:Courier'>sendarguments() </span></span>can be read in thenew function as <span class=Code><span style='font-family:Courier'>recieved[0] </span></span>to <spanclass=Code><span style='font-family:Courier'>[5]. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Theoutput for this FLA is shown below.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=256 height=110src="../png/0586-dict2-09.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note that<span class=Code><span style='font-family:Courier'>receiveArguments </span></span>has its <spanclass=ImportantWord><span style='font-family:Helvetica'>own </span></span>arguments, and youcan see them by modifying <span class=Code><span style='font-family:Courier'>recieveArguments </span></span>to show them rather than those of <span class=Code><spanstyle='font-family:Courier'>sendArguments </span></span>:</p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionrecieveArguments(recieved) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     trace(arguments[0]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>     trace(arguments.length); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Thismodification will give the new outputs shown. Note that the arguments for <spanclass=Code><span style='font-family:Courier'>receiveArguments </span></span>are a singleargument with one element: the whole arguments object of the <spanclass=Code><span style='font-family:Courier'>sendArguments </span></span>function. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=256 height=110src="../png/0586-dict2-10.png"></p><p class=MsoBodyText><b></b></p><h2>Practical uses</h2><p class=MsoBodyText>Usingthe arguments object instead of the traditional function calls of the form <spanclass=Code><span style='font-family:Courier'>myFunction(arg0, arg1, arg2….argn) </span></span>allows several benefits:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>If you can get your functions working for one argument(or dimension), you can make it handle any number of dimensions simply byadding more arguments to the first call, and changing your main function codeto read an array rather than a single value. In short, it makes it easy toextend your code to handle more parameters.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Your functions don’t have to know the number ofarguments they should expect. This is <i>very</i>useful for statistical functions and other applications where the functionmay be asked to handle a variable number of similarly structured data setsdepending on the sample size. </p>