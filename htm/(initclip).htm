<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12169683"><span lang=EN-US> #initclip...#endinitclip</span></a></h1><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>// code</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#endinitclip</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip order</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>//code</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#endinitclip </span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>//code</span></span><span lang=EN-US> represents theenclosed script that you want to run within the </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  block. The enclosed script will beexecuted before the frame of the timeline it is seen on is started. If thereare more than one </span><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  blocks, the optional </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>order</span></span><span lang=EN-US>  parameter will be used to definewhich blocks are executed first (lowest </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>order</span></span><span lang=EN-US>  first). If no order is specified, 0is assumed. If two order values of the same value are seen, execution willoccur based on depth (and because this may be assigned at runtime, the exactorder may not be known at authortime).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Compatiblewith the </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Flash 6 player and above</span></span><span lang=EN-US>. This action </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>must exist in frame 1 of a movie clip timeline</span></span><span lang=EN-US>, and executes before the frame itis seen on is started. </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>The scope of the enclosedscript is always _root</span></span><span lang=EN-US>, and not the timeline it is on. You would use the </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>#initclip...#endinitclip</span></span><span lang=EN-US>  ifyou wanted to define object prototypes and use the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Object.registerClass()</span></span><span lang=EN-US>  method to define custom object structures based on the movie clipobject. You may also use it to define functions on </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>_root</span></span><span lang=EN-US>  or </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>_global</span></span><span lang=EN-US> that will be referred to by scripts external tothe movie clip the </span><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  is on (i.e. when defining global or publicfunctions). If your code is not Object Orientated, then the chances are thatyou would be better off using the much easier </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>movieclip.onEnterFrame</span></span><span lang=EN-US> method orthe </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>obClipEvent(load)</span></span><span lang=EN-US> action.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> This </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>action</span></span><span lang=EN-US> is used to define code blocks you want to beprocessed before a timeline begins to run. It is useful in defining any objectstructures and ActionScript libraries (consisting of functions and otherdefinitions) that must be in place before the movie clip timeline it is seen onis started. The diagram below shows the order of execution:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> <img width=425 height=317src="../png/0586_dict1_01.png"></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  is associated with the definition of baseprototypes associated with advanced Object Oriented Programming methods, asapplied to Component definition and/or extending the ActionScript languageitself via new prototype chains that either modify or add to its defaultobjects and methods. The discussion below therefore assumes an understanding ofOOP and Flash’s event model.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>_root. myPath.myClip </span></span><span lang=EN-US> is a movie clip that has its linkage propertiesset to </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Export for ActionScript</span></span><span lang=EN-US>  and </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Export in first frame</span></span><span lang=EN-US>  (select the clip in the library window and then select </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Linkage…</span></span><span lang=EN-US> via either the right-click menu or via the library windows </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Options</span></span><span lang=EN-US> menu). The clip will therefore be attached to frame 1 of the </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_root</span></span><span lang=EN-US>  timeline (and this is crucial tothe way </span><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  is used – you <i>must </i>make sure that anyclip using </span><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  is attached to frame 1 of the </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_root</span></span><span lang=EN-US>  timeline). When the SWF starts,frame 1 of the clip and frame 1 of </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>myClip</span></span><span lang=EN-US> will both run immediately. The diagram showsthe following:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Any </span><span class=Code><spanlang=EN-US style='font-family:Courier'>onLoad</span></span><span lang=EN-US> event associated with </span><span class=Code><span lang=EN-USstyle='font-family:Courier'>myClip</span></span><span lang=EN-US>  will executeat the beginning of </span><span class=Code><span lang=EN-US style='font-family:Courier'>myClip</span></span><span lang=EN-US> ’s frame 1, and it will scope the</span><span class=Code><span lang=EN-US style='font-family:Courier'>_root.myPath,myClip</span></span><span lang=EN-US>  timeline.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Any </span><span class=Code><spanlang=EN-US style='font-family:Courier'>onEnterFrame</span></span><span lang=EN-US>  associated with </span><span class=Code><span lang=EN-USstyle='font-family:Courier'>myClip</span></span><span lang=EN-US>  will run atthe beginning of each new frame, and will scope the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>myClip</span></span><span lang=EN-US> timeline.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The </span><span class=Code><spanlang=EN-US style='font-family:Courier'>#initClip</span></span><span lang=EN-US> 0 action will force all code within the </span><span class=Code><spanlang=EN-US style='font-family:Courier'>#initclip 0... #endinitclip</span></span><span lang=EN-US>  block to run <i>before </i>frame 1 of the main timeline.  It will run <i>before </i>any other code,and will also run <i>before </i>the </span><span class=Code><span lang=EN-USstyle='font-family:Courier'>myClip</span></span><span lang=EN-US>  instance evencomes into existence. It is effectively running whilst the </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>myClip</span></span><span lang=EN-US>  symbol is still in the Library. This means that it cannot scope the</span><span class=Code><span lang=EN-US style='font-family:Courier'>myClip</span></span><span lang=EN-US>  timeline. Instead, it will scope </span><span class=Code><spanlang=EN-US style='font-family:Courier'>_root</span></span><span lang=EN-US>.You can define any objects or prototypes at this point, and doing so will allowyou to:<br><br></span></p><p class=Bullet-Level2><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Define prototype classes and redefineone or more movie clips to be members of these classes.</span></p><p class=Bullet-Level2><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Modify the default ActionScriptclasses and methods.</span></p><p class=Bullet-Level2><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Create base prototypes (classes) thatyour components rely on.<br><br></span></p><p class=MsoBodyTextIndent style='margin-left:54.0pt'><span lang=EN-US> The </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>initClip</span></span><span lang=EN-US>  structure allows you to do this <i>before</i>the main event model (and for that matter, the timelines) start up. Thisallows you to assume all your OOP structures are full defined when the main SWFstarts up. Essentially, this action allows you to predefine custom objectstructures or even redefine the ActionScript environment during SWF start up.It is a very powerful concept, but requires a good knowledge of the Flashenvironment to use effectively.</span></p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-18.0pt;'><span lang=EN-USstyle='font-family:Symbol;'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> The </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>initClip1</span></span><span lang=EN-US>  will do thesame thing, but will run after </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>initClip 0</span></span><span lang=EN-US>. It will still run <i>before </i>thestandard movie clip events (</span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>onEnterFrame</span></span><span lang=EN-US>, </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>onLoad</span></span><span lang=EN-US> ).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The code within the </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>#initclip... #endinitclip</span></span><span lang=EN-US> actions is executed before frame 1 of the timeline it is seen on, </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_root.myPath.myClip</span></span><span lang=EN-US>. It is run before the first </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_root.myPath.myClip.</span></span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>onLoad</span></span><span lang=EN-US> or </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>_root.myPath.myClip.</span></span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>onEnterFrame</span></span><span lang=EN-US> eventsare seen. The included code is executed as if it was attached to _root.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Youshould use the #initclip... #endinitclip structure to:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Define any </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>objectprototypes</span></span><span lang=EN-US>  and declare any </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica'>Object.registerClass()</span></span><span lang=EN-US> definitions required by myClip or other movie clips. You would alsoneed to export myClip for ActionScript to ensure that the definitions are inplace before the main timeline, _root, starts. This ensures that thedefinitions are available throughout the SWF.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> To define any functions on _root thatwill be used by a component.</span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> To define any global methods that youmay want to use to customize or extend the scripting environment.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText style='margin-left:32.2pt'><span lang=EN-US> If you simply want to initialize variables,properties and other data to be used by myCliponly, you would be much better off using the </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>MovieClip.onLoad</span></span><span lang=EN-US>  method (or the </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>OnClipEvent()</span></span><span lang=EN-US> action with<i>load </i>as the argument).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=576 valign=top style='width:432.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Code</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>#initclip</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>   _global.message = function(msg) {</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>      var msg;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>      trace(msg);</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>   };</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>#endinitclip</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> This code would be on frame 1 of a movie clip (or  more probably, frame 1 of a component) that is exported for ActionScript on  frame 1 via the </span></span><span class=ScreenText><span lang=EN-US  style='font-family:Optima;'>Linkage Properties</span></span><span class=Code><span lang=EN-US> window found in  the library window drop-down menu.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> The code defines a global function called </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>message()</span></span><span class=Code><span lang=EN-US>  before frame 1 of the SWF is executed. Scripts within the FLA can  call this from anywhere (and from frame 1 onwards) via, for example, the  line:</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>message(&quot;hello&quot;);</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> This would output &quot;hello&quot; in the output  window. </span></span><span class=Code><span lang=EN-US style='font-family:  Courier;'>message()</span></span><span class=Code><span lang=EN-US>  can be thought of as a new action, and is an easy  way to extend ActionScript without resorting to Object Orientated  programming.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>#initclip</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>   MovieClip.prototype.giveMeFoos =  function() {</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>      this.Foo01 = &quot;I have Foo 1&quot;;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>      this.Foo02 = &quot;I have Foo 2&quot;;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>   };</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>#endinitclip</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> This code would be on frame 1 of a component that is  exported for ActionScript on frame 1 via the </span></span><span  class=ScreenText><span lang=EN-US style='font-family:Optima;'>Linkage Properties</span></span><span class=Code><span lang=EN-US> window found in the library window drop-down menu.  It gives every movie clip in the SWF a new method via the Movie clip Object  prototype called </span></span><span class=Code><span lang=EN-US  style='font-family:Courier;'>giveMeFoos()</span></span><span  class=Code><span lang=EN-US>. Any movie clip can invoke it in the SWF via  the line:</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>_root.myClipPath.myClip.giveMeFoos();</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> or if invoked from the timeline myClip:</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>giveMeFoos();</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>giveMeFoos()</span></span><span  class=Code><span lang=EN-US>  creates two new variables on the timeline of  myClipcalled </span></span><span  class=Code><span lang=EN-US style='font-family:Courier;'>Foo01</span></span><span class=Code><span lang=EN-US> and </span></span><span class=Code><span lang=EN-US  style='font-family:Courier;'>Foo02</span></span><span  class=Code><i><span lang=EN-US>.</span></i></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><i><span lang=EN-US> &nbsp;</span></i></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> This is a powerful way of extending the existing  ActionScript methods by attaching additional custom methods directly to the  default objects. See also </span></span><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Object.registerClass()</span></span><span  class=Code><span lang=EN-US>, which is a method that allows you to do the  same thing without polluting the default Movie Clip class.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-US> Examples and Practicaluses</span></h3><p class=MsoBodyText><span lang=EN-US> The#initclip... #endinitclip is most likely to be used in the creation of advancedcomponents. Its use in standard movie clips is possible but not normallyrecommended; you are better off using the on Load events as discussedpreviously.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Theexample code in the Description section above is included as working FLAs thatcreate and show the use of simple components. See the example </span><spanclass=FileName><span lang=EN-US style='font-family:Courier;'><a href="../fla/(initclip).fla">(initclip).fla</a></span></span><span lang=EN-US>  and </span><span class=FileName><spanlang=EN-US style='font-family:Courier;'><ahref="../swf/(initclip).swf">(initclip).swf</a></span></span><span lang=EN-US>  .</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> You arerecommended to export all components that use #initclip... #endinitclip codeblocks to define general object structures or public functions with </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Export for ActionScript</span></span><span lang=EN-US> and </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Export in frame 1</span></span><span lang=EN-US> checked (via the </span><span class=ScreenText><spanlang=EN-US style='font-family:Optima;'>LinkageProperties</span></span><span lang=EN-US> window accessed from the Library window drop-downmenu). You have to do this because you cannot be sure how soon the definitionsmade in the initclip block will be required. By ensuring that the #initclipcode is run </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>before frame 1 of the final SWF</span></span><i><span lang=EN-US>, </span></i><span lang=EN-US> you ensurethat any definitions made are accessible immediately from frame 1 onwards.</span></p><h3><span lang=EN-US> Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-US> The#initclip... #endinitclip is an advanced ActionScript feature associated withdefining new Object prototypes and </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>registerClass()</span></span><span lang=EN-US>  inheritances prior to starting themain code of a SWF. For the non-object orientated coder, it can be used topredefine global or public functions before the main application code runs(which is another fairly advanced application). If you're not doing either ofthese (and especially if you are not creating components), you are stronglyrecommended to use the standard on load event functionality.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> An</span><span lang=EN-US> #initclip actionwithout an order will cause Flash to assume an order of 0 or &quot;highestpriority&quot;. Most #initclip... #endinitclip blocks written by third parties(such as will be found in components that the end user may be using in the FLA <i>that are not written by you</i>) should beassumed to be using priority 0, so you cannot assume that in the followingcode, </span><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip1</span></span><span lang=EN-US>  will run directly after </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>#initclip0</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip 0;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>//code section 1</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#endinitclip;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>...</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip 1;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>// code section 2</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#endinitclip;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Although </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>//codesection 2</span></span><span lang=EN-US>  can beassumed to run after </span><span class=Code><span lang=EN-US style='font-family:Courier;'>//code section 1</span></span><span lang=EN-US>, you can never be sure that </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span><span lang=EN-US>  blocks written by other authors maybe executed between the two. In most cases, this issue is not a concernassuming your initclip code is well written <i>general</i>code, but you should be aware that other code might run between your twosections.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where youhave a number of identical components on the stage in a FLA, you usually only wantthe initclip code block to run once (because the first execution of the blockwill define the object structures and functions required for <i>all </i>identical components). The followinggeneral structure ensures that only one instance of the #initclip... #endinitclipblock is executed:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#initclip</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>if (_global.myFunction == undefined) {</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>   // define_global.myFunction</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>}</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>#endinitclip</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>if...</span></span><span lang=EN-US>  ensures that </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_global.myFunction</span></span><span lang=EN-US>  is only ever defined once (i.e.when the function is undefined), irrespective of how many instances of this </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>initclip</span></span><span lang=EN-US>  code block is encountered.</span></p>