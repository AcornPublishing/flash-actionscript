<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>F<i>Component</i>.setClickHandler</h1><p class=MsoBodyText>(This method is applicable to <span class=Code><spanstyle='font-family:Courier;'>FPushButton.setClickHandler. </span></span>)</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myComponent.setClickHandler(functionName); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>Component.setClickHandler(functionName,location); </span></span></p><p class=MsoBodyText><span class=Code><i><spanstyle='font-family:Courier'>&nbsp;</span></i></span></p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myComponent </span></span>is a push button instance. When aclick is detected associated with the push button, the function <spanclass=Code><span style='font-family:Courier'>functionName </span></span>is run. The function will be assumedto be defined on the current timeline. If it is not, you can add a secondoptional argument <span class=Code><span style='font-family:Courier'>location, </span></span>and this should point to the location of the function.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This method is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 6. </span></span></p><h3>Description</h3><p class=MsoBodyText>With the push button you can set up a function that willbe run every time a click occurs. This function can be configured to accept asingle argument that identifies the component that has invoked it. This functionis called the <span class=ImportantWord><span style='font-family:Helvetica'>clickhandler </span></span>or <spanclass=ImportantWord><span style='font-family:Helvetica'>call back. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The click handler will react in the same way to a click asthe <span class=ImportantWord><span style='font-family:Helvetica'>Button.onRelease </span></span>or the <span class=ImportantWord><span style='font-family:Helvetica'>on(release) </span></span>events.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=336 valign=top style='width:252.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myComponent.setClickHandler(&quot;myFunction&quot;); </span></span></p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The function <span class=Code><span style='font-family:  Courier'>myFunction </span></span>is assigned as the click handler for the push button instance <span class=Code><span  style='font-family:Courier'>myComponent. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myComponent.setClickHandler(&quot;myFunction&quot;, _root); </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The function <span class=Code><span style='font-family:  Courier'>myFunction </span></span>is assigned as the change handler for the push button instance <span class=Code><span  style='font-family:Courier'>myComponent. </span></span>The function <span class=Code><span style='font-family:Courier'>myFunction </span></span>is on the timeline <span  class=Code><span style='font-family:Courier'>_root. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>You should note that you can also define the click handlermanually via the Property inspector. This is actually the preferred route ifyou are unlikely to change the identity of the click handler dynamically(something that is a rare thing to need to do).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=390 height=113src="../png/0586-dict5-66.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The click handler is crucial in the operation of pushbuttons. Without it, it is very difficult to create responsive UI designs usingpush buttons. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The click handler is always called with one argument, andthis holds the instance name and path (the <i>target</i>)to the component that has invoked the function. If you want to use it, youshould define a corresponding argument in your click handler. The followingclick handler will send this argument to the Output window:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functiontest(component) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(component); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This feature is useful for writing general click handlers.</p><h3>Tips and precautions</h3><p class=MsoBodyText>It is not immediately apparent what use the push buttonhas over and above the standard button object. All other components arecomplex, and would take time to build using buttons, text fields and movieclips, but the push button could be made very easily via a single standardbutton.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The advantage of using the push button is as follows. Ifyou use components throughout your site design then:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Thecomplete user interface of your site will respond to the <spanclass=ImportantWord><span style='font-family:Helvetica'>FStyleFormat </span></span>object. You could thus very easilychange the look of your UI as if it were one single component.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Youcan create the basic site UI and then apply a custom skin set to everycomponent. </p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Youwill find it easier to update your site to use the latest advances incomponents if you use them consistently throughout your site design.</p>