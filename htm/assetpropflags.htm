<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1>ASSetPropFlags</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ASSetPropFlags(Object,   properties, protection, permit);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>Object</span></span>is   a Flash 6 object (such as <span class=Code><span style='font-family:Courier'>MovieClip</span></span>, <span class=Code><span style='font-family:Courier'>Math</span></span>, <span class=Code><span style='font-family:Courier'>TextField</span></span>,   etc), <span class=Code><span style='font-family:Courier'>properties</span></span>   is the list of properties of the object you want to hide/unhide, <spanclass=Code><span style='font-family:Courier'>protection</span></span>is the new   values for property hiding and overwrite access you want to set for the <span class=Code><span style='font-family:Courier'>Object</span></span>,   and <spanclass=Code><span style='font-family:Courier'>permit</span></span>is a flag that   specifies whether or not you can set values to &quot;unprotect&quot;.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is an undocumented action that allows you to make the   underlying object structures of ActionScript both visible and accessible to   your scripts.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><b>This entry assumes a good understanding of ActionScript   and is aimed at advanced users.</b></p><h3>Description</h3><p class=MsoBodyText>Native ActionScript objects (<span class=Code><spanstyle='font-family:Courier'>MovieClip</span></span>, <span class=Code><spanstyle='font-family:Courier'>Sound</span></span>, <span class=Code><spanstyle='font-family:Courier'>TextField</span></span>, <span class=Code><spanstyle='font-family:Courier'>XML</span></span>, etc) are hidden from the <spanclass=Code><span style='font-family:Courier'>for...in</span></span> loop, so you   cannot search for their properties and methods, and neither can you overwrite   them. These protect the user from the intricacies of the underlying language,   or from breaking it by making mistakes in their code. That’s fine when you are   creating content and don’t want any distractions from creating code that does   the job, but if you want to delve into ActionScript and the Flash player itself   for some tinkering and exploration, you may want to access this underlying structure   occasionally.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>ASSetPropFlags</span></span>   <span class=ImportantWord><span style='font-family:Helvetica'>action</span></span>   is an undocumented action that allows you to unlock the ActionScript objects   so that you can view this structure. Most interestingly, it allows you to unhide   <i>all </i>methods contained within ActionScript and fish for anything that   Macromedia are not telling us about just yet...</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You can also use it to hide <i>your </i>methods and actions   from <span class=Code><span style='font-family:Courier'>for...in</span></span>,   or protect them from being overwritten or deleted, something that may be useful   for creating open source code, such as components (although <i>they will still   be viewable via the debugger</i>)<i>.</i></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>AssetPropFlags</span></span>   action has the following arguments:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>AssetPropFlags(object,   properties, protection, permit)</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>object</span></span>is   the object that you want to work with (or the level in the object tree you want   to cycle through with <span class=Code><span style='font-family:Courier'>for...in)</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>properties</span></span> is   the list of properties (expressed as strings) that you want to change the hide/overwrite   settings for.</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> If you want to change all of the properties,   specify </span><span class=Code><span lang=EN-US style='font-family:Courier'>null</span></span><span lang=EN-US>.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> If you want to change a single property, specify   it as a string such as </span><span class=Code><spanlang=EN-US style='font-family:Courier'>&quot;myProp&quot;</span></span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> If you want to change a subset of the properties,   specify it as a comma delimited array within a string, such as </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>&quot;myProp1, myProp2,   myProp3&quot;</span></span><span lang=EN-US>.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>protection</span></span>is   a bit pattern that defines what the level of protection on the properties specified   in the last argument will be. The last three bits are the active bits:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> bit </span><span class=Code><spanlang=EN-US style='font-family:Courier'>0</span></span><span lang=EN-US> tells   Flash whether the properties should be hidden from </span><span class=Code><spanlang=EN-US style='font-family:Courier'>for...in</span></span><span lang=EN-US>   (1=hidden)</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> bit </span><span class=Code><spanlang=EN-US style='font-family:Courier'>1</span></span><span lang=EN-US> tells   Flash whether the properties should be protected from deletion (1=protected)</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   </span></span><span lang=EN-US> bit </span><span class=Code><spanlang=EN-US style='font-family:Courier'>2</span></span><span lang=EN-US> tells   Flash whether the properties should be protected from being overwritten (1=protected)</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>permit</span></span>is   a flag that allows you to make changes to the default values (i.e. it allows   you to set any of the Protection bits to zero for native ActionScript objects).   Always set it to <span class=Code><span style='font-family:Courier'>true</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For example, setting Protection to <span class=Code><spanstyle='font-family:Courier'>4</span></span> gives bit2 =1, bit1=0, bit0=0.</p><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>ASSetPropFlags</span></span>   is an undocumented feature of Flash, and is perhaps the most important such   action, because it allows you to unhide all other undocumented methods contained   within ActionScript. </p><h4> Using ASSetPropFlags to investigate ActionScript</h4><p class=MsoBodyText>The following code will list <i>all </i>objects contained   within Flash ActionScript for the Flash 6 player:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// unhide   all Objects but leave them protected...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>AssetPropFlags(_global,   null, 6, true);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// list   all Objects...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for (Objects   in _global) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(Objects);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span><span style="font-family:Courier" class="MsoBodyText"></span></p><p class=MsoBodyText>&nbsp;</p><p class="MsoBodyText"><img width=302 height=1045  src="../png/0586_dict11e_x01.png"> </p> <p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You can add an embedded loop to list all properties/methods   of all Objects we have just found (the listing is included as <a href="../fla/assetpropflags.fla">assetpropflags.fla</a>   )</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// unhide   all  global Objects but leave them protected...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>AssetPropFlags(_global,   null, 6, true);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// list   all Objects...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for (Objects   in _global) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(Objects);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   //unhide   first level of tree...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   AssetPropFlags(_global[Objects],   null, 6, true);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   //list   them all...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   for   (level1 in _global[Objects]) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        trace(&quot;   &quot;+level1);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        for (level2 in _global[Objects][level1]){</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>           trace(&quot;      &quot;+level2)</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>      }</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   }</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>We will leave it to the advanced users to find all the gems   in the list created by this code…</p><h4> Using ASSetPropFlags in your own code</h4><p class=MsoBodyText>The following example creates a couple of user properties   that cannot be accidentally overwritten. The following code will show &quot;<spanclass=Code><span style='font-family:Courier'>overwritten</span></span>&quot; if   you run it, because line 3 changes <span class=Code><span style='font-family:Courier'>myObject.prop1</span></span>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject   = {prop1:1, prop2:2, prop3:3};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// overwrite   attempt...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.prop1   = &quot;overwritten&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myObject.prop1);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=282 height=120src="../png/0586_dict11e_x03.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you now add an <span class=Code><span style='font-family:Courier'>ASSetPropFlags</span></span> to protect <span class=Code><spanstyle='font-family:Courier'>myObject.prop1</span></span> from being overwritten   you will now find that any overwrite fails:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject   = {prop1:1, prop2:2, prop3:3};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ASSetPropFlags(myObject,   &quot;prop1&quot;, 4, true);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// overwrite   attempt...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.prop1   = &quot;overwritten&quot;;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myObject.prop1);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=282 height=120src="../png/0586_dict11e_x03.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following code produces a function that cannot be accidentally   deleted or overwritten:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myFunction   = function () {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   //   try to delete me, go on!</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;I   am still here!&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>};</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>ASSetPropFlags(_root,   &quot;myFunction&quot;, 6, true);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Trying to delete or overwrite it will have no effect:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// overwrite   attempt...</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function   myFunction() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;oh   no your're not!&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// delete   attempt…</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myFunction   = undefined;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// have   we succeeded?</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myFunction();</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=282 height=120src="../png/0586_dict11e_x06.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note that you must define your function as an object (<spanclass=Code><span style='font-family:Courier'>myFunction = function(){... }</span></span>   ) because then it becomes a property of <span class=Code><spanstyle='font-family:Courier'>_root</span></span>. If you define it in the form:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function   myFunction(){</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   //   try to delete me, go on!</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;I   am still here!&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>It won’t take much kryptonite to get past its superhuman   abilities:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=282 height=120src="../png/0586_dict11e_x07.png"></p><!-- A HIDDEN ACTIONSCRIPT FEATURE WITH A HIDDEN STORY TO BOOT! --><!--Lil' Geeper TwinsIt was June '98 and I'd just passed my second practical test, I'd been over confident on the first. Lucky I didn't tell the examiner what I was thinking, as I had him for the next test too! My bike had been teasing me in my dad's garage since Easter when I scraped together what little money I had and bought it from a mate's dad for the princely sum of £600. The bike in question was for all intents and purposes a z250T Scorpion, but it was actually (and this seemed very important at the time) a 1986 GPz250 (EX250-C) grey Jap import. Basically that means the Scorpion upgraded with double front discs, bikini fairing, 'classy' seat strap, and a red warning light on the clocks that came on at the dangerous and excessive speed of 50mph! Instead of an upgraded scorpion you could be mean and call it a downgraded GPz305. 58ccs less from the bore down to 248 and a smaller final drive ratio. Otherwise all parts are exactly the same, which is a bonus for spares as there are plenty of 305s with in breakers with knackered engines, but in otherwise OK nick.I thought (and still do) that it looked great. It looked like a proper bike compared to the tiny CG125 I learnt on, with clean uncluttered 80's lines. Mates were even queuing up for rides, though two-up, the rear mono-shock had a hard time keeping the centrestand from slicing tarmac on anything more than slow cornering. Not only did it look better than the CG, it went it too. Perhaps not FireBlade territory, but plenty fast enough to break all the speed limits, though the stealth Motad 2-1 was no use for dramatic exits (the original 2-2 having long since rotted away).I was halfway through uni at this point and the healthy 10 mile, 35min pedal through scenic Warwickshire was instantly reduced to 15mins of fantastic fun keeping the free revving SOHC engine in it's 9-10.5Krpm power band with the 6 speed box. I had to keep an eye on the revs though, as they'd happily zoom off the clock in any gear. Having a tendency to oversleep and be late for lectures, it was lucky the bike always started easily with its electric boot, although strangely, the choke lusted for a 5Krpm tickover! I rode all through the summer and the following winter, the 130 miles to see my folks, and even a fag and booze trip to France. Well the bike only made it to Dover, as the extortionate ferry cost for it would've been more than my fag savings! The speeds that could be maintained and the amount of stuff that could be carried on it were really impressive for such a small bike. However with 2 crates of beer on the rack, 3 on the back seat, and a giant rucksack on my back, the handling wasn't quite as impressive! It managed 80mph (top gear at 10.5K revs) both ways for the entire journey and it gave no problems apart from a bit of tingle finger and bum numbing after about 100 miles. Luckily I'd been warned to watch the oil level by a guy on a GPz305. Apparently all these small Kwakas are prone to condensation in the sump. Almost unbelievably I had to add 1 litre at Dover (it only takes 1.7L) and it was at the upper limit marker of the glass window when I set off, the expedition being long enough to boil off all the water. God knows what the lubricating properties of that oil/water mix were, but it may have had something to do with my first serious engine problem.I got mine with 18K on the clock and in a very tidy condition. Everything was fine for the next 10K until the bearing race on the output shaft split in half and let me do a 40 to 0 skid while filtering through traffic on the M6; the one time I've been glad for slow moving motorway traffic.As luck would have it, a couple of months earlier I'd bought a working 20K zScorpion with no tax/mot for £300 from a bloke in the AutoTrader. The reason being that I wanted its belt. After about 25K of being caned ruthlessly, the absolutely brilliant belt developed a worrying 1cm tear during a trip with some mates to Wales. I honestly don't know why more bikes don't have them; negligible adjustment, no oily mess, no noise once a smear of Vaseline on the sides stopped the squeak (no, not my bum!), and they last for ages. Actually the problem with the belt is that the 'nice' dealer wanted £250 for a replacement! So I bought another bike for £50 extra.With a cheap Argos socket set and some spanners from the pound shop I had the knackered old engine on the floor and the donor bike's lump inserted and ready for action about 3hrs later. I figured this would be simpler than swapping the output shafts; so many cogs! It would've been quicker apart from the fact that the main bolt at the front of the engine had seized, though the mudguard is pretty good at keeping crap off the engine. Drill, hammer, and cold chisel later, oh and a B&Q fence bolt (dealer wanted £15) got it sorted.The engine started straight off, and I was mobile again, but with a bit more respect for the bikes well being. The only problem with this engine was a dribbling selector shaft seal (semi solved with a wadge of Blutack) and the automatic cam-chain tensioner sticking. About every 200 miles I had to loosen it's bolts and give it a wiggle! Washing was increased to once monthly and all the fasteners and bolts got a weekly WD40 (I never had a seized nut again). Due to the reputation of the GPz305 I'd always been good with the oil changes. Every 1000 miles the engine was drained, flushed with cheapo 20-50 and then filled with top quality 15w-50 API-SJ (only £7 for 5 litres at Wilkos), and then a filter every 2 changes.Unfortunately I'd not been so careful with the rubber. At £30 each, Cheng Shins seemed a bargain. However, there's no such thing as a free lunch and I paid the price a couple of weeks later by high siding on an often-visited roundabout! The bald Michelins were better. Oh well, no major trauma, some torn shoulder ligaments, smashed indicators, clocks, and the fairing cowl were the only damage. Easily fixed with female sympathy, GRP, and a soldering iron. I'd bought the tub of GRP a month or so earlier after the big nut on the output shaft flew off (apparently this happens from time to time) and spilt the front sprocket cover. OK, OK, GRP isn't meant for fixing metal, but I'd misplaced my alloy welding kit!In the next 8 months I notched up another 10K and in that time I stole almost everything from the donor bike. The mono-shock with no damping, the shock linkages with rust where the plastic bushes should've been, the wiring loom with a personality, the carb diaphragm that had perished (although it made no difference), the seat that had split, the headlight whose silvering had flaked off, and the ignition barrel that some bugger de-cored for me in a botched theft attempt. I would've been better just switching the panels and the number plate to the donor bike!In its defence though, it's relatively quick, easy to filter through traffic, and economical (60-70mpg even when caned). The tyres are cheap, and it never needed a new set of plugs. The seat height is low at 30", and it floats in at just over 300lbs. If you only want to commute or do small journeys, then they're in their element. Oh, and it'll burn off any SuperDreams that get in your way!After about 18 months I wanted a bit more oomph, but was stopped by an evil coalition between my finances (slim) and the government (33bhp limit). In the local breakers the solution presented itself. £90 later and a 'sold as seen' 305 motor arrived at my door with a 6-pack of stubbies. Little did I know that I'd just bought some very expensive beer! The moss on the cooling fins was probably a hint, but an hour later (I was getting quick!) it was in, new oil and filter, and ready to go. Well almost. It would seem that the very first 305s were chain drive only. The output shaft was too small to accept the belt pulley, but luckily M+P provided chain and sprockets for £30, and I was nearly on the road again. A quick session with a screwdriver to prise the seized clutch plates apart and I was sorted.The first thing I noticed was the clattering of the chain, but all was forgiven when I hit the first big road. It felt like an all-new bike, it was loads quicker, although the top speed was not much more. A few days later, still delighted by my extra cc's and power, I proceeded on a blast with some mates. About 100 miles before home I thought I could feel some slight vibes, but my 'experienced' mate assured me it was nothing. About 20 miles from home, the vibes suddenly got big and the power dropped right off, and off, and off, and stopped! The motor was completely locked up solid. Looking at the engine (while bored rigid waiting for the AA to take me home) I could feel the heat difference between the cylinders on my face. Oops! I got back home and decided to fit the old 250 motor ASAP as I had work in the morning, and dumped the bust 305 motor in the garden in disgust. It wasn't until weeks later that curiosity got the better of me and I opened it up. An oil blackened con rod, piston rings smooth with the piston, and an exhaust valve that looked like a matchstick could've had something to do with the problem! I can only guess that some gunk had blocked the oil path to some part on the right hand side of the engine. The engine went from great to gross in 300 miles, I guess that shows how quickly they can go off, though to be fair if you caned any engine that'd been rotting away in some damp corner for years, it would probably end in upset.With the 250 motor back in the frame, I enjoyed another few months of faithful service until while overtaking a stationary queue of cars at workmen's lights, some myopic goon in an Orion did a u-turn on me; the mix of adrenaline and braided hoses being better suited to screeching the front tyre than slowing me down! I ended up lying on his boot, with the bike revving its nuts off and a 2yr old kid in a baby seat staring at me through the rear window! Luckily there were loads of people around, because the gorilla that got out looked fairly pissed off! The whole rear panel of his car was caved in and the hubcap had exploded on impact. Surprisingly there was no damage to me, but the forks were pretty twisted. I managed to hold the wheel between my still shaking knees and twist the handlebars straight, before riding off only to discover that although the forks were no longer twisted, they were bent. From that day on, none handed riding just wasn't possible, as the bike would veer harshly off to the left. Conversely, the front brakes would have the bike lurching to the right!After a couple of months like this I'd gotten used to the handling, but when my mates said they were going on a ride round Britain, I knew it wasn't up to it. Scrounging around I dug up £600 for a mates old pre-divvy XJ600. It had no tax or MOT, I had a 33bhp license and no insurance, and to cap it all off, it wouldn't go into first, and had flat tyres! But then, that's another story...--><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>ASSetPropFlags   </span></span>is an undocumented feature of Flash, and is perhaps the most important   such action, because it allows you to unhide all other undocumented methods   contained within ActionScript. Because it is such a powerful means to interrogate   undocumented Flash features, there is always the possibility that Macromedia   may change this action significantly in future releases now that its existence   is known, so go easy and don’t rely on it being around in Flash 7. It is useful   for now simply as a way of looking at the total extent of ActionScript. For   example, the <span class=Code><span style='font-family:Courier'>ASSetPropFlags</span></span>   action was used in the production of this manual, because it allowed us to look   closely at the version of ActionScript contained in the Flash player itself   rather than believe anything anyone else told us!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This action is prone to change (and has changed between Flash   5 and 6; this entry refers to the Flash 6 version) and you should be wary of   using it for commercial work. Although it would allow you to protect the internal   objects/properties in advanced scripts you create (in things such as components,   something that will impress the pants off other designers who look enviously   at your open source work), be aware that it might stop working for Flash 7,   and he who laughs last...</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>In any case, there are always problems when deciding to include   undocumented features in a manual. We have included <span class=Code><spanstyle='font-family:Courier'>ASSetPropFlags</span></span> in particular because   it gives you an easy route to find any of the others we could not include. See   also <span class=ImportantWord><span style='font-family:Helvetica'>ASNative</span></span>,   the other undocumented feature we have included. We did this because it gives   an insight to how the Flash player actually works when it is dealing with scripting.</p>