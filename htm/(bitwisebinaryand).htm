<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12169686"><span lang=EN-US> &amp;Bitwise (binary) AND</span></a></h1><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>a = b &amp; c;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Where </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>b</span></span><span lang=EN-US>  and </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  are numbers that will be convertedto unsigned 32 bit numbers and ANDed together to form a new unsigned 32 bitnumber, which will be returned as </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>a</span></span><span lang=EN-US>. If </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>b</span></span><span lang=EN-US>  or </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  evaluate as anything else, theresult will be 0 because </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>b</span></span><span lang=EN-US>  or </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  will be undefined (and taken to be0).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Compatiblewith </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Flash 5 and above</span></span><span lang=EN-US>. Flash 4 used &quot;</span><span class=Code><spanlang=EN-US style='font-family:Courier;'>&amp;</span></span><span lang=EN-US> &quot; to mean string concatenation,a feature that can now be done in Flash 5 and above via &quot;</span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>+</span></span><span lang=EN-US> &quot;. Flash 4 files loaded intolater releases will be automatically updated to reflect this change. </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>&amp;</span></span><span lang=EN-US>  can be used as a <i>mask </i>or <i>filter </i>to ignore certain parts of a value. This usage is derivedfrom digital circuit design, something not well known to web designers! BitwiseAND is therefore under used, although very useful because it is </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>very processor efficient</span></span><span lang=EN-US>.</span></p><h3><span lang=EN-US> Description</span></h3><p class=MsoBodyText><span lang=EN-US> This </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>operator</span></span><span lang=EN-US> performs per bit (or bitwise) ANDing of twonumbers. The arguments are assumed to be unsigned 32 bit numbers, and thereturned value will be the same.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Thefollowing table shows how the &amp; operator works:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c = a &amp; b</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><b><span lang=EN-US> a     b          c</span></b></p><p class=MsoBodyText><span lang=EN-US> 0      0          0</span></p><p class=MsoBodyText><span lang=EN-US> 0      1          0</span></p><p class=MsoBodyText><span lang=EN-US> 1      0          0</span></p><p class=MsoBodyText><span lang=EN-US> 1      1          1</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c</span></span><span lang=EN-US>  is </span><span class=Code><span lang=EN-US style='font-family:Courier;'>1</span></span><span lang=EN-US>  if both </span><span class=Code><span lang=EN-US style='font-family:Courier;'>a</span></span><span lang=EN-US>  and </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>b</span></span><span lang=EN-US>  are also </span><span class=Code><spanlang=EN-US style='font-family:Courier;'>1</span></span><span lang=EN-US>. This binary table (sometimescalled a <i>truth table </i>in Boolean math)can be applied to every bit position of two 32 bit values expressed as binary.For example;</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>c = 345 &amp; 456</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>345 =     00000000 0000 0000 0000 0001 0101 1001</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>456 =     00000000 0000 0000 0000 0001 1100 1000</span></span></p><p class=MsoBodyText><spanclass=Code><span lang=EN-US style='font-family:Courier;'>          0000 0000 0000 0000 0000 0001 01001000 = 328</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> Writingbinary can be a long and error prone exercise, and is more usually expressed inhexadecimal. A 32 bit unsigned number can express all integers between 0 and4294967295 (0xFFFFFFFF).</span></p><p class=MsoBodyText><span lang=EN-US>                                                                                                               </span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=204 valign=top style='width:153.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Code</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> &nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Results</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  lang=EN-US style='font-family:Helvetica;'>Notes</span></span></p>  </td> </tr> <tr>  <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>a = 23.985878;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>b = a &amp; 0x</span></span><span lang=EN-US> FFFFFFFF;</span></p>  <p class=MsoBodyText style='margin-left:0cm'><span lang=EN-US> c = a &amp; 0xFFFFFFFE;</span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>b = 23 </span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>c = 22</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> ANDing any positive number with 0xFFFFFFFF results  in a 32 bit <i>integer</i>. This is one  way of discarding the decimal part of a number.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> c has been ANDed with a number that causes its least  significant bit to be masked out and ignored. This has the effect of  filtering out a jittering value. </span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>a = -10;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>b = 45;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>c = a &amp; b;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>d = b &amp;  &quot;cat&quot;;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>e = b &amp;  undefined;</span></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  lang=EN-US style='font-family:Courier;'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> AND assumes unsigned numbers. Using signed numbers  will return a meaningless number in c.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> &nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span lang=EN-US> d and e will be zero because a non-numeric result is  always assumed as zero.</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-US> Examples and practicaluses</span></h3><p class=MsoBodyText><span lang=EN-US> Uses ofthe </span><span class=Code><span lang=EN-US style='font-family:Courier;'>&amp;</span></span><span lang=EN-US>  operator are described as follows.</span></p><h4><span lang=EN-US> Motion Graphics</span></h4><p class=MsoBodyText><span lang=EN-US> BitwiseANDing a number with &amp;FFFFFFFF <span class=Code>is one way of discarding the decimal part ofa number, and it is a very processor efficient way of making sure that a motiongraphics algorithm always returns an integer (i.e. &quot;to the nearestpixel&quot;). The code:</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = x &amp; 0xFFFFFFFF;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> will return the samevalue as:</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = Math.floor(x);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> except that theformer is about 20% faster, something to bear in mind when optimizing timecritical loops that animate motion graphics.</span></span></p><h4><span lang=EN-US> Programming</span></h4><p class=MsoBodyText><span class=Code><span lang=EN-US> Bitwise ANDing anumber with a bit pattern that ignores the least significant bits returns a <i>filtered </i>version of the original. Forexample, if a value x was continuously being read from a UI component (such asa dial or slider) and the movement resulted in small variations in value(jitter) the following code would ignore changes in value of x of less than5:</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>x = x &amp; 0xFFFFFFFC;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US> &nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>0xC = 1100</span></span><span class=Code><span lang=EN-US>  as a binary bit pattern, so </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>AND</span></span><spanclass=Code><span lang=EN-US> ing </span></span><span class=Code><spanlang=EN-US style='font-family:Courier;'>0xFFFFFFFC</span></span><span class=Code><spanlang=EN-US style='font-family:Courier;'>with</span></span><spanclass=Code><span lang=EN-US>  anything results in the lowest two binary bitsbeing ignored. See</span></span><span lang=EN-US> the example </span><span class=FileName><span lang=EN-US style='font-family:Courier;'><a href="../fla/(bitwisebinaryand).fla">(bitwisebinaryand).fla</a></span></span><span lang=EN-US>  and </span><span class=FileName><spanlang=EN-US style='font-family:Courier;'><ahref="../swf/(bitwisebinaryand).swf">(bitwisebinaryand).swf</a></span></span><span lang=EN-US>  .</span></p><h3><span lang=EN-US> Tips and Precautions</span></h3><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>&amp;</span></span><span lang=EN-US>  is not the same as </span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>&amp;&amp;</span></span><span lang=EN-US>,whichperforms Booleanlogic, and can work with many more types. If you are working with anythingother than numbers (and especially in </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>if...</span></span><span lang=EN-US>  actions to form decisionstructures) you should use </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>&amp;&amp;</span></span><span lang=EN-US>.</span></p>