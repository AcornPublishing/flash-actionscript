<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><span lang=EN-GB>NaN</span></h1><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>variable is a predefined value for &quot;Not a Number&quot;.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB>This variable is </span></span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>compatiblewith Flash Player 5 and later.</span></span><span class=Code><span lang=EN-GB> </span></span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>Flash 4 willreturn a value of undefined instead of NaN.</span></span><span class=Code><spanlang=EN-GB> </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB>See also </span></span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>Number.NaN </span></span><spanlang=EN-GB>and </span><span class=ImportantWord><span lang=EN-GBstyle='font-family:Helvetica'>isNaN().</span></span><span lang=EN-GB><spanclass=Code>. </span></span></p><h3><span lang=EN-GB>Description</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>variable </span></span><spanlang=EN-GB>is the IEEE-754 standard value for </span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>Not a Number.</span></span><spanlang=EN-GB> The value Not a Number can occur when a non-numeric value is usedinstead of a numeric value or when a result that should be a number is returnedas anything other than a number from a function. For example, if you try toconvert the string </span><span class=Code><span lang=EN-GB style='font-family:Courier'>“Flash” </span></span><span lang=EN-GB>to a number, the result will be</span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN.</span></span><spanlang=EN-GB> Converting an empty string to a number will likewise cause </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN.</span></span><spanlang=EN-GB> However, you could convert the string </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>“345” </span></span><span lang=EN-GB>properly to a number. This conversion from string to number occurs most oftenwith the Flash 5 and later </span><span class=ImportantWord><span lang=EN-GBstyle='font-family:Helvetica'>Number() </span></span><span lang=EN-GB>function.Also, a value of </span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>will arise when obtaining inputfrom a user, expecting a number but obtaining a string instead. For example, ifthe user types </span><span class=Code><span lang=EN-GB style='font-family:Courier'>“ten” </span></span><span lang=EN-GB>instead of </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>“10” </span></span><spanlang=EN-GB>a value of </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>NaN </span></span><span lang=EN-GB>will result. The</span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>variable can be used in tests using the </span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>if </span></span><spanlang=EN-GB>statement to ensure you are working with numeric values. </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>has the same value as </span><span class=ImportantWord><spanlang=EN-GB style='font-family:Helvetica'>Number.NaN.</span></span><spanlang=EN-GB></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 width=590 style='width:442.6pt; margin-left:14.2pt;border-collapse:collapse;border:none;'> <tr> <td width=276 valign=top style='width:207.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=161 valign=top style='width:120.8pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Additional explanation </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=153 valign=top style='width:114.6pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Notes </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>Math.round(“foo”); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>trace(Number(“Fifteen”)); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>trace(Number(1+“ten”)); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>trace(Number(“”)); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=161 valign=top style='width:120.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>These actions will return </span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><span  lang=EN-GB>as these strings cannot be converted to a number.</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=153 valign=top style='width:114.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=TableText align=left style='margin-left:0in;text-align:left'>Any numeric operation that is performed on a string will result in <span  class=Code><span style='font-size:9.5pt;font-family:  Courier'>NaN </span></span>if the string cannot be converted to a number.</p>  <p class=TableText>&nbsp;</p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>if (myNum == NaN){... </span></span></p>  </td>  <td width=161 valign=top style='width:120.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>If </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>myNum </span></span><span  lang=EN-GB>has the value </span><span class=Code><span lang=EN-GB  style='font-family:Courier'>NaN,</span></span><span lang=EN-GB> returns </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>true </span></span><span  lang=EN-GB>otherwise returns </span><span class=Code><span lang=EN-GB  style='font-family:Courier'>false.</span></span><span lang=EN-GB></span></p>  </td>  <td width=153 valign=top style='width:114.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB>You can explicitly test for the value </span></span><span class=Code><span  lang=EN-GB style='font-family:Courier'>NaN </span></span><span class=Code><span  lang=EN-GB> using a comparison. </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>if (num1 == num2) {... </span></span></p>  </td>  <td width=161 valign=top style='width:120.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>If either variable is a </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>NaN,</span></span><span lang=EN-GB> the result is </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>false.</span></span><span  lang=EN-GB></span></p>  </td>  <td width=153 valign=top style='width:114.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>Comparison operations with </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>NaN </span></span><span lang=EN-GB>will always be </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>false </span></span><span  lang=EN-GB>except for </span><span class=ImportantWord><span lang=EN-GB  style='font-family:Helvetica'>not equal (!=).</span></span><span lang=EN-GB></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>Num1=Math.round(“string”); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>Num2=Num1+5; </span></span></p>  </td>  <td width=161 valign=top style='width:120.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>Num2 </span></span><span lang=EN-GB> will result in a value of </span><span class=Code><span lang=EN-GB  style='font-family:Courier'>5.</span></span><span lang=EN-GB> Any operation performed with a </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>NaN </span></span><span lang=EN-GB>value will not cause another </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>NaN.</span></span><span  lang=EN-GB> Instead, the </span><span class=Code><span lang=EN-GB  style='font-family:Courier'>NaN </span></span><span lang=EN-GB>value is treated as a number in the calculation, even though it has no real value.</span></p>  </td>  <td width=153 valign=top style='width:114.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:-.2pt'><span lang=EN-GB>Performing operations on a value that was set to </span><span class=Code><span  lang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>for any reason will not cause execution errors in the script, but will most likely cause errors in results. The only way to discover these errors is careful analysis of the code and the use of breakpoints and </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>trace() </span></span><span  lang=EN-GB>actions to examine variable values.</span></p>  <p class=MsoBodyText style='margin-left:-.2pt'>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-GB>Examples and practical uses</span></h3><p class=MsoBodyText><span lang=EN-GB>Encountering a </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>valuein your code almost always means that an error has occurred (it is highlyunlikely you will want to introduce </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>NaN </span></span><span lang=EN-GB>valuesdeliberately). For the most part, you should treat </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>as avalue you don’t want to encounter, and check variables for this value toprevent errors later in the script. Use conditionals to check for </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>s. See <a href="../fla/nan.fla">nan.fla</a>/ <a href="../swf/nan.swf">nan.swf</a>for an example of using strings and the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number() </span></span><span lang=EN-GB>function. </span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>variable is included in Flash to represent &quot;Not a Number&quot; as definedin IEEE-754. IEEE-754 defines a standard for using single precision (32 bit)and double precision (64 bit) floating point </span></p><p class=MsoBodyText><span lang=EN-GB>numbers. In particular, the standarddictates that if the exponent is 255 or higher (single precision) or 2047 orhigher (double precision) the result is always “Not a Number” because it is outof range. A value of </span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>is returned when a function thatshould return a numeric result can’t do so for some reason. </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>is also returned by calculations that generate </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>undefined </span></span><spanlang=EN-GB>results (such as dividing zero by zero, or taking the square rootof –1. By assigning a specific value (</span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>NaN </span></span><span lang=EN-GB>) the operation,function, or method generates a result properly without causing an error in theoperation, function or method itself, even if the returned result is not a realnumber. </span><span class=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>NaN is not the same as the value undefined.</span></span><spanlang=EN-GB> A </span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>is returned when a conversion to anumber cannot be completed. An </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>undefined </span></span><span lang=EN-GB>is returnsif a variable does not have a value or an expression cannot be evaluated.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>valueis often used to check for a proper numeric return from a method or eventhandler. For example, the method:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>Math.atan2(myNum1); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… will return </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>asthe correct number of parameters is not supplied (the Math.atan2 methodrequires two parameters). The value of </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>canalso be returned if the parameters are not of the proper type. For example:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>Math.atan2(myNum1,myNum2); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>will return </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>ifeither of the parameters is a string instead of a number. In both cases, the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Math.atan2() </span></span><spanlang=EN-GB>method returns a result properly, but it is a </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>result.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Since </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>is apredefined variable value you can check for a return of </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>using a standard </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>if </span></span><span lang=EN-GB>condition:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>if( Math.atan2(Num1, Num2) == NaN ) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> // code to handle error condition </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=ImportantWord><spanlang=EN-GB style='font-family:Helvetica'>isNaN </span></span><span lang=EN-GB>function can be used to check for a </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>NaN </span></span><span lang=EN-GB>value stored ina variable or returned from a function or method. The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>isNaN </span></span><span lang=EN-GB>function can be negated to flip the logic. A typical example of using the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>value is checking the result of a conversion from a string to anumeric value. For example, this code uses the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>isNaN() </span></span><span lang=EN-GB>function to convert a string to a number (the string could have come from userinput in a form):</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>if(isNaN(myString)) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> trace (“The input is not a number.Exiting…”); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> return; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>else{ </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> set myNumber = integer(myString) * 100; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> // or whatever code you need to perform onthe converted number </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The value </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>isthe same as that in </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Number.NaN.</span></span><span lang=EN-GB> See </span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>Number.NaN </span></span><spanlang=EN-GB>and </span><span class=ImportantWord><span lang=EN-GBstyle='font-family:Helvetica'>isNaN().</span></span><span lang=EN-GB></span></p><h3><span lang=EN-GB>Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-GB>As a general rule, when you are workingwith values that should be numbers, use the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number() </span></span><span lang=EN-GB>function to convert to numeric data types and check for a </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><spanlang=EN-GB>value. By default, Flash will assume that all user inputs will bestrings unless you specifically make them into numbers. You can forceconversion to numbers in the code by using the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number() </span></span><span lang=EN-GB>function, but you can also force only numbers as valid entries on the form. Toforce an input field to accept only numbers, highlight the field then selectthe </span><span class=ScreenText><span lang=EN-GB style='font-family:Optima'>Character </span></span><spanlang=EN-GB>button in the Property inspector window. Check </span><spanclass=ScreenText><span lang=EN-GB style='font-family:Optima'>Only </span></span><spanlang=EN-GB>and </span><span class=ScreenText><span lang=EN-GBstyle='font-family:Optima'>Numerals </span></span><span class=ScreenText><spanlang=EN-GB style='font-family:Optima'>(0-9).</span></span><span lang=EN-GB> Ifyou want to allow decimal numbers, in the </span><span class=ScreenText><spanlang=EN-GB style='font-family:Optima'>And </span></span><span class=ScreenText><spanlang=EN-GB style='font-family:Optima'>these </span></span><spanclass=ScreenText><span lang=EN-GB style='font-family:Optima'>characters </span></span><spanlang=EN-GB>field add the decimal point. To allow negative numbers, you need toadd the minus sign to the field, too, like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB><img border=0 width=279 height=274src="../png/0586-dict9-01.png"></span></p><p class=Picturereference><span lang=EN-GB> </span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>variable is useful for checking whether a user’s input is a number, as well aschecking whether the return from a function or method is a number or not.Checking for a </span><span class=Code><span lang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>value can prevent propagation oferrors further into a script. If your ActionScript code appears to begenerating strange results, the fault may be a </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>NaN </span></span><span lang=EN-GB>value. You can check for </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>NaN </span></span><span lang=EN-GB>s either bycoding a conditional, or for debugging purposes by inserting trace statementsto display a variable’s values. For example, if you obtain a value from a userin a variable called </span><span class=Code><span lang=EN-GB style='font-family:Courier'>myNum,</span></span><span lang=EN-GB> display the numeric equivalentwith this statement:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>trace(Number(myNum)); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>If you do not see a numeric valuereturned from this statement, then the variable is holding a string and causingthe problem. To prevent this problem, use a conditional in the code to checkfor a string value (and prompt the user for a numeric result) or force anumeric input only.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Using the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number() </span></span><span lang=EN-GB>function on an </span><span class=Code><span lang=EN-GB style='font-family:Courier'>undefined </span></span><span lang=EN-GB>value will return an actualvalue of zero. The code:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>trace(Number(undefined)); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… will result in zero, which is not anintuitive result.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>With Flash Player 5 and earlier, usingthe </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Math.pow() </span></span><spanlang=EN-GB>method with a negative number would return a </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>NaN.</span></span><spanlang=EN-GB> This problem was fixed with Flash Player </span><span lang=EN-GBstyle='font-size:10.0pt;font-family:Geneva'>5.0r41 and later. For example, thecode:</span></p><p class=MsoBodyText><span lang=EN-GB style='font-size:10.0pt;font-family:Geneva'>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>if(Math.pow(-5,5) == NaN) {... </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… would always be </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>true </span></span><spanlang=EN-GB>prior to Flash Player </span><span lang=EN-GB style='font-size:10.0pt;font-family:Geneva'>5.0r41. </span></p>