<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>= assignment</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = a; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = d =e = f; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><span style='font-family:Courier'>f </span></span>are any literal, array element or object property, or an expression that can beresolved to one of these data types. <span class=Code><span style='font-family:Courier'>b </span></span>and <spanclass=Code><span style='font-family:Courier'>c </span></span>are any variable, array element orwritable object property. <span class=Code><span style='font-family:Courier'>b </span></span>will be returned with value <spanclass=Code><span style='font-family:Courier'>a,</span></span><span class=Code></span>and <span class=Code><spanstyle='font-family:Courier'>c,</span></span><i></i><span class=Code><span style='font-family:Courier'>d </span></span>and <span class=Code><spanstyle='font-family:Courier'>e </span></span>will be returned with value <span class=Code><span style='font-family:Courier'>f. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This operator is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 or later. </span></span>The <span class=Code><span style='font-family:Courier'>= </span></span>operatorevaluates the right hand side and assigns it to the left hand. <spanclass=ImportantWord><span style='font-family:Helvetica'>Note that the Flash 4 =operator works with numbers only. </span></span></p><h3>Description</h3><p class=MsoBodyText>This section briefly describes the operator, and thenshows a table of typical uses, as shown below.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=276 valign=top style='width:207.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=264 valign=top style='width:2.75in;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText style='text-indent:-14.2pt'><span class=Code><span  style='font-family:Courier'>a = 2; </span></span></p>  <p class=MsoBodyText style='text-indent:-14.2pt'><span class=Code><span  style='font-family:Courier'>b = c = a; </span></span></p>  <p class=MsoBodyText style='text-indent:-14.2pt'><span class=Code><span  style='font-family:Courier'>d = “cat”; </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=264 valign=top style='width:2.75in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 2,</span></span><span  class=Code> </span><span class=Code><span style='font-family:Courier'>b = 2,</span></span><span class=Code> </span><span class=Code><span  style='font-family:Courier'>c = 2,</span></span><span class=Code> </span><span  class=Code><span style='font-family:Courier'>d = “cat” </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=276 valign=top style='width:207.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>if (x = 2) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  //do this </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>if (x == 2) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>  //do this </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  </td>  <td width=264 valign=top style='width:2.75in;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Make sure you know the difference between the <span  class=Code><span style='font-family:Courier'>= </span></span>operator (assignment) and <span class=ImportantWord><span style='font-family:Helvetica'>== </span></span> operator (equality). The first listing will incorrectly make <span  class=Code><span style='font-family:Courier'>x </span></span>equal to <span  class=Code><span style='font-family:Courier'>2, </span></span>and the ‘<span  class=Code><span style='font-family:Courier'>do this </span></span>’ code will always run irrespective of the original value of <span class=Code><span  style='font-family:Courier'>x, </span></span>whereas the second one will check whether <span class=Code><span style='font-family:Courier'>x </span></span> is equal to <span class=Code><span style='font-family:Courier'>2, </span></span> and execute the ‘<span class=Code><span style='font-family:Courier'>do this </span></span>’ code only if it is.</p>  <p class=MsoBodyText> </p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>Equality is used in almost all ActionScript you write.</p><h3>Tips and precautions</h3><p class=MsoBodyText>The biggest mistake made with the <span class=Code><spanstyle='font-family:Courier'>= </span></span>operator is confusing it with <spanclass=ImportantWord><span style='font-family:Helvetica'>==, </span></span>asshown in the example above. It is likely that you will <i>never </i>need to add <span class=Code><span style='font-family:Courier'>= </span></span>as part of a conditional in an <span class=ImportantWord><spanstyle='font-family:Helvetica'>if </span></span>statement,so if an <span class=ImportantWord><span style='font-family:Helvetica'>if </span></span>statement seems to be working incorrectly, checking that you have a ‘<spanclass=Code><span style='font-family:Courier'>== </span></span>’ and not a ‘<spanclass=Code><span style='font-family:Courier'>= </span></span>’ is one of thefirst things you should do.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Although it is possible to use code like the listing shownbelow, and mix <span class=Code><span style='font-family:Courier'>= </span></span>and <span class=ImportantWord><span style='font-family:Helvetica'>== </span></span>operators, such programming is more about flaunting the grasp of syntax thecoder has rather than writing clean code – avoid!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>d =(a=b) == c; </span></span></p><p class=MsoBodyText>&nbsp;</p><h4><span class=ImportantWord><span style='font-size:9.5pt;font-family:Helvetica;font-weight:normal'>Advanced use of equality:References and Copies </span></span></h4><p class=MsoBodyText>It is important to realize that Flash will sometimesreturn a <span class=ImportantWord><span style='font-family:Helvetica'>reference </span></span>instead of simply copying when you use <span class=Code><spanstyle='font-family:Courier'>=. </span></span>If you do this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = b; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… then <span class=Code><span style='font-family:Courier'>a </span></span>will become the same value as <span class=Code><span style='font-family:Courier'>b </span></span>if <span class=Code><span style='font-family:Courier'>b </span></span>is avariable or property that holds a primitive (<span class=ImportantWord><spanstyle='font-family:Helvetica'>Boolean, </span></span><span class=ImportantWord><spanstyle='font-family:Helvetica'>String </span></span>or <spanclass=ImportantWord><span style='font-family:Helvetica'>Number </span></span>).This means that if b changes <i>after the assignment</i>,<spanclass=Code><span style='font-family:Courier'>a </span></span>and <spanclass=Code><span style='font-family:Courier'>b </span></span>will no longer beequal:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = b; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 3; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(a==b); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The above code will return <span class=Code><spanstyle='font-family:Courier'>false. </span></span>This is because <spanclass=Code><span style='font-family:Courier'>a=b </span></span>causes <spanclass=Code><span style='font-family:Courier'>a </span></span>to beoverwritten with a <span class=ImportantWord><span style='font-family:Helvetica'>copy </span></span>of the value of <span class=Code><span style='font-family:Courier'>b.</span></span><i></i>When this is no longer <span class=Code><span style='font-family:Courier'>true </span></span>because you have changed <span class=Code><span style='font-family:Courier'>b, </span></span><span class=Code><span style='font-family:Courier'>a </span></span>isno longer equal to <span class=Code><span style='font-family:Courier'>b. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you do this when <span class=Code><spanstyle='font-family:Courier'>b </span></span>is an object that cannot bereduced to a single primitive, such as:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span style='font-family:"Courier New"'>a = b;</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… <span class=Code><span style='font-family:Courier'>a </span></span>will <i>not </i>become equal to <span class=Code><span style='font-family:Courier'>b. </span></span>Instead, it will hold a <span class=ImportantWord><span style='font-family:Helvetica'>reference </span></span>to the object <span class=Code><spanstyle='font-family:Courier'>b. </span></span>If <span class=Code><spanstyle='font-family:Courier'>b </span></span><i>changes after the assignment, </i><spanclass=Code><span style='font-family:Courier'>a </span></span><i>will notchange, but because </i><span class=Code><span style='font-family:Courier'>a </span></span><i>is simply a reference to </i><span class=Code><span style='font-family:Courier'>b,</span></span><i></i><span class=Code><span style='font-family:Courier'>a </span></span><i>willstill equal </i><span class=Code><span style='font-family:Courier'>b. </span></span></p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = newArray(2, 3, 4); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = b; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b[1] =1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(a== b); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The above code will still return <span class=Code><spanstyle='font-family:Courier'>true, </span></span>even though <span class=Code><spanstyle='font-family:Courier'>b </span></span>has changed at line 3 since thetime when <span class=Code><span style='font-family:Courier'>b=a </span></span>on line 2. This is because <span class=ImportantWord><span style='font-family:Helvetica'>the reference has caused a to change as b changes.</span></span><i></i></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Let’s see what happens if you equate functions to events.If you attach this script to frame 1 of <span class=Code><spanstyle='font-family:Courier'>_root </span></span>:</p><p class=MsoBodyText style='margin-left:0in'>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionmyFunction(){ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(“hello”); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.onEnterFrame= myFunction; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… you have equated the <span class=Code><spanstyle='font-family:Courier'>onEnterFrame </span></span>of <span class=Code><spanstyle='font-family:Courier'>_root </span></span>to the function <spanclass=Code><span style='font-family:Courier'>myFunction.</span></span><i> </i>Ifyou now change the function at frame 50 to:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionmyFunction() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    trace(&quot;bye&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… this <i>will not </i>change the message that <spanclass=Code><span style='font-family:Courier'>_root.onEnterFrame </span></span>outputs. <span class=Code><span style='font-family:Courier'>_root.onEnterFrame </span></span>is <i>not a reference to </i><span class=Code><span style='font-family:Courier'>myFunction, </span></span><i>it is a copy of it.</i></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you equate something to a movie clip, you will <i>always</i>equate to a <span class=ImportantWord><span style='font-family:Helvetica'>reference </span></span>to the movie clip:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a =_root.myClip_mc; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a </span></span>does not become a copy of <span class=Code><span style='font-family:Courier'>_root.myClip_mc, </span></span>but a copy of the target path to it. This is just another way of saying <spanclass=Code><span style='font-family:Courier'>a </span></span>becomes a <spanclass=ImportantWord><span style='font-family:Helvetica'>reference </span></span>to the movie clip.</p>