<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc16343126">void</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>void[(expression)]</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>where </span><span class=Code><spanstyle='font-family:Courier'>expression</span></span><span class=Code> is a validFlash expression</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Compatible with </span><spanclass=ImportantWord><span style='font-family:Helvetica'>Flash Player 5 andlater</span></span><span class=Code>. </span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>void</span></span><spanclass=Code>operator </span>ignores the expression provided as an argument andreturns a value of <span class=Code><span style='font-family:Courier'>undefined</span></span>.The <span class=Code><span style='font-family:Courier'>void</span></span>operator is excellent for use when testing your code. Rather than altering thevalue of a variable, you can use the void operator to temporarily change thevalue of a variable, to simulate certain situations.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>void</span></span><span class=ImportantWord><span style='font-family:Helvetica'>operator</span></span>is used to ignore the argument and return an <span class=Code><spanstyle='font-family:Courier'>undefined</span></span> value<span class=Code>. This isuseful in comparison operations to test for undefined values.</span></p><h3>Examples and practical uses</h3><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>void()</span></span><span class=Code> operator tellsFlash to ignore the current expression and carry on as if it were </span><spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>.It is preferable to simply deleting the expression because the code remainsintact and:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-18.0pt;'><span class=Code><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code>You do not have to modify the surroundingcode to allow for any deletions. You can therefore debug your code morerigorously than simple deletion.</span></p><p class=MsoBodyText style='margin-left:50.2pt;text-indent:-18.0pt;'><span class=Code><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code>The actions window will still check forsyntax errors, and color code the script as required. This would not occur ifyou commented code out.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>The following code uses the </span><spanclass=Code><span style='font-family:Courier'>Math.sin</span></span><spanclass=Code>method and assigns it to a variable </span><span class=Code><spanstyle='font-family:Courier'>x</span></span><span class=Code><i>.</i></span></p><p class=MsoBodyText><span class=Code><i>&nbsp;</i></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x =Math.sin(0.5);</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>By changing it as follows, you can force Flash toignore the </span><span class=Code><span style='font-family:Courier'>Math.sin</span></span><spanclass=Code>and return </span><span class=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>.This allows you to test what your code would do if </span><spanclass=Code><span style='font-family:Courier'>x</span></span><spanclass=Code>werereturned under normal conditions as an undefined value:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x =void Math.sin(0.5);</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following code defines an <span class=Code><spanstyle='font-family:Courier'>onEnterFrame</span></span> event:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.onEnterFrame=  function() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;hello&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To run the code as if the <span class=Code><spanstyle='font-family:Courier'>onEnterFrame</span></span> was not defined, youwould change it as follows:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.onEnterFrame=  void function() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;hello&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>};</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following code is an <span class=Code><spanstyle='font-family:Courier'>if...else</span></span> decision branch:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x = 20;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(x&lt;10) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;x is less than 10&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} else{</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;x is equal to or greater than10&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>The following code allows you to test what thecode would do if the conditional expression returned undefined:</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>x = 20;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(void x&lt;10) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;x is less than 10&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} else{</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(&quot;x is equal to or greater than10&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>Notice that we don't have to make </span><spanclass=Code><span style='font-family:Courier'>x</span></span><span class=Code> itselfundefined. Where we are using complex conditionals with a number of inputs,making the <i>expression </i>itself undefined rather than its inputs allows youto make more direct changes to your code when testing it.</span></p><h3>Tips and precautions</h3><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>void</span></span><span class=Code> operatorallows you to selectively disable certain parts of your code. In many cases,this is more useful during debugging than either deleting the code orcommenting it out, because it leaves the rest of your scripting environmentintact. In particular:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=Bullet-Level1><span class=Code><span lang=EN-USstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> A </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>void</span></span><spanclass=Code><span lang=EN-US>  value will still exist (although it has a value of </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>undefined</span></span><spanclass=Code><span lang=EN-US> ), rather than not existing at all. This allows scripts that use thepart you have voided to carry on working in a fashion closer to normaloperation than if you just commented code out (or deleted it). </span></span></p><p class=Bullet-Level1><span class=Code><span lang=EN-USstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> A </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>void</span></span><spanclass=Code><span lang=EN-US>  value will still show up in the debugger, so you can see what latercode does, with respect to changing this value. This allows you to see the sideeffects of code you are in the process of investigating in a more thoroughmanner; </span></span><span class=Code><span lang=EN-US style='font-family:Courier'>void()</span></span><span class=Code><span lang=EN-US>  allows you toswitch out functionality selectively.</span></span></p><p class=Bullet-Level1><span class=Code><span lang=EN-USstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> It is usuallyeasier to temporarily </span></span><span class=Code><span lang=EN-USstyle='font-family:Courier'>void</span></span><span class=Code><spanlang=EN-US> alarge function or object definition than it is to comment it out or delete it,and therefore easier to re-instate it.</span></span></p><p class=Bullet-Level1><span class=Code><span lang=EN-USstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> It is easier to</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>void</span></span><spanclass=Code><span lang=EN-US>  an expression rather than make it </span></span><span class=Code><spanlang=EN-US style='font-family:Courier'>undefined</span></span><span class=Code><spanlang=EN-US> bychanging its input values, especially as your expressions get moremathematically complicated.</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText>Although, not well known, the <span class=Code><spanstyle='font-family:Courier'>void</span></span> operator does not have to beused in conjunction with isolation brackets, although, sometimes it may benecessary. For example, execute the following two code blocks to see thedifference:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 10;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 10;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = 5;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>d = 5;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(voida + b + c + d); // returns 20</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>or</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 10;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 10;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = 5;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>d = 5;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(void(a+ b) + c + d); // returns 10</span></span></p>