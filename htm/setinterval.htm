<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="OLE_LINK1"></a><a name="OLE_LINK2">setInterval</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>setInterval(functionName,interval [, arg1,...., argN]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>setInterval(object,methodName, interval [, arg1,...., argN]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>intID= setInterval(functionName, interval [, arg1,...., argN]); </span></span></p><h4>Syntax1</h4><p class=MsoBodyText>Where <span class=Code><spanstyle='font-family:Courier'>functionName </span></span>is a named function, <span class=Code><spanstyle='font-family:Courier'>interval </span></span>is the desired length of time, in milliseconds, in which thefunction will be repeatedly called, and <span class=Code><spanstyle='font-family:Courier'>arg1 </span></span>through<span class=Code><span style='font-family:Courier'>argN </span></span>are optional parameters that will bepassed to <span class=Code><span style='font-family:Courier'>functionName. </span></span></p><h4>Syntax2</h4><p class=MsoBodyText>Where <span class=Code><spanstyle='font-family:Courier'>object </span></span>is a reference to an object (or class), <spanclass=Code><span style='font-family:Courier'>methodName </span></span>is the name of a method of <spanclass=Code><span style='font-family:Courier'>object </span></span>which will beexecuted, and <span class=Code><span style='font-family:Courier'>interval </span></span>is the length of time, inmilliseconds, in which the method will be executed, continually. <spanclass=Code><span style='font-family:Courier'>arg1 </span></span>through <spanclass=Code><span style='font-family:Courier'>argN </span></span>are optional parameters.</p><h4>Syntax3</h4><p class=MsoBodyText>Where everything is identical to Syntax 1 but <spanclass=Code><span style='font-family:Courier'>intID </span></span>will contain anumber representing that particular interval’s ID.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This object is <spanclass=ImportantWord><span style='font-family:Helvetica'>compatible with Flash 6and above. </span></span>There are <span class=ImportantWord><spanstyle='font-family:Helvetica'>no known issues </span></span>with any version ofFlash that supports this object.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><spanstyle='font-family:Courier'>setInterval </span></span>function is used tocreate an event that repeats continuously until the Flash movie is closed orthe <span class=ImportantWord><span style='font-family:Helvetica'>clearInterval </span></span>function is passed the interval’s ID.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>A method of an object, a named function or ananonymous function can be supplied to the <span class=Code><spanstyle='font-family:Courier'>setInterval </span></span>function and it willalways return a number, a reference for the interval. The <spanclass=Code><span style='font-family:Courier'>interval </span></span>parametershould be a number representing the number of milliseconds in which to repeatthe event. See also <span class=ImportantWord><spanstyle='font-family:Helvetica'>clearInterval. </span></span></p><h3>Description</h3><p class=MsoBodyText>This function is used to set up a repeat eventin which the user defines how often the event will occur.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=220 valign=top style='width:164.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Additional explanation </span></span></p>  </td>  <td width=178 valign=top style='width:133.55pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br><span class=Code><span style='font-family:Courier'>setInterval( function () { trace(&quot;repeat event&quot;); }, 1000); </span></span></p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> The following code will send the string <span class=Code><span  style='font-family:Courier'>“repeat event” </span></span>to the Output window.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This code uses an anonymous function. Therefore the only way to manipulate this repeat event is to remove the interval using <span class=Code><span style='font-family:  Courier'>clearInterval </span></span>the interval’s ID and redefine it referencing a named function or new anonymous function.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>myObject = new Object(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>myObject.myMethod = function () { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(&quot;my trace&quot;); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>setInterval(myObject, &quot;myMethod&quot;, 1000); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The following code sets a repeat event to call the <span class=Code><span style='font-family:  Courier'>myMethod </span></span>method of the <span  class=Code><span style='font-family:Courier'>myObject </span></span>Object every second.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This example uses the object version of the <span  class=Code><span style='font-family:Courier'>setInterval </span></span> function.</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>function intCallback(arg1, arg2) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(arg1); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(arg2); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>setInterval(intCallback, 1000, &quot;argument 1&quot;, &quot;argument 2&quot;); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The following code passes two arguments to the <span class=Code><span style='font-family:Courier'>intCallback </span></span> function.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>function intCallback(argumentString) { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(argumentString[0]); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(argumentString[1]); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>setInterval(intCallback, 1000, [&quot;argument 1&quot;, &quot;argument 2&quot;]); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The following code passes two arguments to the <span class=Code><span style='font-family:Courier'>intCallback </span></span> function.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The arguments are supplied in the array <span  class=Code><span style='font-family:Courier'>argumentString </span></span> with each argument in a different key.</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>function traceValue() { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> // code here </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>} </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>setInterval(&quot;traceValue&quot;, 1000); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This code will not create an interval.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>If you’re using the function method of the <span  class=Code><span style='font-family:Courier'>setInterval </span></span> function (rather than the object method), don’t pass the function name as a string. You need to pass a reference to the function.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This code will create not an interval.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>If you using the function method of the <span  class=Code><span style='font-family:Courier'>setInterval </span></span> function (rather than the object method), you need to reference the function, not name it.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=220 valign=top style='width:164.7pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>myObject = new Object(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>myObject.myMethod = function () { </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'> trace(&quot;my trace&quot;); </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>} </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span style='font-family:  Courier'>setInterval(myObject, myMethod, 1000); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=174 valign=top style='width:130.35pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>This code won’t create an interval.</p>  </td>  <td width=178 valign=top style='width:133.55pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>The <span class=Code><span  style='font-family:Courier'>methodName </span></span>parameter of the <span  class=Code><span style='font-family:Courier'>setInterval </span></span> function (when using it in object mode) needs to be a String. However, the actual reference to the object cannot be a String value.</p>  </td> </tr></table><h3>Examplesand practical uses</h3><h4>MotionGraphics</h4><p class=MsoBodyText>There are two types of animation that you cancreate in Flash, frame-based or time-based. Frame-based animation will move anobject whenever a new frame is encountered, while time-based animation willmove an object whenever a certain amount of time has elapsed. The advantage oftime-based animation over frame-based animation is that all computers, slow andfast, will see the animation at speeds and results that are closer to eachother than if the animation were frame based.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>When your movie is playing at a high frame rate,such as 24 FPS, your animation will be smoother than if it had an FPS of 12 –however you need a computer that is fast enough to process the information oneach frame at that rate. If your computer cannot draw each frame as quickly asit needs to (in the Flash Player), it will skip the necessary frames to keepup, causing your animation to become jumpy. However, each computer can representtime at the same speed, therefore reducing the lag that a frame-based animationmay have on slower computers. There is still a chance of lag however.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Another advantage time-based animation has overframe-based animation is that it is frame independent. This means, you couldimport an animation into a Flash movie running at 12 FPS and 24 FPS withoutaffecting the time that the animation takes to complete. However, if you didthis with a frame-based animation, the 12 FPS movie would be much slower, sincethere is only half the amount of frames being processed each second.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the example <ahref="../fla/setinterval.fla">setinterval.fla</a> / <ahref="../swf/setinterval.swf">setinterval.swf</a> to see ananimation controlled by <span class=Code><span style='font-family:Courier'>setInterval. </span></span></p><h4>Programming</h4><p class=MsoBodyText>The <span class=Code><spanstyle='font-family:Courier'>setInterval </span></span>method is excellent forimproving your programming and making it much easier to read and manage. Forexample, if you had a news page that you wanted to update every 10 minutes, allyou need is an interval to call a function that will update the information:</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>intID= setInterval(updateNews, 600000); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>on(release){ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> // cease automatic update of the news whenthe user clicks this button </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> clearInterval(intID); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The code creates an interval to call a customfunction <span class=Code><span style='font-family:Courier'>updateNews </span></span>every six hundred thousand milliseconds (which is 10 minutes).</p><h3>Tipsand precautions</h3><h4>Removingyour intervals</h4><p class=MsoBodyText>When using intervals you may not want to usethem for the entire length of the movie. Make sure you assign the interval’s idto a variable or an array. Then you can clear the interval when you’ve finishedusing it. The following code is an example of naming keys in an array to storethe interval’s id so you can easily remove it at a later time. It is mucheasier to store the interval identifiers in an array rather than manyvariables:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>intIds= new Array(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject= new Object(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.myMethod= function () { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> trace(&quot;myObject.myMethod&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function1= function () { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> trace(&quot;function1&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>intIds[&quot;keyName&quot;]= setInterval(myObject, &quot;myMethod&quot;, 1000); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>intIds[&quot;function1&quot;]= setInterval(function1, 500); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>//Attach the following code to buttons. These buttons will cancel the intervals </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>on(release){ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> clearInterval(intIds[&quot;keyName&quot;]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>on(release){ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'> clearInterval(intIds[&quot;function1&quot;]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><h4><spanclass=Code><span style='font-size:9.5pt;'>Incrementing IDs </span></span></h4><p class=MsoBodyText><span class=Code>The IDs that the </span><spanclass=Code><span style='font-family:Courier'>setInterval </span></span><spanclass=Code>method generates increment continuously. For example, the following codedemonstrates the interval’s ID’s:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>int1ID= setInterval(functionName, 1000); // id of 1 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>int2ID= setInterval(funationName, 1000); // id of 2 </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>clearInterval(int2ID);// interval referenced by int2ID no longer exists </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>int3ID= setInterval(functionName, 1000); // id of 3 </span></span></p>