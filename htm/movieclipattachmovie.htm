<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>MovieClip.attachMovie</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myMovieClip.attachMovie(linkage, instancename, depth [,propertyobject])</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myMovieClip</span></span>is a movie clip instance upon whosetimeline you want to attach (or ‘copy from the Library’) your movie clips, <spanclass=Code><span style='font-family:Courier'>linkage</span></span> is thelinkage name of the movie clip in the Library that you want to attach, <spanclass=Code><span style='font-family:Courier'>instancename</span></span> is theinstance name you want to give the attached movie clip, <span class=Code><spanstyle='font-family:Courier'>depth</span></span> is the level at which the movieis to be copied into, and <span class=Code><span style='font-family:Courier'>propertyObject</span></span>is the name of an object that contains properties to be given to the attachedinstance.</p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Compatiblewith Flash Player 5 and later. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie()</span></span>method takes a symbol from the Library and attaches it to a timeline on theStage.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie()</span></span>method is used to attach a movie clip from the Library and place a copy of itonto a movie timeline currently on the Stage (noting that <span class=Code><spanstyle='font-family:Courier'>_root</span></span> is also a movie clip!). </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Although this method may seem very similar to <spanclass=Code><span style='font-family:Courier'>MovieClip.duplicateMovieClip</span></span>(and the examples we are using are almost identical to the ones seen in thatentry) there is one fundamental difference: <span class=Code><spanstyle='font-family:Courier'>duplicateMovieClip</span></span> copies from a <i>timeline </i>whereas <span class=Code><spanstyle='font-family:Courier'>attachMovie</span></span> copies from the <i>Library. </i>See the Tips and precautionssection of <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.duplicateMovieClip</span></span>to see the implications of this.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To set up a movie clip to be attached onto the stage, youmust define a <span class=ImportantWord><span style='font-family:Helvetica'>linkageidentifier</span></span>. A linkage identifier (sometimes shortened to‘IinkageID’ or ‘identifier’) is a string value that ActionScript will use torefer to the movie clip whilst it is in the Library. There are two ways toenter this value:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Byselecting <span class=ScreenText><span style='font-family:Optima'>Export</span></span><spanclass=ScreenText><span style='font-family:Optima'>for</span></span><spanclass=ScreenText><span style='font-family:Optima'>ActionScript</span></span>in the <spanclass=ScreenText><span style='font-family:Optima'>Convert</span></span><spanclass=ScreenText><span style='font-family:Optima'>to</span></span><spanclass=ScreenText><span style='font-family:Optima'>Symbol</span></span>window.The string in the <span class=ScreenText><span style='font-family:Optima'>Identifier</span></span>field isyour linkage identifier. Note that you may need to hit the <spanclass=ScreenText><span style='font-family:Optima'>Advanced</span></span>buttonto show these options <span class=ImportantWord><span style='font-weight:normal'>(this is replaced byBasic when the options are expanded)</span></span>. This allows you to definethe linkage identifier during movie clip creation.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:52.7pt'><img width=462 height=428src="../png/0586-dict8-12.png"> </p><p class=MsoBodyText style='margin-left:52.7pt'><b></b></p><p class=MsoBodyText style='margin-left:52.7pt'>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Byselecting either:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level2><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>The<span class=ScreenText><span style='font-family:Optima'>Linkage…</span></span>optionin the Library right-click menu or Library window drop-down menu. This willopen the <span class=ScreenText><span style='font-family:Optima'>Linkage</span></span><spanclass=ScreenText><span style='font-family:Optima'>Properties</span></span>window,which contain a subset of the <span class=ScreenText><span style='font-family:Optima'>Convert</span></span><spanclass=ScreenText><span style='font-family:Optima'>To</span></span><spanclass=ScreenText><span style='font-family:Optima'>Symbol</span></span>windowshown above.</p><p class=MsoBodyText style='margin-left:52.7pt'><i>&nbsp;</i></p><p class=MsoBodyText style='margin-left:88.7pt'><img width=429 height=163src="../png/0586-dict8-13.png"></p><p class=MsoBodyText style='margin-left:88.7pt'><i>&nbsp;</i></p><p class=Bullet-Level2><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>The<span class=ImportantWord><span style='font-family:Helvetica'>Properties… </span></span>iconon the Library window (the little blue circle with a white ‘i’ in it at thebottom of the Library window).</p><p class=Bullet-Level2><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>the<span class=ImportantWord><span style='font-family:Helvetica'>Properties… </span></span>optionin the Library right click menu or Library window drop down menu.</p><p class=MsoBodyText style='margin-left:52.7pt'><i>&nbsp;</i></p><p class=MsoBodyText style='margin-left:70.7pt'>The last two options will bringup the <span class=ScreenText><span style='font-family:Optima'>Symbol</span></span><spanclass=ScreenText><span style='font-family:Optima'>Properties</span></span>window,which is actually identical to the <span class=ScreenText><spanstyle='font-family:Optima'>Convert</span></span><span class=ScreenText><spanstyle='font-family:Optima'>to</span></span><span class=ScreenText><spanstyle='font-family:Optima'>Symbol</span></span>window seen above, except that itlets you modify stuff after you have created the movie clip.</p><p class=MsoBodyText style='margin-left:70.7pt'>&nbsp;</p><p class=MsoBodyText>Once you have defined the linkage identifier successfully(or if you forget what you defined as the linkage name 3 minutes later!), youwill be able to see it in the <span class=ScreenText><span style='font-family:Optima'>Linkage</span></span>column of the Library (something that is normallyhidden unless you resize the Library to ‘Narrow Library view’, so you mighthave never noticed it!). </p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in'><img width=448 height=287src="../png/0586-dict8-14.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The linkage identifier you use in your scripting must be <i>exactly </i>the same as the linkageidentifier, and if you get it wrong <span class=ImportantWord><spanstyle='font-family:Helvetica'>Flash will raise no error </span></span>(silentfailure), so be wary! As a general rule, it is a good idea to accept thedefault linkage name specified by Flash (make it the same as the Library movieclip name, unless you have used a long and descriptive movie clip name).</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>The following will attach the above movie clip <spanclass=Code><span style='font-family:Courier'>dot</span></span> to the <spanclass=Code><span style='font-family:Courier'>_root</span></span> timeline, andgive it an instance name of <span class=Code><span style='font-family:Courier'>dot01</span></span>:</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in'><span style='font-family:"Courier New";'>_r</span><span class=Code><spanstyle='font-family:Courier'>oot.attachMovie(&quot;dot&quot;, &quot;dot01&quot;,0);</span></span></p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>You should also be aware that the depth of each movie clipon a given timeline should be unique. You are only allowed to have one symbolin each depth, and if you try to do otherwise, the movie clip already at thatdepth will be replaced by the new clip.</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>When you use <span class=Code><span style='font-family:Courier'>attachMovie</span></span> as shown above, the movie clip will beplaced at a position 0,0 because its <span class=Code><span style='font-family:Courier'>_x</span></span>and <spanclass=Code><span style='font-family:Courier'>_y</span></span> properties willbe zero. You can change this by adding an additional <span class=Code><spanstyle='font-family:Courier'>propertyObject</span></span>.These objectsproperties will be added to the timeline of the newly attached movie clip ifthey are not movie clip properties, or will be used as initial values for themovie clip properties if they are. This sounds more complicated than itactually is, so lets see it in action:</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>If we define an object <span class=Code><spanstyle='font-family:Courier'>initObject</span></span>as shown and then add it to your <span class=Code><spanstyle='font-family:Courier'>attachMovie</span></span> method as a newparameter:</p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>dotInit = {_x:200, _y:200, myVariable:10};</span></span></p><p class=MsoBodyText style='margin-left:.5in'><span class=Code><spanstyle='font-family:Courier'>_root.attachMovie(&quot;dot&quot;,&quot;dot01&quot;, 0, dotInit);</span></span></p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in'><img width=169 height=57src="../png/0586-dict8-15.png"></p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>… the properties of <span class=Code><spanstyle='font-family:Courier'>_x</span></span> and <span class=Code><span style='font-family:Courier'>_y</span></span> will be used to define the initial positionproperties <span class=Code><span style='font-family:Courier'>dot01._x</span></span> and <span class=Code><spanstyle='font-family:Courier'>dot01._y</span></span>. the <span class=Code><span style='font-family:Courier'>myVariable</span></span> property of <span class=Code><spanstyle='font-family:Courier'>dotInit</span></span> does not correspond to a movie clip property, and will instead appearas a variable on the timeline of <span class=Code><spanstyle='font-family:Courier'>dot01</span></span> (it will of course appear as <span class=Code><spanstyle='font-family:Courier'>_root.dot01.myVariable</span></span>). </p><p class=MsoBodyText style='margin-left:.5in'>&nbsp;</p><p class=MsoBodyText>Assuming that we have the movie clip defined above (amovie clip that is a small black dot graphic with linkage identifier <spanclass=Code><span style='font-family:Courier'>dot</span></span>), then thefollowing examples show the results of various uses of <span class=Code><spanstyle='font-family:Courier'>attachMovie</span></span>:</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=576 valign=top style='width:432.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  style='font-family:Helvetica'>Examples</span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr>    <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt' height="396">       <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>attachMovie(&quot;dot&quot;,  &quot;dot01&quot;, 0);</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>If you use </span><span class=Code><span  style='font-family:Courier'>attachMovie</span></span><span class=Code> without a  movie clip instance, the timeline that the current script is assumed. This  script will attach an instance </span><span class=Code><span  style='font-family:Courier'>dot01</span></span><span class=Code> to </span><span  class=Code><span style='font-family:Courier'>_root</span></span><span  class=Code> if the line is on </span><span class=Code><span  style='font-family:Courier'>_root</span></span><span class=Code>, as shown in  the included file <a href="../fla/mcattachmovieex01.fla">mcattachmovieex01.fla</a>  / <a href="../swf/mcattachmovieex01.swf">mcattachmovieex01.swf</a>.</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.attachMovie(&quot;dot&quot;,  &quot;dot01&quot;, 0);</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>This line will do exactly the same as the  last example, but is the preferred syntax as it explicitly specifies the  timeline to attach </span><span class=Code><span style='font-family:  Courier'>dot01</span></span><span class=Code>.</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=286 height=211  src="../png/0586-dict8-17.png"></span></span></p>      <p class=MsoBodyText style='margin-left:0in'><span class=Code><b></b></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code>This code shows how </span><span  class=Code><span style='font-family:Courier'>attachMovie</span></span><span  class=Code> can be used to create multiple clips. The code attaches 500 instances  of </span><span class=Code><span style='font-family:Courier'>dot</span></span><span  class=Code>, </span><span class=Code>called </span><span  class=Code><span style='font-family:Courier'>dot0</span></span><span  class=Code> to </span><span class=Code><span  style='font-family:Courier'>dot499</span></span><span class=Code>. </span><span class=Code>See also the file <a  href="../fla/mcattachmovieex02.fla">mcattachmovieex02.fla</a> / <a  href="../swf/mcattachmovieex02.swf">mcattachmovieex02.swf</a>.</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot  = new Object();</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for  (i=0; i&lt;500; i++) {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    initDot._x = Math.random()*550;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    initDot._y = Math.random()*400;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    attachMovie(&quot;dot&quot;,  &quot;dot&quot;+i, i, initDot);</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Try doing this manually!</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=286 height=211  src="../png/0586-dict8-16.png"></span></span></p>      <p class=MsoBodyText style='margin-left:0in'><span class=Code><b></b></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Notice the following features of this  code:</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=Bullet-Level1><span class=Code><span  style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span></span><span class=Code>The use of </span><span class=Code><span  style='font-family:Courier'>initdot</span></span><span class=Code>to give each </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span class=Code>clip a random  position on the stage.</span></p>  <p class=Bullet-Level1><span class=Code><span  style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span></span><span class=Code>The use of the </span><span  class=ImportantWord><span style='font-family:Helvetica'>for </span></span><span  class=Code>loop variable and the way it is used to give each </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span class=Code>instance a  unique name via string concatenation (</span><span class=Code><span  style='font-family:Courier'>“dot”+i</span></span><span class=Code>) and the way  it is also used to give each instance a unique depth.</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr>  <td width=576 valign=top style='width:432.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code>In this final example, the dots are not  only created dynamically, but also animated dynamically to create a magnetism  particle effect. Hitting the mouse button will toggle the nature of the  attractions from magnetic to repulsive... you will have to run this effect to  realize why the file is called <a href="../fla/tapeworm.fla">tapeworm.fla</a>  (<a href="../swf/tapeworm.swf">tapeworm.swf</a>).</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code>&nbsp;</span></p>      <p class=MsoBodyText><span class=Code><span style='font-family:Courier'><img border=0 width=286 height=211  src="../png/0586-dict8-18.png"></span></span></p>      <p class=MsoBodyText style='margin-left:0in'><span class=Code><b></b></span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function  animateDot() {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    this._x -=  this.magnetism*(this._x-_root._xmouse)/this.inertia;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    this._y -=  this.magnetism*(this._y-_root._ymouse)/this.inertia;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>function  reversePolarity() {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    this.magnetism = -this.magnetism;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot  = new Object();</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>initDot.magnetism  = 1;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for  (i=0; i&lt;200; i++) {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    initDot._x = Math.random()*550;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    initDot._y = Math.random()*400;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    initDot.inertia = Math.random()*30+2;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    _root.attachMovie(&quot;dot&quot;,  &quot;dot&quot;+i, i, initDot);</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    _root[&quot;dot&quot;+i].onEnterFrame =  animateDot;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    _root[&quot;dot&quot;+i].onMouseDown =  reversePolarity;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText><span class=Code>Notice the way that the </span><span  class=Code><span style='font-family:Courier'>dot</span></span><span  class=Code> instances are referenced <i>after</i>  they have been created with </span><span class=Code><span  style='font-family:Courier'>root[&quot;dot&quot;+i]</span></span><span  class=Code>.</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText><span class=Code>This method is well known as the starting point ofall sorts of Flash effects. By creating lots of little clips, you can veryquickly build up particle effects. </span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText>To remove a movie that has been attached with the <spanclass=Code><span style='font-family:Courier'>MovieClip.attachMovie()</span></span>method, use the <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.removeMovieClip()</span></span>method. To replace a movie clip, you can simply overwrite its depth withanother movie clip using <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>(or <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.duplicatemovieClip</span></span>or <span class=ImportantWord><span style='font-family:Helvetica'>MovieClip.createEmptyMovieClip</span></span>).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also the example file <ahref="../fla/movieclipattachmovie.fla">movieclipattachmovie.fla</a> / <ahref="../swf/movieclipattachmovie.swf">movieclipattachmovie.swf</a>.</p><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>MovieClip.attachMovie</span></span>method is difficult for beginners to get to grips with because there are somany ways it can go wrong! We have provided a number of working FLAs to make surethis doesn’t happen to you, but the following pointers should be borne in mindwhen this method doesn’t seem to be working:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that each instance you create has a unique instance name</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that each instance you create has a unique depth</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that the timeline you are attaching movie clips onto actually exists</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makesure that you are using the exact linkage identifier</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>When using linkage identifiers, the method will fail ifthe movie clip is not in the Library at the point you use try to attach theclip. This will occur if the movie clip has not streamed in to the usersmachine by the time your script starts assuming it has. You must thereforecheck <span class=ScreenText><span style='font-family:Optima'>Export</span></span><spanclass=ScreenText><span style='font-family:Optima'>in</span></span><spanclass=ScreenText><span style='font-family:Optima'>first</span></span><spanclass=ScreenText><span style='font-family:Optima'>frame</span></span>when youcheck <span class=ScreenText><span style='font-family:Optima'>Export</span></span><spanclass=ScreenText><span style='font-family:Optima'>for</span></span><spanclass=ScreenText><span style='font-family:Optima'>ActionScript</span></span>(it ischecked by default). This ensures that the movie clips you will be copying areall in the Library at the earliest frame your scripts could possible ask forthem. If you do not check this option youwill not know which frame the movie clip will be available for attaching, andthe method will invariably fail once you place the SWF on the web (althoughyour FLA will work if you try it locally).</p>