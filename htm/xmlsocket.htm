<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc15970109">XMLSocket</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySocket= new XMLSocket();</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>XMLSocket</span></span><span class=Code> object is </span>compatiblewith <span class=ImportantWord><span style='font-family:Helvetica'>Flash Player5 and above</span></span><span class=Code>. The </span><span class=Code><spanstyle='font-family:Courier'>XMLSocket</span></span><span class=Code> objectinstance works in conjunction </span>with a socket server, which areinstalled on a server. <span class=Code>They are </span>used for fast andcontinuous communication between a Flash movie and an end user, as they canquickly transfer small amounts of data. The data does not need to be formattedas XML. <span class=Code>Sockets facilitate the communication, and </span>those using thissocket connection listen to a designated port dedicated to the socket server.For detailed information on socket servers and Flash, refer to <i>Chapter 20</i>.</p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span><span class=ImportantWord><span style='font-family:Helvetica'>object</span></span>is responsible for setting up socket server communication between a client anda server. A socket is a combination of an IP address, and a TCP port numberthat is used for two-way communications. A socket server is a collection of files(sometimes as an executable) which are installed on a server – essentially,software. It can be written in a number of languages (Java, ASP, Python, C++,and Perl among others), although Java seems to be a commonly used language inthe community for Flash Socket servers. Any language can be used, as long as ithas support for sockets and transmissions terminated by <span class=Code><spanstyle='font-family:Courier'>0</span></span>. Many socket servers havecustomized commands or objects sent between the movie and the server, which youcan use to enhance your applications. Socket servers are complicatedapplications, and are often built by developers already well versed in one ofthese programming languages. Most Flash designers and developers do not buildsocket servers, but instead use free or commercial ones available for downloadalready.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>object has methods and event handlers attached to it that are used to managecommunications between multiple clients and the server. <span class=Code><spanstyle='font-family:Courier'>XMLSocket</span></span> instances must beinstantiated with a constructor.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>object contains three methods used to create and close a socket connection, aswell as send an XML document:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.close</span></span><span lang=EN-US>  – closes an open socketconnection</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.connect</span></span><span lang=EN-US>  – creates a newsocket connection</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.send</span></span><span lang=EN-US>  – sends XML data orother data to the server</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>object also has four event handlers associated with it:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.onClose</span></span><span lang=EN-US>  – invoked when asocket is closed</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.onConnect</span></span><span lang=EN-US>  – invoked for asocket is opened </span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.onData</span></span><span lang=EN-US>  – invoked when dataarrives from the server</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span class=Code><span lang=EN-US style='font-family:Courier'>XMLSocket.onXML</span></span><span lang=EN-US>  – invoked when an </span><spanclass=Code><span lang=EN-US style='font-family:Courier'>XML</span></span><spanlang=EN-US> object arrives from the server</span></p><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>object uses a full-duplex TCP/IP connection between client and server. This isactually a stream socket that can handle an unlimited number of XML messages.The <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>object uses TCP ports numbered from 1024 and above. Your Flash movie and thesocket server must be located within the same subdomain. When sending messagesto and from the server, each one is composed of XML data or other data followedby a terminating byte set to zero. The data does <i>not need</i> to be formatted as an XML document. XML sockets remainopen continually, until it is closed by an <span class=Code><spanstyle='font-family:Courier'>XMLSocket.close()</span></span> call, Flash Playeris closed, the connection is lost for any reason, or no more references to thesocket exist in the movie’s code.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Because socket connections offer fast, persistent and lowoverhead transmissions approaching real-time, the <span class=Code><spanstyle='font-family:Courier'>XMLSocket</span></span> object is ideal for usewhere fast communications is necessary. Such applications where fasttransmissions are required are multi-user environments such as chat rooms, netmeetings, whiteboard applications, or messengers. Socket connections are alsocommonly used in the gaming community for multi-player online games. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The latency of an <span class=Code><span style='font-family:Courier'>XMLSocket</span></span> object is very low compared to moretraditional HTTP GET and POST methods. With HTTP communications, many steps arerequired just to transfer information back and forth. For example, a connectionneeds to be opened, a request is made, the information is transferred, and thenthe connection is closed. With socket communications, the connection is openedonce, and then all information is freely pushed and pulled to and from theserver. Whenever the server is updated, all users receive the new informationimmediately, without request.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Because of this potentially heavy toll on the server, itwill need to be able to handle many connections and a lot of data flow if yourapplication expects to generate a lot of traffic. That said, many commercialhosting companies will not accept the security risk created by installing&quot;custom&quot; software and providing access to control it (which you wouldneed). It would be wise to look into your client requirements, options and do alittle leg work to find an adequate set up before committing to development onan advanced or robust application.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The procedure for creating, using and closing an <spanclass=Code><span style='font-family:Courier'>XMLSocket</span></span> is toconstruct a new <span class=Code><span style='font-family:Courier'>XMLSocket</span></span>instance, use the <span class=Code><span style='font-family:Courier'>connect()</span></span>method to establish the connection with a server:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySocket= new XMLSocket();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>mySocket.connect(&quot;http://www.mydomain.com&quot;,12345);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code>Now your Flash movie will connect with the socketserver at this location. The Flash movie will have to be within the </span><spanclass=Code><span style='font-family:Courier'>mydomain.com</span></span><spanclass=Code>subdomain. Meaning, you would be fine if you had a domain such as </span><spanclass=Code><span style='font-family:Courier'>http://socketchat.mydomain.com</span></span><spanclass=Code>.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText>Then, you can transfer as much data as required (using the<span class=Code><span style='font-family:Courier'>send()</span></span> methodto send to the server and the <span class=Code><span style='font-family:Courier'>onData()</span></span>or <span class=Code><span style='font-family:Courier'>onXML()</span></span>methods to process received data), and then close the connection if necessary.You will probably want to use the <span class=ImportantWord><spanstyle='font-family:Helvetica'>onConnect</span></span> with your connect method,to make sure a connection is made with the server. You should also use <spanclass=ImportantWord><span style='font-family:Helvetica'>onClose</span></span>to signify a lost connection to the user, if that occurs. Possibly the mostimportant (apart from <span class=Code><span style='font-family:Courier'>connect</span></span>!)are the <span class=ImportantWord><span style='font-family:Helvetica'>onXML</span></span>and<span class=ImportantWord><span style='font-family:Helvetica'>onData</span></span>handlers, which will invoke whenever data or XML is received.</p><h3>Tips and precautions</h3><p class=MsoBodyText>If you install a socket server and there is a firewall onthe machine it has been installed on, you might have to arrange for a&quot;hole&quot; to be punched in the firewall to allow connections to the portyou are using. You should also be aware that, although they may seem daunting,socket servers can be a lot of fun when integrated with an interface!</p>