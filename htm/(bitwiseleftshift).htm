<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>&lt;&lt; bitwise left shift</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = a&lt;&lt; b; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><span style='font-family:Courier'>b </span></span>areliteral numbers or data elements holding number values, or string values thatcan be directly converted to a number value (such as <span class=Code><spanstyle='font-family:Courier'>5 </span></span>). <span class=Code><spanstyle='font-family:Courier'>b </span></span>must be a positive number.<spanclass=Code><span style='font-family:Courier'>c </span></span>will be returned as <span class=Code><spanstyle='font-family:Courier'>a * 2 </span></span><sup>b</sup>. The sign of <spanclass=Code><span style='font-family:Courier'>a </span></span>willbe preserved.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This operator is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 or later. </span></span>It works by:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1 style='margin-left:38.25pt;text-indent:-.25in;'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Converting <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><spanstyle='font-family:Courier'>b </span></span>to 32 bit binary. If <span class=Code><span style='font-family:Courier'>a </span></span>or <span class=Code><spanstyle='font-family:Courier'>b </span></span>are floating point numbers, then they will be converted to integers, so anydecimal places will be ignored. If <span class=Code><span style='font-family:Courier'>a </span></span>or <spanclass=Code><span style='font-family:Courier'>b </span></span>are strings that can be directlyconverted to integer numbers (such as <span class=Code><span style='font-family:Courier'>2.3 </span></span>) then the process will occur (to give <spanclass=Code><span style='font-family:Courier'>2 </span></span>).</p><p class=Numbered-Level1 style='margin-left:38.25pt;text-indent:-.25in;'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Shifting the bit pattern of <span class=Code><spanstyle='font-family:Courier'>a </span></span>to the left <span class=Code><span style='font-family:Courier'>b </span></span>times.</p><h3>Description</h3><p class=MsoBodyText>Shifting a bit pattern to the left each time is the sameas multiplying the number it represents by 2. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For example, bit shifting the value 7:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>7 in 32 bit binary is: <span class=Code><spanstyle='font-family:Courier'>00000000000000000000000000000111 </span></span></p><p class=MsoBodyText>Bit shifting 1 gives: <span class=Code><span style='font-family:Courier'>00000000000000000000000000001110 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>1110 </span></span>is <span class=Code><span style='font-family:Courier'>14, </span></span>or <spanclass=Code><span style='font-family:Courier'>7 * 2, </span></span>or <spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>7 * 2 </span></span></span><b><sup>1</sup></b> </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Bit shifting again gives: <span class=Code><spanstyle='font-family:Courier'>00000000000000000000000000011100 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11100 </span></span>is <span class=Code><span style='font-family:Courier'>28 </span></span>or <spanclass=Code><span style='font-family:Courier'>7 * 2 * 2, </span></span>or <spanclass=Code-NEW><span style='font-family:"Optima Bold";border:none'><spanstyle='border:none'>7 * 2 </span></span></span><b><sup>2</sup></b> </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Because binary shifting is less processor intensive thanmultiplication and <i>much </i>lessprocessor intensive than working out <span class=Code><span style='font-family:Courier'>2 </span></span><sup>n</sup> by any other means, it can be useful inoptimizing certain algorithms.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also <span class=ImportantWord><span style='font-family:Helvetica'>&lt;&lt;= (bitwise left shift and assignment), </span></span>whichis a quick way of doubling a number. </p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=183 valign=top style='width:137.55pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Bit shifted calculation </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=183 valign=top style='width:137.6pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>&nbsp; </span></span></p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Equivalent arithmetic calculation </span></span></p>  </td>  <td width=183 valign=top style='width:137.05pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=183 valign=top style='width:137.55pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 4 &lt;&lt; 2; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = (b &lt;&lt; 1) + b; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = “2.4” &lt;&lt; 3; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>d = -4 &lt;&lt; 2 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=183 valign=top style='width:137.6pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 4 * 22 </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = 3 * b </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = 2 * 23 </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>d = -4 * 22 </span></span></p>  </td>  <td width=183 valign=top style='width:137.05pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr style='height:33.55pt'> <td width=183 valign=top style='width:137.55pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt;  height:33.55pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = “cat” &lt;&lt; 2 </span></span></p>  </td>  <td width=183 valign=top style='width:137.6pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt;height:33.55pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 0 &lt;&lt; 2 </span></span></p>  </td>  <td width=183 valign=top style='width:137.05pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt;  height:33.55pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 0 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText> </p>  </td> </tr> <tr> <td width=183 valign=top style='width:137.55pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 4 &lt;&lt;-2 </span></span></p>  </td>  <td width=183 valign=top style='width:137.6pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=183 valign=top style='width:137.05pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 0 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The number of shifts must be positive. To shift in the other direction, use the <span class=ImportantWord><span style='font-family:  Helvetica'>&gt;&gt; </span></span>operator.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>Bit shifting was a popular optimization trick used by gamesprogrammers in the days when processors were very slow (typically 8 bit, 1Mhz).The use of bit shifting instead of using base 10 arithmetic routines wasconsiderably faster. Such games are back in vogue, not only because retro is‘in’, but because Flash can emulate many of the old classic games (given somecareful ActionScript programming). One of the things to consider if you embarkon writing web-based video games via ActionScript is using the same programmingshortcuts used the first time around, and bit shifting is one of them… thespirit of 1982 lives on.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Bit shifting can also be used to shift patterns prior tobitwise combination via the | (bitwise OR) or &amp; (bitwise AND) operators.See the files <a href="../fla/(bitwiseor).fla">(bitwiseor).fla</a>and <a href="../swf/(bitwiseor).swf">(bitwiseor).swf</a>.Here we are using bit shifting to combine the separate 8 bit R, G and B colorvalues (which are each taken from a scrollbar position that varies from 0 to255) into a 32 bit RGC value:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>red =redScroll.getScrollPosition() &lt;&lt; 16; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>green =grnScroll.getScrollPosition() &lt;&lt; 8; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>blue =bluScroll.getScrollPosition(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>RGB =red | green | blue; </span></span></p><h3>Tips and precautions</h3><p class=MsoBodyText>Bit shifting a pattern so that it goes beyond 32 bits willcause those bits to be lost to overflow. The maximum number that can berepresented by 32 bits about <span class=Code><span style='font-family:Courier'>4.3x10 </span></span><sup>9</sup>,so you still have a long range to go through.</p>