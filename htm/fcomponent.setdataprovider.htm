<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>F<i>Component</i>.setDataProvider</h1><p class=MsoBodyText>(This method is applicable to <span class=Code><spanstyle='font-family:Courier;'>FComboBox.setDataProvider </span></span>and <span class=Code><span style='font-family:Courier;'>FListBox.setDataProvider. </span></span>)</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myComponent.setDataProvider(object); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myComponent </span></span>is a combo box or list boxcomponent, and <span class=Code><span style='font-family:Courier'>object </span></span>is the external data object (or type<span class=Code><span style='font-family:Courier'>Array </span></span>or <spanclass=Code><span style='font-family:Courier'>DataProviderClass </span></span>)that defines its parameters.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This method is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 6. </span></span>Thismethod is intended for advanced coders, and requires a good understanding ofthe relationship between a component and its configuration data.</p><h3>Description</h3><p class=MsoBodyText>When defining the label and data fields of a list box orcombo box, the values are usually either entered manually or via the methods ofthe combo box or list box. If you elect to use an external object (and thiswill usually be an array of <span class=Code><span style='font-family:Courier'>Object </span></span>objects or the component specific data class <span class=Code><spanstyle='font-family:Courier'>DataProviderClass </span></span>),then you can also use the methods of the external object. For example, ifyou choose to use an external <span class=Code><span style='font-family:Courier'>Array </span></span>object then:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Youcan use features of the <span class=Code><span style='font-family:Courier'>Array </span></span>object’s methods that are not available via the methods of the combo box orlist box, such as the ability to sort, concatenate, change case, and split anarray.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Youcan interface the external <span class=Code><span style='font-family:Courier'>Array </span></span>object to data coming from a remote server script better than you could with acombo box or list box directly, because the Array is more flexible.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>If you were creating dynamic combo or list boxes, youwould have to create variables external to the component in any case. Creatinga structured <span class=Code><span style='font-family:Courier'>Array </span></span>object and being able to associate it directly with a component allows a muchmore structured linkage between your dynamic data and the component. </p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=336 valign=top style='width:252.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=204 valign=top style='width:153.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myCombo.setDataProvider(myArray); </span></span></p>  </td>  <td width=204 valign=top style='width:153.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Assigns the array <span class=Code><span  style='font-family:Courier'>myArray </span></span>as the external data provider of the combo instance <span  class=Code><span style='font-family:Courier'>myCombo. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The following line of code sets up an array called <spanclass=Code><span style='font-family:Courier'>cArray </span></span>:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray= new Array({label:&quot;red&quot;, data:1}, {label:&quot;green&quot;, data:2},{label:&quot;blue&quot;, data:3}); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This array has the following structure:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=138 height=141src="../png/0586-dict5-67.png"> </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This defines the label and data values for three entriesthat could be used in a combo or list box. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Assuming we had a combo box called <span class=Code><spanstyle='font-family:Courier'>combo </span></span>with the following properties:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=458 height=113src="../png/0586-dict5-68.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>(Only theinstance name has been defined; all other properties are at their defaults.)</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… the following line would link <span class=Code><spanstyle='font-family:Courier'>cArray </span></span>to <span class=Code><span style='font-family:Courier'>combo </span></span>as its data provider. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setDataProvider(cArray); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>This would:</p><p class=MsoBodyText><span class=Code><span style='font-size:8.0pt;'>&nbsp; </span></span></p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>immediatelypopulate the combo with the label and data values held in the array</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>setoff a change event, and run the Change Handler (if one was defined)</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Following this line of code, the combo box combo would look like this:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=137 height=105src="../png/0586-dict5-69.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also the example file <ahref="../fla/fcomponentsetdataprovider1.fla">fcomponentsetdataprovider1.fla</a>/ <ahref="../swf/fcomponentsetdataprovider1.swf">fcomponentsetdataprovider1.swf</a>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Okay, so this is cool, but so far its more complex thanjust plugging in the same values into the combo box using either the Propertyinspector or the methods of the combo box.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>What we <i>can </i>dothough, is use the methods of the <span class=Code><span style='font-family:Courier'>Array </span></span>object directly on the data provider, and thesewill be directly reflected in the combo box. The effect is as if the combo boxobject had suddenly gained the methods of the <span class=Code><spanstyle='font-family:Courier'>Array </span></span>object (which is useful to saythe least, given that the <span class=Code><span style='font-family:Courier'>Array </span></span>object has a very useful set of methods to manipulate list based data!).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For example, you could sort the array by applying a stingsort on <span class=Code><span style='font-family:Courier'>cArray </span></span>as follows:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionsortFunction(a, b) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    if (a.label&gt;b.label) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        return 1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } else { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>        return -1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    } </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray= new Array({label:&quot;red&quot;, data:1}, {label:&quot;green&quot;, data:2},{label:&quot;blue&quot;, data:3}); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray.sort(sortFunction); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setDataProvider(cArray); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This would produce the following combo box. Notice thatthe labels are now sorted alphabetically:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=119 height=85src="../png/0586-dict5-70.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also <span class=ImportantWord><span style='font-family:Helvetica'>Array.sort. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>To change the <span class=Code><span style='font-family:Courier'>cArray </span></span>array and reflect the changes in the <spanclass=Code><span style='font-family:Courier'>combo </span></span>combo box instance is simply a case of:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Makingthe required changes to <span class=Code><span style='font-family:Courier'>cArray.</span></span><spanclass=Code></span></p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Re-defining<span class=Code><span style='font-family:Courier'>cArray </span></span>as thedata provider via the <span class=Code><span style='font-family:Courier'>setDataProvider </span></span>method.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This is shown in the example file <ahref="../fla/fcomponentsetdataprovider1b.fla">fcomponentsetdataprovider1b.fla</a>(and <ahref="../swf/fcomponentsetdataprovider1b.swf">fcomponentsetdataprovider1b.swf</a>).Clicking on the push button allow you change the labels in the combo instance.As can also be seen in this FLA, the <span class=Code><span style='font-family:Courier'>onChange </span></span>event is invoked every time you use the <spanclass=Code><span style='font-family:Courier'>setDataProvider </span></span>method. The only real way around this is to undefine the change handler duringa <span class=Code><span style='font-family:Courier'>setDataProvider </span></span>call and set it back after it:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setChangeHandler(undefined); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setDataProvider(cArray); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setChangeHandler(&quot;change&quot;); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The code in file example file <ahref="../fla/fcomponentsetdataprovider1c.fla">fcomponentsetdataprovider1c.fla</a>(and <ahref="../swf/fcomponentsetdataprovider1c.swf">fcomponentsetdataprovider1c.swf</a>)has been changed from the ‘1b version to reflect this. This sort of set upallows you to retain the same component instance between several pages of asite. The thing you change is the component configuration data rather than thecomponent instance itself, something that is a much more elegant solution forthe advanced scripter.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Using an instance of the <span class=ImportantWord><spanstyle='font-family:Helvetica'>DataProviderClass </span></span>object instead of an array allows youto apply a custom set of methods (that is actually a subset of the combo box orlist box methods) directly to the external object itself. Although the <spanclass=Code><span style='font-family:Courier'>DataProviderClass </span></span>isnot documented, its prototype can be reviewed by looking inside the <spanclass=Code><span style='font-family:Courier'>DataProvider </span></span>component, which can be found in the Library in the location shown below.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img border=0 width=325 height=266src="../png/0586-dict5-71.png"></p><p class=MsoBodyText><b><spanstyle='color:red'> </span></b></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>It is noted that being able to infer the methods of anobject by looking at its prototype requires a good understanding of ObjectOrientated Programming (OOP) techniques, and should only be attempted by theadvanced scripter. The remainder of this text assumes no knowledge of OOP,given that we have had a look for you!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>DataProviderClass </span></span>contains a subset of the standard methods of the list box and combo box, andyou can apply these to the data provider as if it were the component itself.The following code creates the <span class=Code><span style='font-family:Courier'>cArray </span></span>as an object of the <span class=Code><span style='font-family:Courier'>DataProviderClass, </span></span>and makes it the data provider for the <span class=Code><span style='font-family:Courier'>combo </span></span>instance.It then applies the <span class=ImportantWord><span style='font-family:Helvetica'>FComponent.addItem </span></span>and <span class=ImportantWord><span style='font-family:Helvetica'>FComponent.sortItemsBy </span></span>methods directly to the <span class=Code><span style='font-family:Courier'>cArray </span></span><span class=Code><span style='font-family:Courier'>DataProviderClass </span></span>object to sort the labels.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray= new DataProviderClass(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>combo.setDataProvider(cArray); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray.addItem(&quot;red&quot;,1); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray.addItem(&quot;green&quot;,2); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray.addItem(&quot;blue&quot;,3); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>cArray.sortItemsBy(&quot;label&quot;,&quot;ASC&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>See also the example files <ahref="../fla/fcomponentsetdataprovider2.fla">fcomponentsetdataprovider2.fla</a>and <ahref="../swf/fcomponentsetdataprovider2.swf">fcomponentsetdataprovider2.swf</a>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>When using the <span class=Code><span style='font-family:Courier'>DataProviderClass </span></span>you can use the following methodsdirectly on it:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.addItemAt </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.addItem </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.removeItemAt </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.removeAll </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.replaceItemAt </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.getLength </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.getItemAt </span></span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>FComponent.sortItemsBy </span></span></p><p class=MsoBodyText><b>&nbsp;</b></p><p class=MsoBodyText>The usefulness of the <span class=Code><spanstyle='font-family:Courier'>DataProviderClass </span></span>is that you bringthe <span class=Code><span style='font-family:Courier'>Data </span></span>object (that is usually inside the combo box or list box objects) out intoActionScript, and you can treat it separately to the component instancesthemselves. This means that you can assume the <span class=Code><spanstyle='font-family:Courier'>DataProviderClass </span></span>instances to havepersistence that is separate to the graphic instances they are controlling. </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For the advanced user, an understanding of the <spanclass=Code><span style='font-family:Courier'>DataProviderClass </span></span>provides an insight to how components interface to their underlying data, andopens up the path to creating your own components in the Macromedia style. </p><h3>Tips and precautions</h3><p class=MsoBodyText>None.</p>