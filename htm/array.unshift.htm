<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>Array.unshift</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myNewLength= myArray.unshift(value1, value2, value3,… valueN); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myArray </span></span>is an array. One or more new elementswith values <span class=Code><span style='font-family:Courier'>value1,… valueN </span></span>are added to the start of <spanclass=Code><span style='font-family:Courier'>myArray, </span></span>and the newlength of <span class=Code><span style='font-family:Courier'>myArray </span></span>is returned as <span class=Code><spanstyle='font-family:Courier'>myNewLength. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This method is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 or later. </span></span>Note that the <span class=ImportantWord><span style='font-family:Helvetica'>Array.splice </span></span>method may provide more Array editingoptions (although it doesn’t return the new length of the array, as <spanclass=Code><span style='font-family:Courier'>unshift </span></span>does).</p><h3>Description</h3><p class=MsoBodyText>See the examples below.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=312 valign=top style='width:234.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>favoriteGames = [&quot;I-War2&quot;, &quot;Unreal Tournament&quot;, &quot;Operation Flashpoint&quot;]; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>newLength = FavoriteGames.unshift(&quot;Defender&quot;, &quot;Galaga&quot;); </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><b>&nbsp;</b></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Before the <span class=Code><span style='font-family:  Courier'>unshift, </span></span>the length of <span class=Code><span  style='font-family:Courier'>favoriteGames </span></span>is 3 and the array contains the following elements:</p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=209 height=57  src="../png/0586-dict2-43.png"></p>    <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>After the <span class=Code><span style='font-family:  Courier'>unshift, </span></span>the array looks like this:</p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=234 height=85  src="../png/0586-dict2-44.png"></p>    <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The new array elements have been inserted from <span  class=Code><span style='font-family:Courier'>favoriteGames[0], </span></span>and the existing elements have been moved right to accommodate the new data. The new length of the array, 5, is available via variable <span class=Code><span style='font-family:Courier'>newLength. </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>favoriteGames = [&quot;I-War2&quot;, &quot;Unreal Tournament&quot;, &quot;Operation Flashpoint&quot;]; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>favoriteGames.unshift(&quot;Defender&quot;, &quot;Galaga&quot;); </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>If you don’t need to know the length of the unshifted array, you can modify the code in the last example as shown, where the <span  class=Code><span style='font-family:Courier'>newLength </span></span>variable is no longer used.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=312 valign=top style='width:234.2pt;border:none;border-bottom:solid windowtext .5pt;background:silver;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>favoriteGames = [&quot;I-War2&quot;, &quot;Unreal Tournament&quot;, &quot;Operation Flashpoint&quot;]; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>FavoriteRetro = [&quot;Defender&quot;, &quot;Galaga&quot;]; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>favoriteGames.unshift(favoriteRetro) </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;background:silver;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Looking at the last example, you may be fooled into expecting that this code will insert an array <span class=Code><span  style='font-family:Courier'>favoriteRetro </span></span>into <span class=Code><span style='font-family:Courier'>favoriteGames </span></span>so that you end up with the same end result. In fact, the splice will create <span class=ImportantWord><span  style='font-family:Helvetica'>a nested array </span></span>by inserting <span class=Code><span  style='font-family:Courier'>favoriteRetro </span></span>into <span class=Code><span style='font-family:Courier'>favoriteGames[0]. </span></span> </p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=240 height=99  src="../png/0586-dict2-45.png"></p>    <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>Array.unshift </span></span>allows you to add array elements tothe start of an array, and is the opposite of <span class=ImportantWord><spanstyle='font-family:Helvetica'>Array.push. </span></span>See also <spanclass=ImportantWord><span style='font-family:Helvetica'>Array.push. </span></span>When adding to arrays, you can use these two methods together to create variouskinds of buffer including:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText style='margin-left:.5in;text-indent:-.25in;'><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>A First In First Out (FIFO) buffer. New elements areadded and removed from the start of the buffer.</p><p class=MsoBodyText style='margin-left:.5in;text-indent:-.25in;'><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>A First In, Last Out (LIFO) buffer. New elements areadded to the start of the Array, and removed from the end.</p><h3>Tips and precautions</h3><p class=MsoBodyText>Consider using <span class=ImportantWord><spanstyle='font-family:Helvetica'>Array.Splice </span></span>rather than <span class=Code><span style='font-family:Courier'>Array.unshift </span></span>and <span class=ImportantWord><spanstyle='font-family:Helvetica'>Array.push </span></span>for more advanced operations. This method gives you more options,including:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Deleting as well as adding elements</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Adding or deleting elements from any position, and notjust the start or end position.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Over-writing or replacing elements.</p>