<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"><h1><a name="_Toc16343118">typeof</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>typeofitem</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>where </span><span class=Code><spanstyle='font-family:Courier'>item</span></span><span class=Code> is a button,function, movie clip, string, or object.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Compatiblewith Flash Player 5 and later.</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator forces Flash to interpret the argument and return its type.</span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>typeof</span></span><span class=ImportantWord><span style='font-family:Helvetica'>operator</span></span>is used to tell Flash to examine the argument as a specific typeof entity and return the result of the examination. The result of the <spanclass=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator is a string indicating whether the item is a button, function, movieclip, string, or object. Valid Flash items and the returns from the </span><spanclass=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator are:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Boolean – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>boolean</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Button – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>object</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Function – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>function</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Movie Clip – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>movieclip</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Number – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>number</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Object – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>object</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> String – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>string</span></span></p><p class=Bullet-Level1><spanclass=Code><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code><span lang=EN-US> Text Field – </span></span><spanclass=Code><span lang=EN-US style='font-family:Courier'>object</span></span></p><p class=Bullet-Level1><spanlang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Undefined – </span><span class=Code><spanlang=EN-US style='font-family:Courier'>undefined</span></span></p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=204 valign=top style='width:153.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Code</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Additional Explanation</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes</span></span></p>  </td> </tr> <tr>  <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>typeof myString;</span></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Returns &quot;<span class=Code><span style='font-family:  Courier'>string</span></span>&quot; as <span class=Code><span  style='font-family:Courier'>myString</span></span> is a string.</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'>Objects, buttons, and text  fields are all treated as &quot;<span class=Code><span style='font-family:  Courier'>object</span></span>&quot;</p>  <p class=MsoBodyText><span class=Code>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>a = new Object();</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>b = new Object();</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>c = (typeof a == typeof b);</span></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c</span></span>  returns <span class=Code><span style='font-family:Courier'>true</span></span>.</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>c</span></span> returns <span class=Code><span  style='font-family:Courier'>true</span></span> as the equation in the  brackets evaluates the <span class=Code><span style='font-family:Courier'>typeof</span></span>  object that <span class=Code><span style='font-family:Courier'>a</span></span>  is against <span class=Code><span style='font-family:Courier'>b</span></span>,  because they're both of the type <span class=Code><span style='font-family:  Courier'>Object</span></span> object, it returns <span class=Code><span  style='font-family:Courier'>true</span></span>.</p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr> <tr>  <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>doSomething(10);</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>function doSomething (num) {</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>   // check  'num' is a Number</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>    if  (typeof num != &quot;number&quot;) return false;</span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    </span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>   // code  here as num is a number</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>    trace(&quot;your code here&quot;);</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>}</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Simple function, which requires the <span class=Code><span  style='font-family:Courier'>num</span></span> parameter to be a <span  class=Code><span style='font-family:Courier'>Number</span></span>.</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'>The <span class=Code><span  style='font-family:Courier'>if...</span></span> statement checks the <span  class=Code><span style='font-family:Courier'>typeof</span></span> value of  the passed parameter to make sure it is equal to the string &quot;<span  class=Code><span style='font-family:Courier'>number</span></span>&quot;, if  it isn't it returns a <span class=Code><span style='font-family:Courier'>false</span></span>  value. However, continues on if it is of the type <span class=Code><span  style='font-family:Courier'>number</span></span>. This is a common practice  when protecting users against improper use of your function.</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator </span>can be used with the name of an item to return the typeof item. For example, the command to examine a button:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myType= typeof myButton1;</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>will return the string &quot;</span><spanclass=Code><span style='font-family:Courier'>object</span></span><spanclass=Code>&quot;in </span><span class=Code><span style='font-family:Courier'>myType</span></span><spanclass=Code>(buttons are returned as objects). The command to examine a movie clip:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myType= typeof myMovieClip;</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>will return the string &quot;</span><spanclass=Code><span style='font-family:Courier'>movieclip</span></span><spanclass=Code>&quot;.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>typeof</span></span><span class=Code> operator canalso be used to determine if a variable exists. Take the following code:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 10;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(typeofa);</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>If you omit the first line, the </span><spanclass=Code><span style='font-family:Courier'>undefined</span></span><spanclass=Code>string will be returned to the output window. The following code could be usedin an </span><span class=Code><span style='font-family:Courier'>if...else</span></span><spanclass=Code>statement to check if the variable has been defined:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(!typeofa) {</span></span></p><p class=MsoBodyText style='text-indent:21.8pt'><span class=Code><spanstyle='font-family:Courier'>trace(&quot;a does not exist&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} else{</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   trace(a does exist);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>Using the </span><span class=Code><spanstyle='font-family:Courier'>typeof</span></span><span class=Code> operator isexcellent when fool-proofing your functions or methods. Let's take thefollowing function, which needs to have two numbers passed to it to operateproperly:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>returnPercent= function (percentage, value) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   return value/100*percentage;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(returnPercent(10,200));</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(returnPercent(&quot;string&quot;,200));</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>If you run the code above in Flash, you'll notice </span><spanclass=Code><span style='font-family:Courier'>NaN</span></span><span class=Code> be returnedfor the second </span><span class=Code><span style='font-family:Courier'>trace</span></span><spanclass=Code>call. Obviously, this is useless, so the following line is added to thefunction:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>If(typeof percentage != &quot;number&quot; || typeof value != &quot;number&quot;)return false;</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>So the function now looks like this:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>returnPercent= function (percentage, value) {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   if (typeof percentage != &quot;number&quot;|| typeof value != &quot;number&quot;) return false;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   return value/100*percentage;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(returnPercent(10,200));</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(returnPercent(&quot;string&quot;,200));</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>false</span></span><spanclass=Code>will be sent to the </span><span class=ScreenText><spanstyle='font-family:Optima'>Output</span></span><span class=Code> window ratherthan </span><span class=Code><span style='font-family:Courier'>NaN</span></span><spanclass=Code>,as the function hasn't completely executed. It was intercepted through usingthe </span><span class=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator in the </span><span class=Code><span style='font-family:Courier'>if...</span></span>statement<span class=Code> to catch out objects passed as parameters, which weren't numbers. Veryuseful in fool proofing your functions and methods when specific data types arerequired to be passed. See the example </span><a href="../fla/typeof.fla">typeof.fla</a>and <a href="../swf/typeof.swf">typeof.swf</a> ,<span class=Code> for a workingexample.</span></p><h3>Tips and precautions</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>typeof</span></span><spanclass=Code>operator is useful for identifying something prior to using it, especially whenthe item to be typed is passed in a generic script as a variable.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>typeof</span></span><span class=Code>is useful in seeing how Flash works. In Flash 6, almost everything is anobject, and knowing exactly which object some common structures are can be veryuseful for the beginner. For example, if you don't already know what the roottimeline really is, the following code may be very illuminating for yourunderstanding of timelines!</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(typeof(_root));</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>More advanced coders can use <span class=Code><spanstyle='font-family:Courier'>typeof</span></span> to:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Find out if the data structures theyhave defined are actually as intended.</span></p><p class=Bullet-Level1><span lang=EN-US style='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span lang=EN-US> Find out if a variable is of theexpected data type.</span></p>