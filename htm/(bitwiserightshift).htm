<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>&gt;&gt; bitwise right shift</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = a&gt;&gt; b; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><span style='font-family:Courier'>b </span></span>areliteral numbers or data elements holding number values, or string values thatcan be directly converted to a number value (such as <span class=Code><spanstyle='font-family:Courier'>“5” </span></span>). <span class=Code><spanstyle='font-family:Courier'>b </span></span>must be positive. <span class=Code><span style='font-family:Courier'>c </span></span>will be returned as the integer part of<span class=Code><span style='font-family:Courier'>a / 2 </span></span><sup>b</sup>.The sign of <span class=Code><span style='font-family:Courier'>a </span></span>will be preserved.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This operator is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 or later. </span></span>It works by:</p><p class=MsoBodyText>&nbsp;</p><p class=Numbered-Level1 style='margin-left:.5in;text-indent:-.25in;'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Converting <span class=Code><span style='font-family:Courier'>a </span></span>and <span class=Code><spanstyle='font-family:Courier'>b </span></span>to 32 bit binary. If <span class=Code><span style='font-family:Courier'>a </span></span>or <span class=Code><spanstyle='font-family:Courier'>b </span></span>are numbers, then they will be converted to integers, so any decimal placeswill be ignored. If <span class=Code><span style='font-family:Courier'>a </span></span>or <span class=Code><spanstyle='font-family:Courier'>b </span></span>are strings that can be directly converted to integer numbers (such as <spanclass=Code><span style='font-family:Courier'>“2.3” </span></span>) then theprocess will occur (to give <span class=Code><span style='font-family:Courier'>2 </span></span>).</p><p class=Numbered-Level1 style='margin-left:27.0pt;text-indent:-9.0pt;'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Shifting the bit pattern of <span class=Code><spanstyle='font-family:Courier'>a </span></span>to the right <span class=Code><span style='font-family:Courier'>b </span></span>times.</p><h3>Description</h3><p class=MsoBodyText>Shifting a bit pattern to the right each time is the sameas dividing the number it represents by 2 and then truncating the result todiscard the integer part.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>For example, bit shifting the value 7:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>7 in 32 bit binary is: <span class=Code><spanstyle='font-family:Courier'>00000000000000000000000000000111 </span></span></p><p class=MsoBodyText>Bit shifting 1 gives: <span class=Code><span style='font-family:Courier'>00000000000000000000000000000011 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>11 </span></span>binary is <span class=Code><span style='font-family:Courier'>3, </span></span>or the integer part of <span class=Code><span style='font-family:Courier'>7/2, </span></span>or the integer part of <span class=Code-NEW><span style='font-family:"Optima Bold";border:none'><span style='border:none'>7 / 2 </span></span></span><b><sup>1</sup></b>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Bit shifting again gives: <span class=Code><spanstyle='font-family:Courier'>00000000000000000000000000000001 </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>1 </span></span>is the integer part of <span class=Code><span style='font-family:Courier'>7 /(2 * 2 </span></span>), or the integer part of <span class=Code-NEW><spanstyle='font-family:"Optima Bold";border:none'><span style='border:none'>7 / 2 </span></span></span><b><sup>2</sup></b>.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Because binary shifting is less processor intensive thandivision and <i>much </i>less processorintensive than working out 2<sup>n</sup> by any other means, it can be usefulin optimizing certain algorithms.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also <span class=ImportantWord><span style='font-family:Helvetica'>&lt;&lt;= (bitwise left shift and assignment), </span></span>which is a quick way of halving anumber. </p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=184 valign=top style='width:137.95pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Bit shifted calculation </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.95pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Equivalent arithmetic calculation </span></span></p>  </td>  <td width=182 valign=top style='width:136.3pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 8 &gt;&gt; 2; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = 20; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = b &gt;&gt; 1; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = &quot;50&quot; &gt;&gt; 3; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>d = -8 &gt;&gt; 2 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 8/22 = 2 </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>b = 20/2 = 10 </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>c = 50/23 = 50/8 = 6 </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>d = -8/22 = -2 </span></span></p>  </td>  <td width=182 valign=top style='width:136.3pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = “cat” &gt;&gt; 2 </span></span></p>  </td>  <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 0 &gt;&gt; 2 </span></span></p>  </td>  <td width=182 valign=top style='width:136.3pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 0 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText> </p>  </td> </tr> <tr> <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>a = 4 &gt;&gt; -2 </span></span></p>  </td>  <td width=184 valign=top style='width:137.95pt;border:none;border-bottom:  solid windowtext .5pt;background:  #D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=182 valign=top style='width:136.3pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 0 </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The number of shifts must be positive. To shift in the other direction, use the <span class=ImportantWord><span style='font-family:  Helvetica'>&lt;&lt; </span></span>operator.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>Bit shifting was a popular optimization trick used bygames programmers in the days when processors were very slow (typically 8 bit,1Mhz). The use of bit shifting instead of using base 10 arithmetic routines wasconsiderably faster. Such games are back in vogue, not only because retro is‘in’, but because Flash can emulate many of the old classic games (given somecareful ActionScript programming). One of the things to consider if you embarkon writing web based video games via ActionScript is using the same programmingshortcuts used the first time around, and bit shifting is one of them… thespirit of 1982 lives on.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The following event handler:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>puck_mc.onEnterFrame= function() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  this._x -= (this._x-_xmouse) &gt;&gt; 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  this._y -= (this._y-_ymouse) &gt;&gt; 2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… is an optimized version of the following:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>puck_mc.onEnterFrame= function() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  this._x -= Math.floor((this._x-_xmouse)/4); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  this._x -= Math.floor((this._x-_xmouse)/4); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See the example files, <ahref="../fla/(bitwiserightshift).fla">(bitwiserightshift).fla</a>and <a href="../swf/(bitwiserightshift).swf">(bitwiserightshift).swf</a>.</p><h3>Tips and precautions</h3><p class=MsoBodyText>Bit shifting to form division can be very inaccurate forsmall numbers because you truncate the decimal places twice; once for theoperands and once for the final answer. So, when calculating <span class=Code><spanstyle='font-family:Courier'>1.9/2 </span></span>you will have to truncate the <spanclass=Code><span style='font-family:Courier'>1.9 </span></span>to leave you <spanclass=Code><span style='font-family:Courier'>1/2, </span></span>giving you ananswer of <span class=Code><span style='font-family:Courier'>0.5. </span></span>You then have to truncate this answer, leaving you with nothing! </p>