<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><a name="_Toc12874588"><span lang=EN-US> Button</span></a></h1><p class=MsoBodyText><span lang=EN-US> The </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>Button</span></span><span lang=EN-US> is the main means of capturing user interaction via the mouse in Flash. Inversions of Flash before Flash MX, </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>the button wasnot an object</span></span><span lang=EN-US>. </span><span lang=EN-US> Thismeans that the way buttons are used in Flash MX is different (although you canstill use the old Flash coding styles without problems).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> For the ActionScript programmer, there are a number ofbasic features to remember if you use the Flash MX style of creating buttonscripts, and these are listed below.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In Flash MX, the button is now an object and thismeans that it has many properties and methods in common with the Movie Clip,including size (</span><span class=ImportantWord><span lang=EN-USstyle='font-family:Helvetica;'>Button._height</span></span><spanclass=ImportantWord><span lang=EN-US style='font-weight:normal'>, </span></span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._width</span></span><span class=ImportantWord><span lang=EN-USstyle='font-weight:normal'>, </span></span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>Button._xscale</span></span><spanclass=ImportantWord><span lang=EN-US style='font-weight:normal'>, </span></span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._yscale</span></span><span lang=EN-US> ),position(</span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._x</span></span><span lang=EN-US>, </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._y</span></span><span lang=EN-US> ), alpha (</span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._alpha</span></span><span lang=EN-US> ), rotation (</span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._rotation</span></span><span lang=EN-US> ) and visibility (</span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button._visibility</span></span><span lang=EN-US> ).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The most important feature of the Flash MX </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>Button</span></span><span lang=EN-US> Object to the coder is that it now has an instance name</span><span lang=EN-US>. </span><span lang=EN-US> This means that you can now write eventhandlers (more commonly known as &quot;button scripts&quot;) that are notattached to the button directly.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In Flash 5, a button script would typically look likethis:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>on(release){</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>  gotoAndPlay(&quot;myLabel&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>}</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The button that the script is associated with is thebutton it is attached to.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In Flash 6, if your button has an instance name </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>myButton_btn</span></span><i><span lang=EN-US>, </span></i><span lang=EN-US> you candefine the following script to achieve the same thing:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>myButton_btn.onRelease = function(){</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>  gotoAndPlay(&quot;myLabel&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>}</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> or</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>function buttonHandler() {</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>  gotoAndPlay(&quot;myLabel&quot;);</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>}</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>myButton_btn.onRelease = buttonHandler;</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> This effectively treats the event handler as a generalvariable (or object) that is linked to the event itself, rather than the Flash5 version, which treats the event handler as a fixed entity.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The beauty of this form is that you can define thisscript without it having to be attached to the button directly. This means thatyou can define all your button scripts in one place (usually frame 1 of </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>_root</span></span><span lang=EN-US> ).This makes for more readable and potentially modular code. To write scripts inthis format you <i>must </i>make sure thatthe button exists on the timeline when you define the button script for it. Youshould also note that the scope of these scripts is the timeline they are on,and not the timeline the button is on (the scope of a function is always thescope of the timeline it is on unless you use </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>this</span></span><span lang=EN-US> ).This can actually make coding <i>easier </i>becausethe scope of your button scripts is the same place (</span><span class=Code><spanlang=EN-US style='font-family:Courier;'>_root</span></span><span lang=EN-US> )<i>unless you actively change it with this. </i>Simplyconverting Flash 5 scripts to the Flash MX style by changing Flash 5 </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>onCipEvent(SomeEvent)</span></span><span lang=EN-US> events to Flash 6 </span><span class=Code><span lang=EN-US style='font-family:Courier;'>MovieClip.onSomeEvent = function</span></span><span lang=EN-US> style events will not always work; you also have to change the scope by adding </span><spanclass=Code><span lang=EN-US style='font-family:Courier;'>this</span></span><span lang=EN-US> in the Flash 6 event script where it was previously assumed in the Flash 5script. So:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>onClipEvent (enterFrame) {</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>   _x++;</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>}</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> becomes:</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>myClip.onEnterFrame = function() {</span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-US style='font-family:Courier;'>   this._x++;</span></span></p><p class=MsoBodyText><spanclass=Code><span lang=EN-US style='font-family:Courier;'>};</span></span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> In Flash MX, the </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>Movie Clip</span></span><span lang=EN-US> object andcomponents (</span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>FCheckBox</span></span><span lang=EN-US>, </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>FPushButton</span></span><span lang=EN-US>, </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>FRadioButton</span></span><span lang=EN-US>,along with </span><span class=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>FStyleFormat</span></span><span lang=EN-US> ) can beused to replace or extend basic </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>Button</span></span><span lang=EN-US> object functionality. In particular, the Movie Clip object can easily bemodified to do anything that the Button object can, but it has the advantagesof its own timeline and a <i>far</i> richerset of methods.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The </span><span class=Code><span lang=EN-USstyle='font-family:Courier;'>Button</span></span><span lang=EN-US> object is also harder to debug when you are using advanced ActionScript,because although you can assign local variables to a Button, they are notaccessible <i>and </i>there is no </span><spanclass=ImportantWord><span lang=EN-US style='font-family:Helvetica;'>Button.valueOf</span></span><span lang=EN-US> method to make such values accessible. This means thatyou can only see them in the debugger if you assign them to a variable on amovie clip timeline (which is a rather large work around if you have many buttons!).</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The only other way to see the value of a variablelocal to a button is if you use </span><span class=ImportantWord><spanlang=EN-US style='font-family:Helvetica;'>trace</span></span><span lang=EN-US> to send thevalue to the output window during testing. This issue can quickly becomenon-trivial with large ActionScript heavy sites, because the internal valuesheld by a </span><span class=Code><span lang=EN-US style='font-family:Courier;'>Button</span></span><span lang=EN-US>  object are hidden from you unless youtake the time to explicitly track them.</span></p><p class=MsoBodyText><span lang=EN-US> &nbsp;</span></p><p class=MsoBodyText><span lang=EN-US> The button remains useful because of its simplicityand ease of implementation, particularly where basic website navigation orsimple mouse detection is required.</span></p>