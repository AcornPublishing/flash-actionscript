<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><span lang=EN-GB>new</span></h1><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>newobjectconstructor([parms]) </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span lang=EN-GB>Where </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>objectconstructor() </span></span><spanlang=EN-GB>is a constructor of a Flash object for which a new object is to becreated, and </span><span class=Code><span lang=EN-GB style='font-family:Courier'>parms </span></span><spanlang=EN-GB>are any values to be passed to the constructor’s functions.</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB>&nbsp; </span></span></p><p class=MsoBodyText><span class=ImportantWord><span lang=EN-GBstyle='font-weight:normal'>This action is </span></span><span class=ImportantWord><span lang=EN-GBstyle='font-family:Helvetica'>compatible with Flash 5 and later.</span></span><spanclass=ImportantWord><span lang=EN-GB style='font-weight:normal'> </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><span lang=EN-GB>operator calls a constructor to create a new object.</span></p><h3><span lang=EN-GB>Description</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>operator </span></span><spanlang=EN-GB>creates a new object (usually of one of the Flash object types suchas </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Object,</span></span><spanlang=EN-GB> </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Number,</span></span><spanlang=EN-GB> and so on) and calls any functions identified in the constructor.If any parameters are included in the call to the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><span lang=EN-GB>operator, they are passed to the constructor’s functions. The prototype’sproperties and methods of the constructor are copied into the new object. (</span><spanclass=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>SeeObject._proto_ for more information on constructor prototypes. </span></span><spanlang=EN-GB>)</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=196 valign=top style='width:147.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.8pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Additional explanation </span></span></p>  </td>  <td width=188 valign=top style='width:140.8pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=196 valign=top style='width:147.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myString = new String(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myArray = new Array(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myNumber = new Number(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>Creates a new object based on the constructor of the parent object.</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.8pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr> <tr> <td width=196 valign=top style='width:147.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myMath = new Math(); </span></span></p>  </td>  <td width=188 valign=top style='width:140.8pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>The </span><span  class=Code><span lang=EN-GB style='font-family:Courier'>Math </span></span><span  lang=EN-GB>object does not have a constructor function and new objects cannot be created from it.</span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=188 valign=top style='width:140.8pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>Some objects are predefined and you cannot create new instances of them.</span></p>  </td> </tr></table><h3><span lang=EN-GB>Examples and practical uses</span></h3><h4>Background</h4><p class=MsoBodyText><span lang=EN-GB>Objects are an integral part of Flash.Objects are data structures that define not only a data type like a variable orset of variables, but also have both attributes (properties) and functions(methods). Whenever an object is used, a new instance of the object is createdthat is used instead of the base object itself. The new instance has theproperties and methods of the object it was created from (this is calledinheritance), and can also add its own properties and methods. The bigadvantage of objects is that they let you organize code into groups for reuse.For example, you can have an object that defines a particular type of textfield, and every text field created will inherit all the attributes of theobject and allow you to modify the inherited properties and methods, or addothers that are custom written (such as supporting multi-line text fields, ortext fields that use asterisks instead of echoing characters on the screen). </span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>In object-oriented programming, objectsare grouped together into common groups called classes. For example, textfields, radio buttons, and many other user interface objects can all begathered together in a class of interface objects. Classes are genericcategories, objects are more specific, and instances of the objects can geteven more specific. This can continue to as many levels deep as you need. BecauseFlash is object-based and is not a true object-oriented architecture, the wordclass is not really applicable to Flash. Instead, Flash uses the term class torefer to different types of objects, such as user interface objects, mouseobjects, and so on.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>A Flash object can have several otherobjects derived from it (all inheriting its attributes and methods), and thoseobjects can themselves have sub-objects, and so on. ActionScript contains manypredefined objects, including <b>Array</b>, <b>Boolean</b>, <b>Color</b>, <b>Date,FstyleFormat</b>, <b>Key, LoadVars, Math</b>, <b>Mouse</b>, <b>MovieClip,Number</b>, <b>Object</b>, <b>Selection, Sound</b>, <b>String</b>, <b>TextFormat</b>,<b>XML</b>, and <b>XMLSocket</b>. Some of these objects can be used directly(such as </span><span class=Code><span lang=EN-GB style='font-family:Courier'>MovieClip </span></span><spanlang=EN-GB>and </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Key </span></span><span lang=EN-GB>) while you have to create aninstance of some of them (such as </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Array </span></span><span lang=EN-GB>and </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Object </span></span><spanlang=EN-GB>). In short, Flash divides its objects into three categories: thosethat are predefined and do not have to have instances, those that must haveinstances, and some that can have instances but don’t have to. </span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>To create an instance of a class orobject, the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>new </span></span><spanlang=EN-GB>operator is used. Those objects that require an instance (which isanother object) have a special method called a constructor that tells theobject how to create an instance. When you create a new object, Flash assignsall the methods and properties that are in the prototype of the object to thenew object. The objects that must have an instance created using a constructorare <b>Array</b>, <b>Color</b>, <b>Date</b>, <b>FstyleFormat</b>, <b>LoadVars</b>,<b>Object</b>, <b>Sound</b>, <b>String</b>, <b>TextFormat</b>, <b>XML</b>, and <b>XMLSocket</b>.Those that you can define an instance of, but don’t have to, are <b>Boolean,Number</b> and <b>String</b>.</span></p><h4>The new operator</h4><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><span lang=EN-GB>operator is used to create a new object based on the object’s constructorfunction. All functions inside the constructor are called, and any parametersin the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>new </span></span><spanlang=EN-GB>operator call are passed to the functions. The _</span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>proto_ </span></span><spanlang=EN-GB>property of the object is copied into the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>_proto_ </span></span><span lang=EN-GB>property to pass all the methods and properties of the prototype object.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>For example, the command:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myXMLObject= new XML(); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… will create a new object based on theXML object. The </span><span class=Code><span lang=EN-GB style='font-family:Courier'>myXMLObject </span></span><span lang=EN-GB>object will contain all theproperties and methods of the XML object.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>When you create a new object you may wishto create some additional properties for the new object. You can do this in twoways. The first is by creating a new prototype, which requires someprogramming. The second and easier way is to define a function that adds theadditional properties to the new object for you. This function is called aconstructor function, and instead of using the keyword </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><span lang=EN-GB>tocreate a new object, you can call the constructor function instead. For maximumflexibility, we write the constructor function to add properties to a generalobject called </span><span class=Code><span lang=EN-GB style='font-family:Courier'>this </span></span><spanlang=EN-GB>in Flash.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>We can create a new object both ways to showthe difference, as well as the use of the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>this </span></span><span lang=EN-GB>keyword. To start with, we want to create a new object describing a vehiclewhich has four properties. We can create the new object, called </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>myVehicle,</span></span><spanlang=EN-GB> like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle= new Object(); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle.manufacturer= “Toyota”; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle.model= “4Runner”; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle.color= “Red”; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle.price= 45000; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Instead of using five lines to create thenew object, we could have condensed it all into a single line usinginitialisation braces, like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle= {manufacturer:”Toyota”, model:”4Runner”, color:”Red”, price=45000}; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>This code will produce a single objectcalled </span><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle.</span></span><spanlang=EN-GB> If we wanted to create ten objects, we’d have to repeat theprocess ten times. Whenever you may need to create multiple objects, you’llfind a constructor is a better way of doing the task. In this case, theconstructor looks like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>functionCar ( manufacturer, model, color, price) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.manufacturer = maufacturer; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.model = model; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.color = color; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.price = price; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>You can create functions that containproperties using the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>this </span></span><span lang=EN-GB>keyword to reference the newfunction, then use the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>new </span></span><span lang=EN-GB>operator tocreate objects of that function. For example, the function </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Car </span></span><spanlang=EN-GB>can be defined like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>functionCar ( manufacturer, model, color, price) { </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.manufacturer = maufacturer; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.model = model; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.color = color; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'> this.price = price; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>} </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>This creates a new function called </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Car </span></span><spanlang=EN-GB>that has four properties. To create objects of the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Car </span></span><spanlang=EN-GB>type and set their values, you would write:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>vehicle1= new Car (&quot;Toyota&quot;, &quot;4Runner&quot;, &quot;Red&quot;, 45000); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>vehicle2= new Car (&quot;Chevrolet&quot;, &quot;Corvette&quot;, &quot;Black&quot;,65000); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>vehicle3= new Car (&quot;Mazda&quot;, &quot;RX7&quot;, &quot;Silver&quot;, 25000); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… which will create three new objectsthat have all the properties of the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Car </span></span><span lang=EN-GB>function. If anymethods had been defined as part of </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Car,</span></span><span lang=EN-GB> the objectswould have inherited these too.</span></p><h3><span lang=EN-GB>Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-GB>The use of the </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>new </span></span><span lang=EN-GB>operator always calls the constructor function when creating a new object. Ifyou want to create a new object but don’t want to invoke the constructorfunction, you need to leave off the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>new </span></span><span lang=EN-GB>keyword. Forexample, the command:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject= {}; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… will create a new empty object called </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>myObject </span></span><spanlang=EN-GB>using the object’s initialization operator instead of theconstructor function. To create a new object which is not empty, but whichdoesn’t invoke the constructor function, specify the properties in the curlybraces, like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject= {firstname:“Tim”, surname:“Parker”, sex:“M”}; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>You could accomplish the same task usinga constructor function by creating a new object then defining the properties:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject= new parentObject(); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject.firstname= “Tim”; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject.surname= “Parker”; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myObject.sex= “M”; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>If you don’t want to use the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>new </span></span><spanlang=EN-GB>operator, you can define an object in several ways. For example,you can create a new instance of an object and initialize it at the same timewith statements like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myArray= [1, 2, 3, 4, 5]; </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myVehicle= {manufacturer:”Toyota”, model:”4Runner}; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Another way to create a new object is atrick that not many programmers know about. You create the new object bysetting it equal to an existing object of the same type, like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myArray= MyOtherArray; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>This not only creates the new object ofthe same type, but also copies all methods and properties of the existingobject. You can use this trick to create new objects of an object that normallycan’t be instantiated, such as the </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Math </span></span><span lang=EN-GB>object:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNewMath= Math; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>This would then let you override existing</span><span class=Code><span lang=EN-GB style='font-family:Courier'>Math </span></span><spanlang=EN-GB>object methods with new ones, such as those required to performMath operations on complex numbers (which </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Math </span></span><span lang=EN-GB>can’t handle using the built-in functions).</span></p>