<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1><span lang=EN-GB>Number (used as an object)</span></h1><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNum= new Number(); </span></span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNum= new Number(val); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>Where </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>myNum </span></span><span lang=EN-GB>isan instance of the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object, and </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>val </span></span><spanlang=EN-GB>is an argument used to set the new </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>instance’s initial value.</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=ImportantWord><span lang=EN-GBstyle='font-weight:normal'>This object is </span></span><span class=ImportantWord><span lang=EN-GBstyle='font-family:Helvetica'>compatible with Flash 5 and later.</span></span><spanclass=ImportantWord><span lang=EN-GB style='font-weight:normal'> </span></span></p><h3><span lang=EN-GB>Description</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object is a wrapper for the number data type and allows you to create new </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>instances using the constructor function. It has several methodsand properties associated with it that allow you to perform basic manipulationson numeric data types. </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Number </span></span><span lang=EN-GB>instancesmust be instantiated with a constructor when calling the methods or properties.Having said all that, there is no advantage in Flash to using the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>constructor to create a new </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object over performing the same tasks using variables of the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>data type. Both methods that are associated with the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>object are available for </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>Number </span></span><span lang=EN-GB>variables,and the constants associated with the object can be achieved through othermeans. In other words, instead of defining a new </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object with a value of </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>10 </span></span><span lang=EN-GB>like this:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNumber= new Number(10); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… you could simply write:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNumber= 10; </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… and accomplish exactly the same task.So, </span><span class=ImportantWord><span lang=EN-GB style='font-family:Helvetica'>thereis no practical advantage whatsoever in using the Number object over Numbervariables.</span></span><span lang=EN-GB> For the record, though, the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>object contains two methods used to return strings and values:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.toString </span></span>–returns the object value as a string</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.valueOf </span></span>–returns the object value</p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object also has several properties associated with it:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.MAX_VALUE </span></span>–the largest number representable</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.MIN_VALUE </span></span>–the smallest (negative) number representable</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.NaN </span></span>–constant for Not a Number</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.NEGATIVE_INFINITY </span></span>– constant representing negative infinity</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>Number.POSITIVE_INFINITY </span></span>– constant representing infinity</p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=204 valign=top style='width:153.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Additional explanation </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=ImportantWord><span  lang=EN-GB style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr> <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myNum1 = new Number(5); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>trace(myNum1); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:  Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>Returns a value for m</span><span class=Code><span lang=EN-GB style='font-family:Courier'>yNum1 </span></span><span  lang=EN-GB>of </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>5.</span></span><span lang=EN-GB></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:.9pt'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:.9pt'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr> <td width=204 valign=top style='width:153.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>myNum2 = new Number(); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  lang=EN-GB style='font-family:Courier'>trace(myNum2); </span></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:0in'><span lang=EN-GB>Returns a value for </span><span class=Code><span lang=EN-GB style='font-family:Courier'>myNum2 </span></span><span  lang=EN-GB>of </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>0.</span></span><span lang=EN-GB></span></p>  </td>  <td width=184 valign=top style='width:137.7pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:.9pt'><span lang=EN-GB>&nbsp;</span></p>  <p class=MsoBodyText style='margin-left:.9pt'><span lang=EN-GB>Since undefined number data types default to a value of zero, there is no advantage to using the </span><span class=Code><span lang=EN-GB style='font-family:  Courier'>Number </span></span><span lang=EN-GB>object.</span></p>  <p class=MsoBodyText style='margin-left:.9pt'>&nbsp;</p>  </td> </tr></table><h3><span lang=EN-GB>Examples and practical uses</span></h3><p class=MsoBodyText><span lang=EN-GB>The </span><span class=Code><spanlang=EN-GB style='font-family:Courier'>Number </span></span><span lang=EN-GB>object provides some primitive handling methods and constants for Flash numberdata types. To use any of these methods or constants, a new instance of theobject must be created:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myNumber= new Number(5); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>This creates an instance of the </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>object called </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>myNumber,</span></span><span lang=EN-GB> which hasthe value </span><span class=Code><span lang=EN-GB style='font-family:Courier'>5.</span></span><spanlang=EN-GB> Any of the properties and methods can be called for this instancenow:</span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span lang=EN-GB style='font-family:Courier'>myString= myNumber.toString(); </span></span></p><p class=MsoBodyText><span lang=EN-GB>&nbsp;</span></p><p class=MsoBodyText><span lang=EN-GB>… will return the string &quot;</span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>5 </span></span><spanlang=EN-GB>&quot; and store it in </span><span class=Code><span lang=EN-GBstyle='font-family:Courier'>myString.</span></span><span lang=EN-GB> See eachof the </span><span class=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>methods and properties for more explanations.</span></p><h3><span lang=EN-GB>Tips and precautions</span></h3><p class=MsoBodyText><span lang=EN-GB>When setting an initial value in a </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>Number </span></span><spanlang=EN-GB>object using the constructor, you may not be able to see its valuein the Debugger window. Instead, you will have to use a </span><spanclass=Code><span lang=EN-GB style='font-family:Courier'>trace() </span></span><spanlang=EN-GB>statement to display the result properly.</span></p>