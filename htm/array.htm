<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>Array</h1><h2>General</h2><p class=MsoBodyText>The <spanclass=Code><span style='font-family:Courier'>Array </span></span>object is a data type derived fromthe <span class=ImportantWord><span style='font-family:Helvetica'>Object </span></span>object, that is specificallydesigned to handle <span class=ImportantWord><span style='font-family:Helvetica'>lists </span></span>or sequential data<i>. </i>Althoughyou can use the <span class=ImportantWord><span style='font-family:Helvetica'>Object </span></span>object to solve the same problems,using arrays is generally easier because the array object has a rich set ofpre-built methods and properties that allow it to be used much easier wherelist based data is to be handled.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>A simplearray list is created and initialized by the code shown below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myArray= new Array(&quot;cat&quot;, &quot;dog&quot;, &quot;pig&quot;, 20.2, true); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myArray[6]= 10; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myArray[0]); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(myArray[4]); </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText>Theoutput from this script is shown below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=256 height=110src="../png/0586-dict2-13.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>… andthe structure of the array itself, as seen in the debugger is shown below:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=121 height=99src="../png/0586-dict2-14.png"></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Noticethat:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>An array can hold different types of data in the samelist.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Each element is denoted by a number <span class=Code><spanstyle='font-family:Courier'>n </span></span>and the corresponding data is held in <span class=Code><spanstyle='font-family:Courier'>myArray[n].</span></span><span class=Code><spanlang=EN-GB> </span></span></p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>The first element is <span class=Code><spanstyle='font-family:Courier'>0 </span></span>and not <span class=Code><spanstyle='font-family:Courier'>1. </span></span></p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>You can leave some elements in the array undefined. Inour case we have left <span class=Code><span style='font-family:Courier'>myArray[5] </span></span>undefined. This is perfectly legal andwill not raise an error.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Somelists require multidimensional lists. There are several ways to do this,depending on how you want your data organized. Supposing for example, that wewanted to store the (x, y) data for 5 points, and wanted to initialize them allas (0,0). There are several ways of doing this, three of which are shown below.</p><p class=MsoBodyText>&nbsp;</p><table border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;'> <tr> <td width=343 valign=top style='width:257.4pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myArray = new Array(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>for (i=0; i&lt;5; i++) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray[i] = new Array(0, 0); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myArray2 = new Array(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>for (i=0; i&lt;5; i++) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray2[i] = {x:0, y:0}; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myArray3 = new Array(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>for (i=0; i&lt;5; i++) { </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray3[i] = new Object(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray3[i].point = new Array(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray3[i].point[0] = 0; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>      myArray3[i].point[1] = 0; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>} </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  </td>  <td width=225 valign=top style='width:169.0pt;padding:0in 5.4pt 0in 5.4pt'>      <p class=MsoBodyText><img width=121 height=351  src="../png/0586-dict2-15.png"></p>    <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class=Code><span style='font-family:Courier'>myArray </span></span>is an array of arrays.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class=Code><span style='font-family:Courier'>myArray2 </span></span>is an array, each element of which is an object with properties.</p><p class=Bullet-Level1><span style='font-family:Symbol'>·<spanstyle='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><spanclass=Code><span style='font-family:Courier'>myArray3 </span></span>is anarray, each element of which is itself an array containing two further elements(‘an array of arrays’).</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>See also<span class=ImportantWord><span style='font-family:Helvetica'>Array.push </span></span>for at least oneother way of combining single dimensional arrays to form matrices of values.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You cancontinue mixing arrays and/or <span class=Code><span style='font-family:Courier'>Object </span></span>objects to achieve the desired structure. As can be seen, the creation ofcomplex data structures is very flexible, and it is relatively easy to structurethem exactly how you want them. This level of flexibility is not well known,and many designers tend to stick to a single form of multidimensional arraythat they know works. Obviously, it is not necessary to restrict yourself inthis way! </p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note alsothat the <span class=ImportantWord><span style='font-family:Helvetica'>arguments </span></span>object can also beused to structure your functions so that they accept variable length <spanclass=Code><span style='font-family:Courier'>Array </span></span>objects as their argument. Thisallows for <i>very </i>flexible datastructures when considering complex data as would be required for more onerousapplications such as 3D engines and other advanced motion graphics relatedtasks.</p><h2>Practical uses</h2><p class=MsoBodyText>Asmentioned earlier, the <span class=Code><span style='font-family:Courier'>Array </span></span>object is useful in handling listsof information. Arrays are, however, very flexible, and you can embed arrays tocreate multi-dimensional lists (matrices) or arrays of objects to create morecomplex data structures. These are all useful in any application that requiresanything other than simple variables, from parsing XML trees to creating thedata structures for holding point data for a Drawing API based vector engine.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Thegreatest advantage of the <span class=Code><span style='font-family:Courier'>Array </span></span>object is that it provides a very rich set of properties and methods, more sothan the alternative, the <span class=Code><span style='font-family:Courier'>Object </span></span>object. This makes the Array easier to understand than the <spanclass=Code><span style='font-family:Courier'>Object </span></span>object (and the associated ObjectOrientated Programming (OOP) approach, where you have to build everything upfrom scratch yourself) for the non programmer.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Additionally,arrays do not have to refer to data. A little known trick is <spanclass=ImportantWord><span style='font-family:Helvetica'>that Arrays can be madeto refer to graphical objects, such as movie clips. </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Forexample, supposing you had 3 movie clips called <span class=Code><spanstyle='font-family:Courier'>myClip1, </span></span><span class=Code><span style='font-family:Courier'>myClip2, </span></span><span class=Code><spanstyle='font-family:Courier'>myClip3 </span></span>on <span class=Code><spanstyle='font-family:Courier'>_root, </span></span>and <span class=Code><span style='font-family:Courier'>anotherClip </span></span>on <spanclass=Code><span style='font-family:Courier'>_root.someplace. </span></span>The following code will placethem all at a position <span class=Code><span style='font-family:Courier'>_x= 0 </span></span>relative totheir co-ordinate system:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myArray= [&quot;myClip1&quot;, &quot;myClip2&quot;, &quot;myClip3&quot;,“someplace.anotherClip”]; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(i=0; i&lt;myArray.length; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>    _root[myArray[i]]._x = 0; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText>Thefollowing code will attach <span class=ImportantWord><spanstyle='font-family:Helvetica'>onEnterFrame </span></span>scripts to each of 6 named movie clips:</p><p class=MsoPlainText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myArray= [&quot;menu&quot;, &quot;subBar&quot;, &quot;mainbar&quot;,&quot;clip4&quot;, &quot;b5&quot;, &quot;b6&quot;]; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for(i=0; i&lt;myArray.length; i++) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>       _root[myArray[i]].onEnterFrame = function() { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>                  this._x++; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>       }; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This isa really cool feature of Arrays; you can treat movie clips and buttons (or rather,the path to each movie clip/button) as array elements, and in doing so you can:</p><p class=MsoBodyText>&nbsp;</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Use the Array sort features to divide out your movieclips based on particular property values they have, and treat each groupseparately (by for example, coloring them differently or giving them differentevent scripts.</p><p class=Bullet-Level1><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Dynamically reassign the groups based on the normalArray editing features (<span class=ImportantWord><span style='font-family:Helvetica'>Array.push, </span></span><span class=ImportantWord><spanstyle='font-family:Helvetica'>Array.pop, </span></span><spanclass=ImportantWord><span style='font-family:Helvetica'>Array.slice, </span></span>etc). </p>