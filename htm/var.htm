<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="desref.css" type="text/css">


<h1><a name="_Toc16343125">var</a></h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>varvarname [ = value];</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>Where </span><span class=Code><spanstyle='font-family:Courier'>varname</span></span><span class=Code> is a variablename and </span><span class=Code><span style='font-family:Courier'>value</span></span><spanclass=Code>is its value </span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Compatible with </span><spanclass=ImportantWord><span style='font-family:Helvetica'>Flash Player 5 andlater</span></span><span class=Code>.</span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code>The </span><span class=Code><spanstyle='font-family:Courier'>var</span></span><span class=Code> action is usedto declare a local variable and optionally assign an initial value.</span></p><h3>Description</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>var</span></span><span class=ImportantWord><span style='font-family:Helvetica'>action</span></span>is used to define (and assign an initial value) to a localvariable. Local variables are usually declared in a function but the <spanclass=Code><span style='font-family:Courier'>var</span></span><span class=Code> action can beused outside a function in which case they define a global variable.</span></p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>  <td width=189 valign=top style='width:142.1pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Code</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=191 valign=top style='width:143.35pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Additional explanation</span></span></p>  </td>  <td width=191 valign=top style='width:143.15pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=ImportantWord><span  style='font-family:Helvetica'>Notes</span></span></p>  </td> </tr> <tr>  <td width=189 valign=top style='width:142.1pt;border:none;border-bottom:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>var var1, var2;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>&nbsp;</span></span></p>  <p class=MsoBodyText style='margin-left:0cm'><span class=Code><span  style='font-family:Courier'>var var1=10;</span></span></p>  </td>  <td width=191 valign=top style='width:143.35pt;border:none;border-bottom:  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'>Declares two local variables</p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'>Declares a variable and assigns  an initial value</p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td>  <td width=191 valign=top style='width:143.15pt;border:none;border-bottom:  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0cm'>Multiple variables can be  defined by separating the variable-value pairs with a comma.</p>  <p class=MsoBodyText style='margin-left:0cm'>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>var</span></span><spanclass=Code>action is used inside a function to declare a local variable and optionally toassign it a value. Multiple variables (and their values) can be assigned on asingle line using the </span><span class=Code><span style='font-family:Courier'>var</span></span><span class=Code> action. Local variables are valid onlyinside the function and have no meaning outside that function. For example:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>varmyVar1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>varmyVar1 = 10, myVar2 = 5</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>are both legal declarations. If the statements areinside a function definition, these variables have meaning only inside thefunction and are discarded once the function has finished executing.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>If the </span><span class=Code><spanstyle='font-family:Courier'>var</span></span><span class=Code> action isoutside a function but used within a call action, the variables are local anddiscarded when the call is finished. The </span><span class=Code><spanstyle='font-family:Courier'>var</span></span><span class=Code> action can beused to define variables in the main body of a script, but the variables areglobal, not local.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>The following code shows the operation of localvariables within functions:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>functionmyfunction() {</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   var a, b, c;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   a = 1;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   b = 2;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   c = 3;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>   // do some stuff</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>}</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>a = 4;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>b = 5;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>c = 6;</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myfunction();</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(a);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(b);</span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>trace(c);</span></span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Notice that the variables </span><spanclass=Code><span style='font-family:Courier'>a</span></span>,<spanclass=Code><span style='font-family:Courier'>b</span></span>,<spanclass=Code>and</span><span class=Code><span style='font-family:Courier'>c</span></span><span class=Code>are defined within both the function </span><spanclass=Code><span style='font-family:Courier'>myFunction</span></span><span class=Code>and the main code. During the function call,new variables </span><span class=Code><span style='font-family:Courier'>a</span></span>,<span class=Code><span style='font-family:Courier'>b</span></span>,<span class=Code>and </span><span class=Code><spanstyle='font-family:Courier'>c</span></span><spanclass=Code>aredefined within the function. The variables defined via </span><spanclass=Code><span style='font-family:Courier'>var</span></span><span class=Code>:</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText style='margin-left:52.5pt;text-indent:-18.0pt;'><span class=Code><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code>Only exist within the function block, andare separate from the same named variables in the main code.</span></p><p class=MsoBodyText style='margin-left:52.5pt;text-indent:-18.0pt;'><span class=Code><spanstyle='font-family:Symbol'>·<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></span><span class=Code>Are not persistent. In other words, theywill cease to exist as soon as the function ends the current call.</span></p><p class=MsoBodyText><span class=Code>&nbsp;</span></p><p class=MsoBodyText><span class=Code>Consequently, the local variables in the functiondo not affect the versions outside the function, and the latter will have thesame values after the function call as before it.</span></p><h3>Tips and precautions</h3><p class=MsoBodyText>When <span class=Code><span style='font-family:Courier'>var</span></span><spanclass=Code>action </span>is called with a function to define local variables tosave memory, and to ensure the variables have local scope only.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The definition of &quot;local&quot; variables has a doublemeaning in Flash, because unlike JavaScript, Flash has two types oflocalization; function based (which is the version we have just considered, andwhich also exists in JavaScript) and <i>timeline scope. </i>We will brieflyconsider the second type to make the distinction clear for readers with aJavaScript (or non motion graphics) background.</p><p class=MsoBodyText><i>&nbsp;</i></p><p class=MsoBodyText>In Flash you can have same named variables on differenttimelines. For example, you can have a variable called <span class=Code><spanstyle='font-family:Courier'>myVar</span></span>as follows:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.myClip.myVar= 10;</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>at the same time as a variable:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>_root.myOtherClip.myVar= 20;</span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Both variables have the same name, but are local to two <i>different</i>timelines (or movie clips) and have <i>different </i>values. Timeline basedlocalization allows this to take place.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>You can even have same named but different <i>functions </i>inFlash, whereby a function is treated as an <i>object </i>and copied to severaltimelines, something that would confuse a JavaScript centric view of&quot;local&quot; no end, but is normal in Flash!</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This sort of only-in-Flash programming contortion isconsidered at length in the entry for <span class=Code><span style='font-family:Courier'>this</span></span> (another concept which has subtle differencesbetween Flash and JavaScript because of the existence of timelines in Flash).See also the entry for <span class=ImportantWord><span style='font-family:Helvetica'>this</span></span>.</p>