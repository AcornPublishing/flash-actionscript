<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>{} object initializer</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject= {prop1:value1, prop2:value2…,propn:valuen}; </span></span></p><p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText>Where <span class=Code><span style='font-family:Courier'>myObject </span></span>is an object that you want to definewith properties <span class=Code><span style='font-family:Courier'>myObject.prop1, </span></span><span class=Code><span style='font-family:Courier'>myObject.prop2, </span></span>… <span class=Code><span style='font-family:Courier'>myObject.propn </span></span>with values <span class=Code><span style='font-family:Courier'>value1, </span></span><span class=Code><span style='font-family:Courier'>value2 </span></span>… <spanclass=Code><span style='font-family:Courier'>valuen </span></span>respectively.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>This operator is <b>compatiblewith Flash 5 and later</b>. <b>The objectinitializer is a shorthand version</b> of doing the following:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject= new Object(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.prop1= value1; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.prop2= value2; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>… </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myObject.propn= valuen; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Both versions of this code will produce the followingobject (as seen graphically in the Debugger window):</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=90 height=43src="../png/0586-dict2-02.png"></p><h3>Description</h3><p class=MsoBodyText>The object initializer braces are used to defineproperties of an object, and to populate the properties with values. If theobject doesn’t exist, then it is created. The object initializer is a quick wayof defining both the object and its properties in one line, rather than thelong hand version seen above. </p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr>    <td width=243 valign=top style='width:243.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Code </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>    <td width=274 valign=top style='width:2.25in;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText><span class=ImportantWord><span style='font-family:Helvetica'>Notes </span></span></p>  </td> </tr> <tr>    <td width=243 valign=top style='width:243.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>threeDeePoint = {x:20, y:34.3, z:0}; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>threeDeePoint = new Object(); </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>threeDeePoint.x = 20; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>threeDeePoint.y = 34.3; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>threeDeePoint.z = 0; </span></span></p>  <p class=MsoPlainText>&nbsp;</p>  </td>    <td width=274 valign=top style='width:2.25in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>This will create an <span class=Code><span  style='font-family:Courier'>Object </span></span>object <span class=Code><span style='font-family:Courier'>threeDeePoint, </span></span> with properties <span class=Code><span style='font-family:Courier'>x, </span></span> <span class=Code><span style='font-family:Courier'>y </span></span>and <span  class=Code><span style='font-family:Courier'>z. </span></span>These will be equal to <span class=Code><span style='font-family:Courier'>20, </span></span> <span class=Code><span style='font-family:Courier'>34.3 </span></span>and <span  class=Code><span style='font-family:Courier'>0 </span></span>respectively.</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The single line is equivalent to the second listing seen here. Both will produce the same object seen below:</p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=128 height=57  src="../png/0586-dict2-03.png"><b></b></p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>    <td width=243 valign=top style='width:243.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myText = {errorMsg:”error”, okMsg:”accepted”}; </span></span></p>  </td>    <td width=274 valign=top style='width:2.25in;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>This will create an <span class=Code><span  style='font-family:Courier'>Object </span></span>object <span class=Code><span style='font-family:Courier'>myText </span></span>with properties as shown below:</p>  <p class=MsoBodyText>&nbsp;</p>      <p class=MsoBodyText><img width=154 height=43  src="../png/0586-dict2-04.png"></p>    <p class=MsoBodyText>&nbsp;</p>  </td> </tr> <tr>    <td width=243 valign=top style='width:243.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>_root.myClip = {_x:0, _y:5}; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>_root.myClip._x = 0; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>_root.myclip._y = 5; </span></span></p>  </td>    <td width=274 valign=top style='width:2.25in;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>You can only apply the object initializer to <span  class=Code><span style='font-family:Courier'>Object </span></span>objects. You can’t apply it to other objects such as the movie clip. Here, we have tried to use the object initializer to set the position of a movie clip <span  class=Code><span style='font-family:Courier'>myClip </span></span>by setting the movie clip <span  class=Code><span style='font-family:Courier'>_x </span></span>and <span  class=Code><span style='font-family:Courier'>_y </span></span>properties. This will not work. You will instead end up with a new <span class=Code><span  style='font-family:Courier'>Object </span></span>object called <span class=Code><span style='font-family:Courier'>myClip, </span></span>and this will have only two properties, <span class=Code><span style='font-family:Courier'>_x </span></span> and <span class=Code><span style='font-family:Courier'>_y.</span></span><i> </i>You should instead use the long hand version (second listing) if you want to change the properties of objects that are not <span class=Code><span style='font-family:Courier'>Object </span></span>objects.</p>  <p class=MsoBodyText> </p>  </td> </tr> <tr>    <td width=243 valign=top style='width:243.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myArray = {0:30, 1:45, 2:89.6}; </span></span></p>  <p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoPlainText><span class=Code><span style='font-size:9.5pt;font-family:Courier'>myArray = new Array(30, 45, 89.6); </span></span></p>  </td>    <td width=274 valign=top style='width:2.25in;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'>       <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>Again, the error in the first line here is that we are trying to initialize something that is not a true <span class=Code><span  style='font-family:Courier'>Object </span></span>object. We are trying to initialize an array.</p>  <p class=MsoBodyText>&nbsp;</p>  <p class=MsoBodyText>The correct shorthand way of initializing an array is shown as the second line.</p>  <p class=MsoBodyText>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><p class=MsoBodyText>The object initializer should be used whenever you need toset the values of many <span class=ImportantWord><span style='font-family:Helvetica'>Object </span></span>object properties in one go. Using the object initializer in this way can makeusing structured data (rather than lots of separate variables) a much easierand elegant way to handle information within your code:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>if(searchString == &quot;Sham B&quot;) { </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  searchResult = {name:&quot;Sham B&quot;,publisher:&quot;FriendsOfEd&quot;}; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} else{ </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>  searchResult = {name:&quot;not found&quot;,publisher:&quot;not found&quot;}; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>} </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where you’re handling a <i>very </i>large amount of data, using objects with the objectinitializer and <span class=ImportantWord><span style='font-family:Helvetica'>for…in </span></span>can be a verypowerful way of handling data. See also the <span class=ImportantWord><spanstyle='font-family:Helvetica'>Array </span></span>object as an alternative method of handling large<span class=ImportantWord><spanstyle='font-family:Helvetica'>lists </span></span>of data.</p><h3>Tips and precautions</h3><p class=MsoBodyText>As noted in the examples, the object initializer onlyworks with the <span class=Code><span style='font-family:Courier'>Object </span></span>object. If in doubt, you should use thelong version.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Note that one advantage of using the object initializer isthat you can create complex nested property trees <i>much </i>quicker than any other method (particularly if you wouldotherwise need to set up separate constructor functions). The following linewill create an <span class=Code><span style='font-family:Courier'>Object </span></span>object with nested properties:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>myCar ={bodywork:{col:&quot;red&quot;, finish:&quot;metallic&quot;},engine:{fuel:&quot;petrol&quot;, capacity:&quot;2 litre&quot;}}; </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><img width=197 height=99src="../png/0586-dict2-05.png"></p><p class=MsoBodyText><b></b></p>