<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><link rel="stylesheet" href="desref.css" type="text/css"></head><h1>String.charCodeAt</h1><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>newString= myString.charCodeAt(index); </span></span></p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>Where variable <span class=Code><span style='font-family:Courier'>newString </span></span>will equal the code for the character found at<span class=Code><span style='font-family:Courier'>index </span></span>of <spanclass=Code><span style='font-family:Courier'>myString. </span></span></p><p class=MsoBodyText> </p><p class=MsoBodyText>The object is <span class=ImportantWord><spanstyle='font-family:Helvetica'>compatible with Flash 5 and above. </span></span>There are <span class=ImportantWord><span style='font-family:Helvetica'>noknown issues </span></span>with any version of Flash that supports this object.</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>charCodeAt </span></span>operator will return the decimal value of the character from the ASCII table.Actually, a 16-bit integer from 0 to 65535. You could use this method for manyreasons. For example, if you have a username and password to enter your site,you could retrieve the username and password from the user, create a stringbased on the codes returned by <span class=Code><span style='font-family:Courier'>charCodeAt, </span></span>and check this against the username and passwords on the server. The followingcode is an example:</p><p class=MsoBodyText>&nbsp;</p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>// Youwould however, in your movie, retrieve these values from the user. </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>password= new String(passwordInput.text); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>passString= new Array(); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>for (i= 0; i &lt; password.length; i++) passString.push(password.charCodeAt(i)); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>passwordStr= passString.join(&quot;&quot;); </span></span></p><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>&nbsp; </span></span></p><p class=MsoBodyText><span class=Code>Then, you would send the </span><spanclass=Code><span style='font-family:Courier'>passwordStr </span></span><spanclass=Code>string to the server. Extract the password based on the supplied username fromthe database. Encode the password into the same format and then check the twoagainst each other. If there’s a match, you’ve got a correct password but if itfails, then the password is incorrect. This is a more secure way to check apassword against the server, because you don’t have to send the actual passwordover.</span></p><h3>Description</h3><p class=MsoBodyText>This method retrieves the ASCII code of the character atthe specified index from the specified string.</p><p class=MsoBodyText>&nbsp;</p><table border=1 cellspacing=0 cellpadding=0 style='margin-left:14.2pt; border-collapse:collapse;border:none;'> <tr> <td width=336 valign=top style='width:252.2pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Code</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border-top:solid windowtext .5pt;  border-left:none;border-bottom:solid windowtext .5pt;border-right:none;  padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Notes</p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><br> <span class=Code><span style='font-family:Courier'>myString = new String(&quot;Joe John Bloggs&quot;); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myCharCode = myString.charCodeAt(10); </span></span></p>  <p class=MsoBodyText>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Returns <span class=Code><span  style='font-family:Courier'>“108”, </span></span>the <span class=Code><span  style='font-family:Courier'>l </span></span>in <span class=Code><span  style='font-family:Courier'>“Bloggs”.</span></span><span class=Code></span></p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myString = new String( “Joe John Bloggs”); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myCharCode = myString.charCodeAt(myString.length-1); </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Returns <span class=Code><span  style='font-family:Courier'>“115”, </span></span>the <span class=Code><span  style='font-family:Courier'>s </span></span>in <span class=Code><span  style='font-family:Courier'>“Bloggs”. </span></span></p>  </td> </tr> <tr> <td width=336 valign=top style='width:252.2pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>&nbsp; </span></span></p>  <p class=MsoBodyText style='margin-left:0in'><span class=Code><span  style='font-family:Courier'>myCharCode = myString.charCodeAt[i]; </span></span></p>  </td>  <td width=228 valign=top style='width:171.0pt;border:none;border-bottom:solid windowtext .5pt;background:#D9D9D9;padding:0in 5.4pt 0in 5.4pt'> <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>Returns <span class=Code><span  style='font-family:Courier'>undefined. </span></span></p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  <p class=MsoBodyText style='margin-left:0in'>A common syntax mistake is to try and access the method using the array access operator. This usually occurs when programmers are tired and less careful.</p>  <p class=MsoBodyText style='margin-left:0in'>&nbsp;</p>  </td> </tr></table><h3>Examples and practical uses</h3><h4>Motion graphics</h4><p class=MsoBodyText>The <span class=Code><span style='font-family:Courier'>charCodeAt </span></span>method is useful for creating a font-based string writer that can write anycharacter from a specified string. Much like those really common text effectswhere the letters fly in one by one from the top.</p><h3>Tips and precautions</h3><p class=MsoBodyText><span class=Code><span style='font-family:Courier'>charCodeAt </span></span>is zero-based, so the first character in the string is at index <spanclass=Code><span style='font-family:Courier'>0, </span></span>not index <spanclass=Code><span style='font-family:Courier'>1. </span></span></p>